{
  "className":"swingtree.styles.Individual_Component_Styling_Spec",
  "title":"Styling Components",
  "narrative":"This specification demonstrates how you can use the styling\n    API to style Swing components in a functional and declarative fashion.",
  "subjects":[],
  "statistics":{
    "runs":"20",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Styling components is based on a functional styler lambda.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Fun-Fact: \n            Styling in SwingTree is fully functional, which means \n            that the `Style` settings objects are all immutable. \n            They are not modified in place, but instead transformed\n            by so called \"styler\" lambdas.\n            Not only does this architecture make it easy to compose, reuse and share\n            styles, but it also makes it possible to have a extensive style\n            hierarchy without the need for very complex code.\n            In practice, this means that your styler lambdas become part\n            of a compositional tree of styler all the other lambdas, which is then applied to\n            the components of the component tree in every repaint.\n            How cool is that? :)\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a panel with some custom styling!","code":["var panel =","            UI.panel()","            .withStyle( it ->","                it.foundationColor(\"green\")","                  .backgroundColor(\"cyan\")","                  .foregroundColor(\"blue\")","                  .borderColor(\"blue\")","                  .borderWidth(5)","                  .shadowColor(\"black\")","                  .shadowSpreadRadius(10)","                  .shadowOffset(10)","                  .font(\"Papyrus\", 42)","            )"]},

        {"kind":"expect","text":"The background color of the panel will be set to cyan.","code":["panel.component.background == Color.cyan"]},

        {"kind":"and","text":"The foreground color of the panel will be set to blue.","code":["panel.component.foreground == Color.blue"]},

        {"kind":"and","text":"The insets of the border will be increased by the border width (because the border grows inwards).","code":["panel.component.border.getBorderInsets(panel.component) == new Insets(5, 5, 5, 5)"]},

        {"kind":"and","text":"The font of the panel will be set to Papyrus with a size of 42.","code":["panel.component.font.toString().contains(\"family=Dialog,name=Papyrus,style=plain,size=42\")"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The margins defined in the style API will be applied to the layout manager through the border insets.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Swing does not have a concept of margins.\n            Without a proper layout manager it does not even support the configuration of insets.\n            However, SwingTree fixes this\n            through a custom `Border` implementation and a default layout manager (`MigLayout`)\n            which models the margins (and paddings) of a component.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a panel with some custom styling!","code":["var panel =","            UI.panel()","            .withStyle( it ->","                it.marginRight(42)","                  .marginLeft(64)","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"\n            Note that the insets of the border of the component now model the margins of the component.\n            This information is used by the layout manager to position the component correctly.\n        ","code":["panel.border.getBorderInsets(panel) == new Insets(0, 64, 0, 42)"]},

        {"kind":"and","text":"","code":["panel.layout != null","panel.layout instanceof MigLayout"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The insets of the layout manager are based on the sum of the margin and padding for a given edge of the component bounds.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Swing does not have a concept of padding and margin.\n            Without a proper layout manager it does not even support the configuration of insets.\n            However, through a custom `Border` implementation and a default layout manager (MigLayout)\n            we can model the padding and margin of a component\n            and also render a fancy border and shadow around it (if specified).\n            Internally the layout manager will indirectly know about the margins and paddings\n            of your component through the `Border::getBorderInsets(Component)` method.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a panel with some custom styling!","code":["var panel =","            UI.panel()","            .withStyle( it ->","                it.marginTop(11)","                  .marginRight(42)","                  .marginLeft(64)","                  .paddingRight(10)","                  .paddingLeft(20)","                  .paddingBottom(30)","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"","code":["panel.border.getBorderInsets(panel) == new Insets(11, 84, 30, 52)"]},

        {"kind":"and","text":"","code":["panel.layout != null","panel.layout instanceof MigLayout"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The Styling API will make sure that the layout manager accounts for the border width!",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A border is a very common feature of Swing components and when it comes to styling\n            your UI elements should not overlap with the border.\n            This is why the styling API will make sure that the layout manager accounts for the border width\n            you specify in your style.\n            Internally the layout manager will indirectly know about the margins and paddings\n            of your component through the `Border::getBorderInsets(Component)` method.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a panel with some custom styling!","code":["var panel =","            UI.panel()","            .withStyle( it ->","                it.marginTop(7)","                  .marginRight(2)","                  .paddingLeft(14)","                  .borderWidth(5)","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"\n            The insets of the border not only model the padding and margin of the component,\n            but also the border width.\n        ","code":["panel.border.getBorderInsets(panel) == new Insets(12, 19, 5, 7)"]},

        {"kind":"and","text":"We also expect there to be the mig layout manager by default.","code":["panel.layout != null","panel.layout instanceof MigLayout"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"SwingTree will un-install any custom border if no styles are found.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            SwingTree will dynamically install or uninstall a custom border on a component\n            depending on whether or not there are any styles defined for the component.\n            Check out the following example:\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple `JLabel` UI component with a style animation.","code":["var doStyle = true","var label = UI.label(\"Click me!\")","                .withStyle(style ->","                     doStyle ? style.border(3, new Color(230, 238, 220)) : style","                )"]},

        {"kind":"expect","text":"\n            There is now a custom border installed on the label.\n        ","code":["label.component.border != null"]},

        {"kind":"when","text":"We disable the style and simulate a repaint.","code":["doStyle = false","label.component.paint(new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB).createGraphics())"]},

        {"kind":"then","text":"\n            The custom border has been uninstalled.\n        ","code":["label.component.border == null"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"SwingTree will re-install any borders overridden by the style API.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            If you supply a border implementation yourself, SwingTree may override it with a custom border\n            if you define a style for the component.\n            However, if you disable the style, SwingTree will re-install the original border.\n            Smart, right?\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple `JLabel` UI component with a style animation.","code":["var doStyle = false","var label = UI.label(\"Click me!\").withBorderTitled(\"Original border\")","                .withStyle(style ->","                     doStyle ? style.border(3, new Color(230, 238, 220)) : style","                )"]},

        {"kind":"expect","text":"\n            Initially there is a custom border installed on the label.\n        ","code":["label.component.border instanceof TitledBorder","label.component.border.title == \"Original border\""]},

        {"kind":"when","text":"We enable the style and simulate a repaint.","code":["doStyle = true","label.component.paint(new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB).createGraphics())"]},

        {"kind":"then","text":"\n            The custom border has been installed.\n        ","code":["label.component.border != null","!(label.component.border instanceof TitledBorder)"]},

        {"kind":"when","text":"We disable the style and simulate a repaint.","code":["doStyle = false","label.component.paint(new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB).createGraphics())"]},

        {"kind":"then","text":"\n            The original border has been re-installed.\n        ","code":["label.component.border instanceof TitledBorder","label.component.border.title == \"Original border\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"This is how you can create a rounded green label with a border at the bottom.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is how you can create a rounded green label with a border at the bottom.\n            It looks like this:\n            ![components/rounded-green-JLabel.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/rounded-green-JLabel.png)\n\n            It demonstrates how to style a JLabel with the style API.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a UI with a green label.","code":["var ui =","        UI.label(\"I am a green label\")","        .withStyle( it -> it","            .size(205, 60)","            .backgroundColor(new Color(40,200,70))","            .padding(4, 7, 4, 7)","            .border(0, 0, 3, 0, Color.BLACK)","            .borderRadius(13)","            .margin(12)","            .foregroundColor(Color.GREEN)","            .shadowColor(new Color(0,0,0,100))","            .shadowSpreadRadius(1)","            .shadowBlurRadius(2)","            .font(new Font(\"Arial\", Font.BOLD, 20))","        )"]},

        {"kind":"when","text":"We render the label into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.getComponent())"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/rounded-green-JLabel.png\", 99.95) > 99.95"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"This is how you can create a JPanel with a shaded border.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            It is really simple to create a JPanel with a shaded border,\n            all you need to do is pass the style configuration to the style API.\n            SwingTree will dynamically install or uninstall a custom border on a component\n            depending on whether or not there are any style configurations defined for the component. <br>\n            Note that in this example we make the border extra wide so that you can see the difference.\n            ![components/shaded-border-JPanel.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/shaded-border-JPanel.png)\n\n            It demonstrates how to style a JPanel with the style API.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a UI with a green label.","code":["var ui =","        UI.panel()","        .withStyle( it -> it","            .size(205, 205)","            .backgroundColor(new Color(40,180,240))","            .foundationColor(new Color(200,200,240))","            .padding(30)","            .margin(22)","            .border(15, Color.CYAN)","            .borderGradient(s -> s","                .align(UI.Transition.BOTTOM_RIGHT_TO_TOP_LEFT)","                .colors(Color.YELLOW, new Color(255,255,255,0))","            )","            .shadowColor(new Color(0,0,0,100))","            .shadowSpreadRadius(1)","            .shadowBlurRadius(2)","            .font(new Font(\"Arial\", Font.BOLD, 20))","        )"]},

        {"kind":"when","text":"We render the panel into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.getComponent())"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/shaded-border-JPanel.png\", 99.95) > 99.95"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can style a toggle button to have a custom selection shading.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can style a toggle button to have a custom selection shading.\n            Please note that this will actually override some parts of the original \n            look and feel of the button simply because SwingTree needs to cut some\n            corners to install custom styles for you. <br>\n            So in this example you may notice that the regular Metal Lool and Feel\n            is replaced by the our shading.\n            ![components/shaded-JToggleButton.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/shaded-JToggleButton.png)\n            And when toggled it would like this:\n            ![components/selection-shaded-JToggleButton.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/selection-shaded-JToggleButton.png)\n\n            Note that this example very nicely demonstrates how the style of a JToggleButton \n            will update immediately depending on component changes.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a toggle button with some shading gradients.","code":["var ui =","        UI.toggleButton(\"I am a toggle button\")","        .withStyle( it -> it","            .size(205, 60)","            .gradient(shade -> shade","               .align(UI.Transition.TOP_LEFT_TO_BOTTOM_RIGHT)","               .colors(","                   it.component().getModel().isSelected()","                       ? new Color[]{ Color.YELLOW, Color.CYAN   }","                       : new Color[]{ Color.CYAN,   Color.ORANGE }","               )","            )","        )"]},

        {"kind":"when","text":"We render the toggle button into a BufferedImage.","code":["var image1 = Utility.renderSingleComponent(ui.getComponent())","ui.getComponent().setSelected(true)","var image2 = Utility.renderSingleComponent(ui.getComponent())"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image1, \"components/shaded-JToggleButton.png\", 99.95) > 99.95","Utility.similarityBetween(image2, \"components/selection-shaded-JToggleButton.png\", 99.95) > 99.95"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A text area background can be shaded from left to right with any number of colors.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A component can be shaded from left to right with any number of colors.\n            ![components/left-to-right-shaded-JTextArea.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/left-to-right-shaded-JTextArea.png)\n\n            In this example we are painting a rainbow shading effect.\n            This kind of shading looks really nice on text areas.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A text area UI with a custom styler lambda.","code":["var ui =","        UI.textArea(\"\"\"Ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\"\"\")","        .peek( it -> it.setLineWrap(true) )","        .withStyle( it -> it","            .size(200, 240)","            .fontBold(true)","            .border(2, Color.DARK_GRAY)","            .backgroundColor(Color.CYAN)","            .padding(12)","            .margin(6)","            .gradient(shade -> shade","               .align(UI.Transition.LEFT_TO_RIGHT)","               .colors(","                  new Color(255,0,0,64),","                  new Color(0,255,0,64),","                  new Color(0,0,255,64),","                  new Color(255,255,0,64),","                  new Color(255,0,255,64),","                  new Color(0,255,255,64)","               )","               .layer(UI.Layer.BACKGROUND)","            )","        )"]},

        {"kind":"when","text":"We render the text area into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.getComponent())"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/left-to-right-shaded-JTextArea.png\", 99.95) > 99.95"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Make a text area look like it is sunken in the background using a shadow going inwards.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Make a text area look like it is sunken in the background using a shadow going inwards.\n            We achieve this by configuring the default shadow (with the name \"default\").\n            ![components/sunken-JTextArea.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/sunken-JTextArea.png)\n\n            This kind of shadow effect looks really nice on text areas.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A text area UI with a custom styler lambda.","code":["var ui =","        UI.textArea(\"\"\"Ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\"\"\")","        .peek( it -> it.setLineWrap(true) )","        .withStyle( it -> it","            .size(200, 240)","            .backgroundColor(new Color(120,255,240))","            .foundationColor(new Color(50,100,200))","            .margin(12)","            .padding(6, 7, 6, 7)","            .borderRadius(16)","            .foregroundColor(Color.DARK_GRAY)","            .shadowColor(new Color(0,0,0))","            .shadowBlurRadius(4)","            .shadowIsInset(true)","            .font(new Font(\"Palatino\", Font.PLAIN, 20))","        )"]},

        {"kind":"when","text":"We render the text area into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.getComponent())"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/sunken-JTextArea.png\", 99.95) > 99.95"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Create a soft UI slider that sinks into the background if you wish.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Specifying multiple (named) shadows, allows you to create soft UI,\n            like for example a slider that sinks into the background. <br>\n            The reason why we use named shadows is because we don't want to override\n            the default shadow of the slider, but rather add a new one. <br>\n\n            ![components/soft-JSlider.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/soft-JSlider.png)\n\n            The concept of naming exists to make any number of sub-styles possible.\n            This concept of sub-styles is not exclusive to shadows.\n            You can also name shadesa and custom foreground or background painters.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"Before we create the styled slider, we first setup up FlatLaF as a basis.","code":["FlatLightLaf.setup()"]},

        {"kind":"and","text":"Now a slider UI with a custom styler lambda.","code":["var ui =","        UI.slider(UI.Align.HORIZONTAL, 0, 100, 50)","        .withStyle( it -> it","            .size(280, 38)","            .prefSize(280, 38)","            .borderRadius(20)","            .backgroundColor(new Color(0.4f, 0.85f, 1))","            .foundationColor(new Color(0.4f, 0.85f, 1))","            .shadow(\"bright\", s -> s","                .color(new Color(0.7f, 0.95f, 1f, 0.35f))","                .offset(-11)","            )","            .shadow(\"dark\", s -> s","                .color(new Color(0, 0.1f, 0.2f, 0.20f))","                .offset(+4)","            )","            .shadowBlurRadius(4)","            .shadowSpreadRadius(-2)","            .shadowIsInset(true)","            .shadowLayer(UI.Layer.BACKGROUND) // So that the slider track is not affected by the shadow.","            .padding(6)","            .margin(10)","        )"]},

        {"kind":"when","text":"We render the slider into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.getComponent())"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/soft-JSlider.png\", 99.8) > 99.8"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The look of a component, like a button for example, will be preserved if possible, when doing custom styling.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            In order to make it possible for SwingTree to apply the styles you specify,\n            it will have to override some parts of the original look and feel of the component.\n            However, SwingTree will try to preserve as much of the original look and feel as possible. <br>\n            So for example, if you specify simple style attributes like padding, margin or border radius,\n            the component will still look like a regular button, \n            but with the specified padding, margin or border radius. <br>\n\n            ![components/rounded-metal-JButton.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/rounded-metal-JButton.png)\n\n            In this example we have a button with a custom style that specifies a border radius of 20 pixels\n            as well as a little bit of padding and margin. <br>\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A button UI with a custom styler lambda.","code":["var ui =","        UI.button(\"I am a button\")","        .withStyle( it -> it","            .size(200, 60)","            .border(1, Color.BLACK)","            .borderRadius(20)","            .padding(6)","            .margin(10)","        )"]},

        {"kind":"when","text":"We render the button into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.getComponent())"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/rounded-metal-JButton.png\", 99.95) > 99.95"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Turn a panel into a card like looking panel by giving it a round border, background color and some margins.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            If you want certain content to be grouped and highlighted by a custom background color\n            and a rounded border so that it looks like a card, you can do that\n            very easily in a `Styler` lambda. <br>\n            Here you can see an example of a panel with a black border of 3 pixels,\n            a margin of 10 pixels and a border radius of 36 pixels. <br>\n            ![components/banner-JPanel.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/banner-JPanel.png)\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A panel UI with a custom styler lambda.","code":["var ui =","        UI.panel()","        .withStyle( it -> it","            .size(160, 120)","            .border(3, Color.BLACK)","            .borderRadius(36)","            .backgroundColor(Color.CYAN)","            .padding(6)","            .margin(10)","        )"]},

        {"kind":"when","text":"We render the panel into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.getComponent())"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/banner-JPanel.png\", 99.95) > 99.95"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Adjust how text is styled through the API exposed in your `Styler` lambdas",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                The `Styler` lambda exposes a lot of API to adjust how text is styled. <br>\n                More specifically, you can adjust the style of the font, e.g. the font family, size and, well, style. <br>\n                <br>\n                Here you can see an example of a text area with a custom font family, size and style. <br>\n                ![components/custom-font-JTextArea.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/custom-font-JTextArea.png)\n            "]
      },
      "blocks":[
        {"kind":"given","text":"A text area UI with a custom styler lambda.","code":["var ui =","        UI.textArea(\"I am a text area, \\nhow are you today :) ?\")","        .peek( it -> it.setLineWrap(true) )","        .withStyle( it -> it","            .size(140, 80)","            .font(\"Goudy Old Style\", 13)","            .fontBold(true)","            .fontItalic(true)","            .fontColor(\"#FF0000\") // Red","        )"]},

        {"kind":"when","text":"We render the text area into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.getComponent())"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/custom-font-JTextArea.png\", 99.95) > 99.95"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"For full styling freedom, we can add custom painters to a component on various layers.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            If you want to have full control over how a component is painted,\n            you can add custom painters to a component on various layers. <br>\n            <br>\n            Here you can see an example of a panel with a custom painter on the background layer. <br>\n            ![components/custom-painter-JLabel.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/custom-painter-JLabel.png)\n\n            This little example demonstrates very nicely how the painters are layered on top of each other\n            and at which layer the text of the component is painted over by your custom painters.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A label UI with a custom styler lambda.","code":["            var ui =","                    UI.label(\"I am a label\")","                    .withStyle( it -> it","                        .size(120, 50)","                        .padding(6)","                        .margin(10)","                        .painter(UI.Layer.BACKGROUND, g -> {","                            g.setColor(Color.RED);","                            g.fillRoundRect(10,15,20,20,5,5);","                        })","                        .painter(UI.Layer.CONTENT, g -> {","                             g.setColor(Color.ORANGE);","                             g.fillRoundRect(25,15,20,20,5,5);","                        })","                        .painter(UI.Layer.BORDER, g -> {","                             g.setColor(Color.BLUE);","                             g.fillRoundRect(40,15,20,20,5,5);","                        })","                        .painter(UI.Layer.FOREGROUND, g -> {","                             g.setColor(Color.MAGENTA);","                             g.fillRoundRect(55,15,20,20,5,5);","                        })","","                    )"]},

        {"kind":"when","text":"We render the label into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.getComponent())"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/custom-painter-JLabel.png\", 99.95) > 99.95"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The cursor of any component can be configured through the style API.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The cursor of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The cursor of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The cursor of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The cursor of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The cursor of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The cursor of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the cursor in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.cursor(cursor) )"]},

        {"kind":"expect","text":"The component indeed has the specified cursor!","code":["ui.component.cursor == cursor.toAWTCursor()"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JBox()","new JSlider()","new JSpinner()"],"cursor":["UI.Cursor.HAND","UI.Cursor.CROSS","UI.Cursor.DEFAULT","UI.Cursor.RESIZE_EAST","UI.Cursor.RESIZE_NORTH","UI.Cursor.RESIZE_NORTH_EAST"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["ui.component.background == color"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JBox()","new JSlider()","new JSpinner()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.CYAN","Color.MAGENTA"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The foreground color of any component can be configured through the style API.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The foreground color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The foreground color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The foreground color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The foreground color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The foreground color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The foreground color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the foreground color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.foregroundColor(color) )"]},

        {"kind":"expect","text":"The component indeed has the specified foreground color!","code":["ui.component.foreground == color"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JBox()","new JSlider()","new JSpinner()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.CYAN","Color.MAGENTA"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The horizontal text alignment of many text based components can be configured through the style API.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The horizontal text alignment of many text based components can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The horizontal text alignment of many text based components can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The horizontal text alignment of many text based components can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The horizontal text alignment of many text based components can be configured through the style API\n            exposed by the `withStyle` method. \n        ","\n            The horizontal text alignment of many text based components can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the horizontal text alignment in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.fontAlignment(alignment) )"]},

        {"kind":"expect","text":"The component indeed has the specified horizontal text alignment!","code":["ui.component.horizontalAlignment == alignment.forSwing()"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextField()","new JPasswordField()","new JMenuItem()","new JCheckBoxMenuItem()"],"alignment":["UI.HorizontalAlignment.LEFT","UI.HorizontalAlignment.RIGHT","UI.HorizontalAlignment.CENTER","UI.HorizontalAlignment.LEADING","UI.HorizontalAlignment.TRAILING"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
