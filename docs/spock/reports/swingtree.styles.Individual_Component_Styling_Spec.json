{
  "className":"swingtree.styles.Individual_Component_Styling_Spec",
  "title":"Styling Components",
  "narrative":"This specification demonstrates how the style API can be used to style\n    individual components declaratively.\n    You may access it on any SwingTree builder by passing a `Styler` lambda\n    to the `withStyle` method.\n    A `Styler` lambda applies style rules to a component\n    by receiving a `ComponentStyleDelegate` and returning\n    an updated version with the desired style rules applied.\n\n    Here a typical example of how to style a button\n    using the style API:\n    ```java\n        UI.button(\"Click Me!\")\n        .withStyle( it -> it\n            .borderColor(Color.CYAN)\n            .borderWidthAt(Edge.BOTTOM, 3)\n            .borderRadius(10)\n        )\n    ```\n\n    Here the `it` variable is the `ComponentStyleDelegate` which exposes\n    an extensive API for configuring how a particular component\n    looks and behaves.",
  "subjects":[],
  "statistics":{
    "runs":"112",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"An animated style transition transforms your style configuration based on its animation state.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The style API allows you to define animated style transitions.\n            This is a very powerful feature that allows your fancy UI styles\n            to be animated from one state to another. \n\n            In this example we are using a boolean based `Var` to control the transition.\n            It is passed to the `withTransitionalStyle` method of the UI builder API\n            where you can define a transitional `Styler` lambda that does not only\n            receive the `ComponentStyleDelegate` but also the `AnimationState` of the transition.\n            The `AnimationState` allows you to access the \"progress\" of the transition,\n            which is a value between 0 and 1 that indicates how far the transition has progressed.\n\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/transitioning-label.png\" alt=\"/snapshots/components/transitioning-label.png\" style=\"max-width: 50%;\" />\n\n            You can use this progress value to interpolate between two states.\n            If the progress has reached 1 in this concrete example, then the component\n            will look like the fancily styled label on the right.\n\n            If the progress is 0 on the other hand, the comoponent will look\n            like a regular label. Take a look:\n\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/pre-transitioning-label_2_.png\" alt=\"/snapshots/components/pre-transitioning-label_2_.png\" style=\"max-width: 50%;\" />\n\n            Except for the text it is almost completely unrecongnizable from the previous image, \n            right? :)\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We first define a flag property that we will use to control the transition:","code":["var isOn = Var.of(false)","var THICKNESS = 5"]},

        {"kind":"and","text":"Then we create label with a lot of style properties...","code":["var ui =","        UI.label(\"I am transitioning into...\")","        .withSize(300, 160)","        .withTransitionalStyle(isOn, LifeTime.of(0, TimeUnit.MILLISECONDS), (state, it) -> it","            .padding(26 - (THICKNESS/2) * state.progress())","            .margin(42 - (THICKNESS/2) * state.progress())","            .borderRadius( 38 * state.progress() )","            .border(THICKNESS * state.progress(), UI.color(0.5,1,1))","            .backgroundColor(200/255d, 210/255d, 220/255d, state.progress() )","            .shadow(\"bright\", s -> s","                .color(0.5, 1, 1, state.progress())","                .offset(-6)","            )","            .shadow(\"dark\", s -> s","                .color(0, 0, 0, state.progress()/4)","                .offset(+6)","            )","            .shadowBlurRadius(10 * state.progress())","            .shadowSpreadRadius(-5 * state.progress())","            .shadowIsInset(false)","            .gradient(UI.Layer.BORDER, \"border-grad\", grad -> grad","                .span(UI.Span.TOP_LEFT_TO_BOTTOM_RIGHT)","                .colors(","                    UI.color(0.75, 0.5, 1, state.progress()),","                    UI.color(0.5, 1, 1, 0)","                )","                .clipTo(UI.ComponentArea.BORDER)","            )","            .gradient(UI.Layer.BACKGROUND, \"content-grad\", grad -> grad","                .type(UI.GradientType.RADIAL)","                .boundary(UI.ComponentBoundary.BORDER_TO_INTERIOR)","                .offset(","                    it.component().getWidth()*state.progress(),","                    it.component().getHeight()*state.progress()","                )","                .colors(","                    UI.color(0.35, 0.71, 1, state.progress()),","                    UI.color(0.5, 1, 1, 0)","                )","                .clipTo(UI.ComponentArea.BODY)","                .size(100+250*state.progress())","            )","        )"]},

        {"kind":"and","text":"We build the underlying Swing component:","code":["var textField = ui.get(JLabel)"]},

        {"kind":"when","text":"We set the `isOn` flag to true:","code":["isOn.set(true)"]},

        {"kind":"and","text":"We wait for the transition to complete:","code":["Thread.sleep(50)","UI.sync()"]},

        {"kind":"and","text":"We render the label into a BufferedImage:","code":["var image = Utility.renderSingleComponent(textField)"]},

        {"kind":"then","text":"\n            The label has transitioned into a fancy looking component.\n        ","code":["Utility.similarityBetween(image, \"components/transitioning-label.png\", 99.5) > 99.5"]},

        {"kind":"when","text":"\n            We now want to go back to the initial state, so we set the `isOn` flag to false again...\n            This will case the animation state progress to go back to 0, \n            which simplifies the style configuration.\n        ","code":["isOn.set(false)"]},

        {"kind":"and","text":"...again we wait for the transition to complete...","code":["Thread.sleep(50)","UI.sync()"]},

        {"kind":"and","text":"We render the label into a BufferedImage again:","code":["image = Utility.renderSingleComponent(textField)"]},

        {"kind":"then","text":"\n            Now the label has transitioned back to its initial state.\n            An it looks as expected.\n        ","code":["Utility.similarityBetween(image, \"components/pre-transitioning-label.png\", 99.93) > 99.93"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The functional style API changes the state of your components to reflect the desired looks. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Fun-Fact: \n            Styling in SwingTree is fully functional, which means \n            that the style config objects are all immutable. \n            They are not modified in place, but instead transformed\n            by so called \"`Styler` lambdas\".\n            Not only does this architecture make it easy to compose, reuse and share\n            styles, but it also makes it possible to have an extensive hierarchy of\n            styles without the need for complicated code at all.\n            In practice, this means that your styles become part\n            of a compositional tree of `Styler` lambdas.\n            The fact that they are side effect free lambdas makes it possible to\n            evaluate the styles every repaint so that they can then be applied to\n            the components of the component tree completely dynamically.\n            How cool is that? :)\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var ui =","         UI.panel()","         .withStyle( it -> it","             .foundationColor(\"green\")","             .backgroundColor(\"cyan\")","             .foregroundColor(\"blue\")","             .borderColor(\"blue\")","             .borderWidth(5)","             .shadowColor(\"black\")","             .shadowSpreadRadius(10)","             .shadowOffset(10)","             .font(\"Papyrus\", 42)","         )"]},

        {"kind":"and","text":"We build the panel:","code":["var panel = ui.get(JPanel)"]},

        {"kind":"expect","text":"\n                Now!\n                The below line looks very strange, but it is actually the correct assertion!\n                The background color should not be cyan, but fully transparent instead.\n                To understand what is going on here, you have to know that when a component is\n                flagged to be opaque, then every Swing look and feel will, before painting\n                anything else, first fill out the entire background of the component with\n                the background color of the component.\n\n                Now this is a problem when you have the background layer of your SwingTree component\n                styled using various things like gradients, shadows, images, etc.\n\n                We could simply set the opaque flag to false, but then we would lose the\n                performance benefits of having the opaque flag set to true (avoiding the\n                traversal repaint of parent components, and their parent components, etc).\n\n                The style configuration of this particular component\n                leads to an opaque panel, and we also have the ability to render\n                the background of the component ourselves due to the\n                component being a SwingTree component (it has the paint method overridden).\n\n                So what we do here is we set the background color of the component to\n                UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n                This way, when the Swing look and feel tries to paint the background of the\n                component, it will actually paint nothing, and we can do the background\n                painting ourselves in the paint method of the component.\n        ","code":["panel.background == new Color(0,0,0,0)"]},

        {"kind":"and","text":"The foreground color of the panel will be set to blue.","code":["panel.foreground == Color.blue"]},

        {"kind":"and","text":"The insets of the border will be increased by the border width (because the border grows inwards).","code":["panel.border.getBorderInsets(panel) == new Insets(5 * uiScale, 5 * uiScale, 5 * uiScale, 5 * uiScale)"]},

        {"kind":"and","text":"The font of the panel will be set to Papyrus with a size of 42 * uiScale.","code":["panel.font.toString().contains(\"family=Dialog,name=Papyrus,style=plain,size=\" + 42 * uiScale)"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The functional style API changes the state of your components to reflect the desired looks. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Fun-Fact: \n            Styling in SwingTree is fully functional, which means \n            that the style config objects are all immutable. \n            They are not modified in place, but instead transformed\n            by so called \"`Styler` lambdas\".\n            Not only does this architecture make it easy to compose, reuse and share\n            styles, but it also makes it possible to have an extensive hierarchy of\n            styles without the need for complicated code at all.\n            In practice, this means that your styles become part\n            of a compositional tree of `Styler` lambdas.\n            The fact that they are side effect free lambdas makes it possible to\n            evaluate the styles every repaint so that they can then be applied to\n            the components of the component tree completely dynamically.\n            How cool is that? :)\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var ui =","         UI.panel()","         .withStyle( it -> it","             .foundationColor(\"green\")","             .backgroundColor(\"cyan\")","             .foregroundColor(\"blue\")","             .borderColor(\"blue\")","             .borderWidth(5)","             .shadowColor(\"black\")","             .shadowSpreadRadius(10)","             .shadowOffset(10)","             .font(\"Papyrus\", 42)","         )"]},

        {"kind":"and","text":"We build the panel:","code":["var panel = ui.get(JPanel)"]},

        {"kind":"expect","text":"\n                Now!\n                The below line looks very strange, but it is actually the correct assertion!\n                The background color should not be cyan, but fully transparent instead.\n                To understand what is going on here, you have to know that when a component is\n                flagged to be opaque, then every Swing look and feel will, before painting\n                anything else, first fill out the entire background of the component with\n                the background color of the component.\n\n                Now this is a problem when you have the background layer of your SwingTree component\n                styled using various things like gradients, shadows, images, etc.\n\n                We could simply set the opaque flag to false, but then we would lose the\n                performance benefits of having the opaque flag set to true (avoiding the\n                traversal repaint of parent components, and their parent components, etc).\n\n                The style configuration of this particular component\n                leads to an opaque panel, and we also have the ability to render\n                the background of the component ourselves due to the\n                component being a SwingTree component (it has the paint method overridden).\n\n                So what we do here is we set the background color of the component to\n                UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n                This way, when the Swing look and feel tries to paint the background of the\n                component, it will actually paint nothing, and we can do the background\n                painting ourselves in the paint method of the component.\n        ","code":["panel.background == new Color(0,0,0,0)"]},

        {"kind":"and","text":"The foreground color of the panel will be set to blue.","code":["panel.foreground == Color.blue"]},

        {"kind":"and","text":"The insets of the border will be increased by the border width (because the border grows inwards).","code":["panel.border.getBorderInsets(panel) == new Insets(5 * uiScale, 5 * uiScale, 5 * uiScale, 5 * uiScale)"]},

        {"kind":"and","text":"The font of the panel will be set to Papyrus with a size of 42 * uiScale.","code":["panel.font.toString().contains(\"family=Dialog,name=Papyrus,style=plain,size=\" + 42 * uiScale)"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The functional style API changes the state of your components to reflect the desired looks. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Fun-Fact: \n            Styling in SwingTree is fully functional, which means \n            that the style config objects are all immutable. \n            They are not modified in place, but instead transformed\n            by so called \"`Styler` lambdas\".\n            Not only does this architecture make it easy to compose, reuse and share\n            styles, but it also makes it possible to have an extensive hierarchy of\n            styles without the need for complicated code at all.\n            In practice, this means that your styles become part\n            of a compositional tree of `Styler` lambdas.\n            The fact that they are side effect free lambdas makes it possible to\n            evaluate the styles every repaint so that they can then be applied to\n            the components of the component tree completely dynamically.\n            How cool is that? :)\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var ui =","         UI.panel()","         .withStyle( it -> it","             .foundationColor(\"green\")","             .backgroundColor(\"cyan\")","             .foregroundColor(\"blue\")","             .borderColor(\"blue\")","             .borderWidth(5)","             .shadowColor(\"black\")","             .shadowSpreadRadius(10)","             .shadowOffset(10)","             .font(\"Papyrus\", 42)","         )"]},

        {"kind":"and","text":"We build the panel:","code":["var panel = ui.get(JPanel)"]},

        {"kind":"expect","text":"\n                Now!\n                The below line looks very strange, but it is actually the correct assertion!\n                The background color should not be cyan, but fully transparent instead.\n                To understand what is going on here, you have to know that when a component is\n                flagged to be opaque, then every Swing look and feel will, before painting\n                anything else, first fill out the entire background of the component with\n                the background color of the component.\n\n                Now this is a problem when you have the background layer of your SwingTree component\n                styled using various things like gradients, shadows, images, etc.\n\n                We could simply set the opaque flag to false, but then we would lose the\n                performance benefits of having the opaque flag set to true (avoiding the\n                traversal repaint of parent components, and their parent components, etc).\n\n                The style configuration of this particular component\n                leads to an opaque panel, and we also have the ability to render\n                the background of the component ourselves due to the\n                component being a SwingTree component (it has the paint method overridden).\n\n                So what we do here is we set the background color of the component to\n                UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n                This way, when the Swing look and feel tries to paint the background of the\n                component, it will actually paint nothing, and we can do the background\n                painting ourselves in the paint method of the component.\n        ","code":["panel.background == new Color(0,0,0,0)"]},

        {"kind":"and","text":"The foreground color of the panel will be set to blue.","code":["panel.foreground == Color.blue"]},

        {"kind":"and","text":"The insets of the border will be increased by the border width (because the border grows inwards).","code":["panel.border.getBorderInsets(panel) == new Insets(5 * uiScale, 5 * uiScale, 5 * uiScale, 5 * uiScale)"]},

        {"kind":"and","text":"The font of the panel will be set to Papyrus with a size of 42 * uiScale.","code":["panel.font.toString().contains(\"family=Dialog,name=Papyrus,style=plain,size=\" + 42 * uiScale)"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The functional style API changes the state of raw Swing components to reflect the desired looks. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Fun-Fact: \n            Styling in SwingTree is fully functional, which means \n            that the style config objects are all immutable. \n            They are not modified in place, but instead transformed\n            by so called \"`Styler` lambdas\".\n            Not only does this architecture make it easy to compose, reuse and share\n            styles, but it also makes it possible to have an extensive hierarchy of\n            styles without the need for complicated code at all.\n            In practice, this means that your styles become part\n            of a compositional tree of `Styler` lambdas.\n            The fact that they are side effect free lambdas makes it possible to\n            evaluate the styles every repaint so that they can then be applied to\n            the components of the component tree completely dynamically.\n            How cool is that? :)\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var ui =","            UI.of(new JPanel())","            .withStyle( it -> it","                .foundationColor(\"green\")","                .backgroundColor(\"cyan\")","                .foregroundColor(\"blue\")","                .borderColor(\"blue\")","                .borderWidth(5)","                .shadowColor(\"black\")","                .shadowSpreadRadius(10)","                .shadowOffset(10)","                .font(\"Papyrus\", 42)","            )"]},

        {"kind":"and","text":"We build the panel:","code":["var panel = ui.get(JPanel)"]},

        {"kind":"expect","text":"The background color of the panel will be set to cyan.","code":["panel.background == Color.cyan"]},

        {"kind":"and","text":"The foreground color of the panel will be set to blue.","code":["panel.foreground == Color.blue"]},

        {"kind":"and","text":"The insets of the border will be increased by the border width (because the border grows inwards).","code":["panel.border.getBorderInsets(panel) == new Insets(5 * uiScale, 5 * uiScale, 5 * uiScale, 5 * uiScale)"]},

        {"kind":"and","text":"The font of the panel will be set to Papyrus with a size of 42 * uiScale.","code":["panel.font.toString().contains(\"family=Dialog,name=Papyrus,style=plain,size=\" + 42 * uiScale)"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The functional style API changes the state of raw Swing components to reflect the desired looks. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Fun-Fact: \n            Styling in SwingTree is fully functional, which means \n            that the style config objects are all immutable. \n            They are not modified in place, but instead transformed\n            by so called \"`Styler` lambdas\".\n            Not only does this architecture make it easy to compose, reuse and share\n            styles, but it also makes it possible to have an extensive hierarchy of\n            styles without the need for complicated code at all.\n            In practice, this means that your styles become part\n            of a compositional tree of `Styler` lambdas.\n            The fact that they are side effect free lambdas makes it possible to\n            evaluate the styles every repaint so that they can then be applied to\n            the components of the component tree completely dynamically.\n            How cool is that? :)\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var ui =","            UI.of(new JPanel())","            .withStyle( it -> it","                .foundationColor(\"green\")","                .backgroundColor(\"cyan\")","                .foregroundColor(\"blue\")","                .borderColor(\"blue\")","                .borderWidth(5)","                .shadowColor(\"black\")","                .shadowSpreadRadius(10)","                .shadowOffset(10)","                .font(\"Papyrus\", 42)","            )"]},

        {"kind":"and","text":"We build the panel:","code":["var panel = ui.get(JPanel)"]},

        {"kind":"expect","text":"The background color of the panel will be set to cyan.","code":["panel.background == Color.cyan"]},

        {"kind":"and","text":"The foreground color of the panel will be set to blue.","code":["panel.foreground == Color.blue"]},

        {"kind":"and","text":"The insets of the border will be increased by the border width (because the border grows inwards).","code":["panel.border.getBorderInsets(panel) == new Insets(5 * uiScale, 5 * uiScale, 5 * uiScale, 5 * uiScale)"]},

        {"kind":"and","text":"The font of the panel will be set to Papyrus with a size of 42 * uiScale.","code":["panel.font.toString().contains(\"family=Dialog,name=Papyrus,style=plain,size=\" + 42 * uiScale)"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The functional style API changes the state of raw Swing components to reflect the desired looks. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Fun-Fact: \n            Styling in SwingTree is fully functional, which means \n            that the style config objects are all immutable. \n            They are not modified in place, but instead transformed\n            by so called \"`Styler` lambdas\".\n            Not only does this architecture make it easy to compose, reuse and share\n            styles, but it also makes it possible to have an extensive hierarchy of\n            styles without the need for complicated code at all.\n            In practice, this means that your styles become part\n            of a compositional tree of `Styler` lambdas.\n            The fact that they are side effect free lambdas makes it possible to\n            evaluate the styles every repaint so that they can then be applied to\n            the components of the component tree completely dynamically.\n            How cool is that? :)\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var ui =","            UI.of(new JPanel())","            .withStyle( it -> it","                .foundationColor(\"green\")","                .backgroundColor(\"cyan\")","                .foregroundColor(\"blue\")","                .borderColor(\"blue\")","                .borderWidth(5)","                .shadowColor(\"black\")","                .shadowSpreadRadius(10)","                .shadowOffset(10)","                .font(\"Papyrus\", 42)","            )"]},

        {"kind":"and","text":"We build the panel:","code":["var panel = ui.get(JPanel)"]},

        {"kind":"expect","text":"The background color of the panel will be set to cyan.","code":["panel.background == Color.cyan"]},

        {"kind":"and","text":"The foreground color of the panel will be set to blue.","code":["panel.foreground == Color.blue"]},

        {"kind":"and","text":"The insets of the border will be increased by the border width (because the border grows inwards).","code":["panel.border.getBorderInsets(panel) == new Insets(5 * uiScale, 5 * uiScale, 5 * uiScale, 5 * uiScale)"]},

        {"kind":"and","text":"The font of the panel will be set to Papyrus with a size of 42 * uiScale.","code":["panel.font.toString().contains(\"family=Dialog,name=Papyrus,style=plain,size=\" + 42 * uiScale)"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the style API to make panel edges round. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            In raw Swing it is not possible to make the edges of a panel round.\n            However, SwingTree makes it possible to do so trough the style API.\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/rounded-panel.png\" alt=\"/snapshots/components/rounded-panel.png\" style=\"max-width: 50%;\" />\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)","SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var ui =","            UI.panel().withBackground(UI.color(\"salmon\"))","            .withStyle( it -> it","                .borderRadius(42)","                .size(180, 120)","            )"]},

        {"kind":"and","text":"We build the panel:","code":["var panel = ui.get(JPanel)"]},

        {"kind":"and","text":"We expect that the panel has the background color \"salmon\".","code":["panel.background == new Color(250, 128, 114)"]},

        {"kind":"and","text":"The panel is no longer opaque (due to the edges exposing the parent background).","code":["!panel.isOpaque()"]},

        {"kind":"when","text":"We render the panel into a BufferedImage.","code":["var image = Utility.renderSingleComponent(panel)"]},

        {"kind":"then","text":"The rendered image of the panel is as expected.","code":["Utility.similarityBetween(image, \"components/rounded-panel.png\", 99.5) > 99.5"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the style API to make panel edges round. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            In raw Swing it is not possible to make the edges of a panel round.\n            However, SwingTree makes it possible to do so trough the style API.\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/rounded-panel.png\" alt=\"/snapshots/components/rounded-panel.png\" style=\"max-width: 50%;\" />\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)","SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var ui =","            UI.panel().withBackground(UI.color(\"salmon\"))","            .withStyle( it -> it","                .borderRadius(42)","                .size(180, 120)","            )"]},

        {"kind":"and","text":"We build the panel:","code":["var panel = ui.get(JPanel)"]},

        {"kind":"and","text":"We expect that the panel has the background color \"salmon\".","code":["panel.background == new Color(250, 128, 114)"]},

        {"kind":"and","text":"The panel is no longer opaque (due to the edges exposing the parent background).","code":["!panel.isOpaque()"]},

        {"kind":"when","text":"We render the panel into a BufferedImage.","code":["var image = Utility.renderSingleComponent(panel)"]},

        {"kind":"then","text":"The rendered image of the panel is as expected.","code":["Utility.similarityBetween(image, \"components/rounded-panel.png\", 99.5) > 99.5"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the style API to make panel edges round. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            In raw Swing it is not possible to make the edges of a panel round.\n            However, SwingTree makes it possible to do so trough the style API.\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/rounded-panel.png\" alt=\"/snapshots/components/rounded-panel.png\" style=\"max-width: 50%;\" />\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)","SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var ui =","            UI.panel().withBackground(UI.color(\"salmon\"))","            .withStyle( it -> it","                .borderRadius(42)","                .size(180, 120)","            )"]},

        {"kind":"and","text":"We build the panel:","code":["var panel = ui.get(JPanel)"]},

        {"kind":"and","text":"We expect that the panel has the background color \"salmon\".","code":["panel.background == new Color(250, 128, 114)"]},

        {"kind":"and","text":"The panel is no longer opaque (due to the edges exposing the parent background).","code":["!panel.isOpaque()"]},

        {"kind":"when","text":"We render the panel into a BufferedImage.","code":["var image = Utility.renderSingleComponent(panel)"]},

        {"kind":"then","text":"The rendered image of the panel is as expected.","code":["Utility.similarityBetween(image, \"components/rounded-panel.png\", 99.5) > 99.5"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Rendering a panel, styled to have round edges, will not be visible when it is flagged as non-opaque. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            When you use the Style API of SwingTree to make the edges of a panel, which\n            is not opaque, round, then the edges will not be visible.\n            This is because the standard behaviour of a component marked as non-opaque\n            is to not paint its background.\n            When styles are simple, SwingTree will honour this legacy behaviour.\n\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/rounded-non-opaque-panel.png\" alt=\"/snapshots/components/rounded-non-opaque-panel.png\" style=\"max-width: 50%;\" />\n\n            You may have nticed this big empty space to the right of this text.\n            This is actually an image of the panel we are rendering.\n            And what you see in this image is...\n            well, nothing. It is a fully transparent image.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)","SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var ui =","           UI.panel().withBackground(UI.color(\"navy\"))","           .peek( it -> it.setOpaque(false)) // We explicitly set the panel to be non-opaque.","           .withStyle( it -> it","               .borderRadius(42)","               .size(180, 120)","           )"]},

        {"kind":"and","text":"We build the panel:","code":["var panel = ui.get(JPanel)"]},

        {"kind":"and","text":"We expect that the panel has the background color \"navy\".","code":["panel.background == new Color(0, 0, 128)"]},

        {"kind":"and","text":"The panel is no longer opaque (due to the edges exposing the parent background).","code":["!panel.isOpaque()"]},

        {"kind":"when","text":"We render the panel into a BufferedImage.","code":["var image = Utility.renderSingleComponent(panel)"]},

        {"kind":"then","text":"The rendered image of the panel is as expected, a fully transparent image.","code":["Utility.similarityBetween(image, \"components/rounded-non-opaque-panel.png\", 99.95) > 99.95"]},

        {"kind":"when","text":"","code":["        when : \"\"\"","            We specify the background color of the panel through the style API instead of the UI API.","            Then things will look a little bit different.","            This is because we are now telling the SwingTree style engine of the panel","            to do the actual background rendering.","            ","            Doing so will still cause the panel to be non-opaque, but now the style engine","            will render the background of the panel (with the specified background color","            and rounded edges) into the image.","            ","            ${Utility.linkSnapshot('components/rounded-non-opaque-panel-with-background.png')}","","            Now let's reproduce this by creating a new","            UI declaration for a non opaque panel with rounded edges","            and the background color specified through the style API.","        \"\"\"","ui =","    UI.panel()","    .peek( it -> it.setOpaque(false) ) // We explicitly set the panel to be non-opaque.","    .withStyle( it -> it","        .borderRadius(42)","        .size(180, 120)","        .backgroundColor(\"navy\")","    )"]},

        {"kind":"and","text":"We build the panel and render it into a BufferedImage right away.","code":["panel = ui.get(JPanel)","image = Utility.renderSingleComponent(panel)"]},

        {"kind":"then","text":"The rendered image of the panel is now no longer fully transparent, it has a rounded blueish body:","code":["Utility.similarityBetween(image, \"components/rounded-non-opaque-panel-with-background.png\", 99.5) > 99.5"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Rendering a panel, styled to have round edges, will not be visible when it is flagged as non-opaque. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            When you use the Style API of SwingTree to make the edges of a panel, which\n            is not opaque, round, then the edges will not be visible.\n            This is because the standard behaviour of a component marked as non-opaque\n            is to not paint its background.\n            When styles are simple, SwingTree will honour this legacy behaviour.\n\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/rounded-non-opaque-panel.png\" alt=\"/snapshots/components/rounded-non-opaque-panel.png\" style=\"max-width: 50%;\" />\n\n            You may have nticed this big empty space to the right of this text.\n            This is actually an image of the panel we are rendering.\n            And what you see in this image is...\n            well, nothing. It is a fully transparent image.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)","SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var ui =","           UI.panel().withBackground(UI.color(\"navy\"))","           .peek( it -> it.setOpaque(false)) // We explicitly set the panel to be non-opaque.","           .withStyle( it -> it","               .borderRadius(42)","               .size(180, 120)","           )"]},

        {"kind":"and","text":"We build the panel:","code":["var panel = ui.get(JPanel)"]},

        {"kind":"and","text":"We expect that the panel has the background color \"navy\".","code":["panel.background == new Color(0, 0, 128)"]},

        {"kind":"and","text":"The panel is no longer opaque (due to the edges exposing the parent background).","code":["!panel.isOpaque()"]},

        {"kind":"when","text":"We render the panel into a BufferedImage.","code":["var image = Utility.renderSingleComponent(panel)"]},

        {"kind":"then","text":"The rendered image of the panel is as expected, a fully transparent image.","code":["Utility.similarityBetween(image, \"components/rounded-non-opaque-panel.png\", 99.95) > 99.95"]},

        {"kind":"when","text":"","code":["        when : \"\"\"","            We specify the background color of the panel through the style API instead of the UI API.","            Then things will look a little bit different.","            This is because we are now telling the SwingTree style engine of the panel","            to do the actual background rendering.","            ","            Doing so will still cause the panel to be non-opaque, but now the style engine","            will render the background of the panel (with the specified background color","            and rounded edges) into the image.","            ","            ${Utility.linkSnapshot('components/rounded-non-opaque-panel-with-background.png')}","","            Now let's reproduce this by creating a new","            UI declaration for a non opaque panel with rounded edges","            and the background color specified through the style API.","        \"\"\"","ui =","    UI.panel()","    .peek( it -> it.setOpaque(false) ) // We explicitly set the panel to be non-opaque.","    .withStyle( it -> it","        .borderRadius(42)","        .size(180, 120)","        .backgroundColor(\"navy\")","    )"]},

        {"kind":"and","text":"We build the panel and render it into a BufferedImage right away.","code":["panel = ui.get(JPanel)","image = Utility.renderSingleComponent(panel)"]},

        {"kind":"then","text":"The rendered image of the panel is now no longer fully transparent, it has a rounded blueish body:","code":["Utility.similarityBetween(image, \"components/rounded-non-opaque-panel-with-background.png\", 99.5) > 99.5"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Rendering a panel, styled to have round edges, will not be visible when it is flagged as non-opaque. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            When you use the Style API of SwingTree to make the edges of a panel, which\n            is not opaque, round, then the edges will not be visible.\n            This is because the standard behaviour of a component marked as non-opaque\n            is to not paint its background.\n            When styles are simple, SwingTree will honour this legacy behaviour.\n\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/rounded-non-opaque-panel.png\" alt=\"/snapshots/components/rounded-non-opaque-panel.png\" style=\"max-width: 50%;\" />\n\n            You may have nticed this big empty space to the right of this text.\n            This is actually an image of the panel we are rendering.\n            And what you see in this image is...\n            well, nothing. It is a fully transparent image.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)","SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var ui =","           UI.panel().withBackground(UI.color(\"navy\"))","           .peek( it -> it.setOpaque(false)) // We explicitly set the panel to be non-opaque.","           .withStyle( it -> it","               .borderRadius(42)","               .size(180, 120)","           )"]},

        {"kind":"and","text":"We build the panel:","code":["var panel = ui.get(JPanel)"]},

        {"kind":"and","text":"We expect that the panel has the background color \"navy\".","code":["panel.background == new Color(0, 0, 128)"]},

        {"kind":"and","text":"The panel is no longer opaque (due to the edges exposing the parent background).","code":["!panel.isOpaque()"]},

        {"kind":"when","text":"We render the panel into a BufferedImage.","code":["var image = Utility.renderSingleComponent(panel)"]},

        {"kind":"then","text":"The rendered image of the panel is as expected, a fully transparent image.","code":["Utility.similarityBetween(image, \"components/rounded-non-opaque-panel.png\", 99.95) > 99.95"]},

        {"kind":"when","text":"","code":["        when : \"\"\"","            We specify the background color of the panel through the style API instead of the UI API.","            Then things will look a little bit different.","            This is because we are now telling the SwingTree style engine of the panel","            to do the actual background rendering.","            ","            Doing so will still cause the panel to be non-opaque, but now the style engine","            will render the background of the panel (with the specified background color","            and rounded edges) into the image.","            ","            ${Utility.linkSnapshot('components/rounded-non-opaque-panel-with-background.png')}","","            Now let's reproduce this by creating a new","            UI declaration for a non opaque panel with rounded edges","            and the background color specified through the style API.","        \"\"\"","ui =","    UI.panel()","    .peek( it -> it.setOpaque(false) ) // We explicitly set the panel to be non-opaque.","    .withStyle( it -> it","        .borderRadius(42)","        .size(180, 120)","        .backgroundColor(\"navy\")","    )"]},

        {"kind":"and","text":"We build the panel and render it into a BufferedImage right away.","code":["panel = ui.get(JPanel)","image = Utility.renderSingleComponent(panel)"]},

        {"kind":"then","text":"The rendered image of the panel is now no longer fully transparent, it has a rounded blueish body:","code":["Utility.similarityBetween(image, \"components/rounded-non-opaque-panel-with-background.png\", 99.5) > 99.5"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The margins defined in the style API will be applied to the layout manager through the border insets. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Swing does not have a concept of margins.\n            Without a proper layout manager it does not even support the configuration of insets.\n            However, SwingTree fixes this\n            through a custom `Border` implementation and a default layout manager (`MigLayout`)\n            which models the margins (and paddings) of a component.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var panel =","            UI.panel()","            .withStyle( it -> it","                .marginRight(42)","                .marginLeft(64)","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"\n            Note that the insets of the border of the component now model the margins of the component.\n            This information is used by the layout manager to position the component correctly.\n        ","code":["panel.border.getBorderInsets(panel) == new Insets(0, 64 * uiScale, 0, 42 * uiScale)"]},

        {"kind":"and","text":"","code":["panel.layout != null","panel.layout instanceof MigLayout"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["3","2","1"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The margins defined in the style API will be applied to the layout manager through the border insets. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Swing does not have a concept of margins.\n            Without a proper layout manager it does not even support the configuration of insets.\n            However, SwingTree fixes this\n            through a custom `Border` implementation and a default layout manager (`MigLayout`)\n            which models the margins (and paddings) of a component.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var panel =","            UI.panel()","            .withStyle( it -> it","                .marginRight(42)","                .marginLeft(64)","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"\n            Note that the insets of the border of the component now model the margins of the component.\n            This information is used by the layout manager to position the component correctly.\n        ","code":["panel.border.getBorderInsets(panel) == new Insets(0, 64 * uiScale, 0, 42 * uiScale)"]},

        {"kind":"and","text":"","code":["panel.layout != null","panel.layout instanceof MigLayout"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["3","2","1"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The margins defined in the style API will be applied to the layout manager through the border insets. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Swing does not have a concept of margins.\n            Without a proper layout manager it does not even support the configuration of insets.\n            However, SwingTree fixes this\n            through a custom `Border` implementation and a default layout manager (`MigLayout`)\n            which models the margins (and paddings) of a component.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var panel =","            UI.panel()","            .withStyle( it -> it","                .marginRight(42)","                .marginLeft(64)","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"\n            Note that the insets of the border of the component now model the margins of the component.\n            This information is used by the layout manager to position the component correctly.\n        ","code":["panel.border.getBorderInsets(panel) == new Insets(0, 64 * uiScale, 0, 42 * uiScale)"]},

        {"kind":"and","text":"","code":["panel.layout != null","panel.layout instanceof MigLayout"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["3","2","1"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The insets of the layout manager are based on the sum of the margin and padding for a given edge of the component bounds. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Swing does not have a concept of padding and margin.\n            Without a proper layout manager it does not even support the configuration of insets.\n            However, through a custom `Border` implementation and a default layout manager (MigLayout)\n            we can model the padding and margin of a component\n            and also render a fancy border and shadow around it (if specified).\n            Internally the layout manager will indirectly know about the margins and paddings\n            of your component through the `Border::getBorderInsets(Component)` method.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var panel =","            UI.panel()","            .withStyle( it ->","                it.marginTop(11)","                  .marginRight(42)","                  .marginLeft(64)","                  .paddingRight(10)","                  .paddingLeft(20)","                  .paddingBottom(30)","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"","code":["panel.border.getBorderInsets(panel) == new Insets(11 * uiScale, 84 * uiScale, 30 * uiScale, 52 * uiScale)"]},

        {"kind":"and","text":"","code":["panel.layout != null","panel.layout instanceof MigLayout"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["3","2","1"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The insets of the layout manager are based on the sum of the margin and padding for a given edge of the component bounds. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Swing does not have a concept of padding and margin.\n            Without a proper layout manager it does not even support the configuration of insets.\n            However, through a custom `Border` implementation and a default layout manager (MigLayout)\n            we can model the padding and margin of a component\n            and also render a fancy border and shadow around it (if specified).\n            Internally the layout manager will indirectly know about the margins and paddings\n            of your component through the `Border::getBorderInsets(Component)` method.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var panel =","            UI.panel()","            .withStyle( it ->","                it.marginTop(11)","                  .marginRight(42)","                  .marginLeft(64)","                  .paddingRight(10)","                  .paddingLeft(20)","                  .paddingBottom(30)","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"","code":["panel.border.getBorderInsets(panel) == new Insets(11 * uiScale, 84 * uiScale, 30 * uiScale, 52 * uiScale)"]},

        {"kind":"and","text":"","code":["panel.layout != null","panel.layout instanceof MigLayout"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["3","2","1"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The insets of the layout manager are based on the sum of the margin and padding for a given edge of the component bounds. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Swing does not have a concept of padding and margin.\n            Without a proper layout manager it does not even support the configuration of insets.\n            However, through a custom `Border` implementation and a default layout manager (MigLayout)\n            we can model the padding and margin of a component\n            and also render a fancy border and shadow around it (if specified).\n            Internally the layout manager will indirectly know about the margins and paddings\n            of your component through the `Border::getBorderInsets(Component)` method.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var panel =","            UI.panel()","            .withStyle( it ->","                it.marginTop(11)","                  .marginRight(42)","                  .marginLeft(64)","                  .paddingRight(10)","                  .paddingLeft(20)","                  .paddingBottom(30)","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"","code":["panel.border.getBorderInsets(panel) == new Insets(11 * uiScale, 84 * uiScale, 30 * uiScale, 52 * uiScale)"]},

        {"kind":"and","text":"","code":["panel.layout != null","panel.layout instanceof MigLayout"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["3","2","1"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The Styling API will make sure that the layout manager accounts for the border width! [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A border is a very common feature of Swing components and when it comes to styling\n            your UI, elements should not overlap with the border.\n            This is why the style engine of a component \n            will make sure that the layout manager accounts for the border width\n            you have specified in your style.\n            Internally the layout manager will indirectly know about the margins and paddings\n            of your component through the `Border::getBorderInsets(Component)` method.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var panel =","            UI.panel()","            .withStyle( it ->","                it.marginTop(7)","                  .marginRight(2)","                  .paddingLeft(14)","                  .borderWidth(5)","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"\n            The insets of the border not only model the padding and margin of the component,\n            but also the border width.\n        ","code":["panel.border.getBorderInsets(panel) == new Insets(12 * uiScale, 19 * uiScale, 5 * uiScale, 7 * uiScale)"]},

        {"kind":"and","text":"We also expect there to be the mig layout manager by default.","code":["panel.layout != null","panel.layout instanceof MigLayout"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The Styling API will make sure that the layout manager accounts for the border width! [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A border is a very common feature of Swing components and when it comes to styling\n            your UI, elements should not overlap with the border.\n            This is why the style engine of a component \n            will make sure that the layout manager accounts for the border width\n            you have specified in your style.\n            Internally the layout manager will indirectly know about the margins and paddings\n            of your component through the `Border::getBorderInsets(Component)` method.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var panel =","            UI.panel()","            .withStyle( it ->","                it.marginTop(7)","                  .marginRight(2)","                  .paddingLeft(14)","                  .borderWidth(5)","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"\n            The insets of the border not only model the padding and margin of the component,\n            but also the border width.\n        ","code":["panel.border.getBorderInsets(panel) == new Insets(12 * uiScale, 19 * uiScale, 5 * uiScale, 7 * uiScale)"]},

        {"kind":"and","text":"We also expect there to be the mig layout manager by default.","code":["panel.layout != null","panel.layout instanceof MigLayout"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The Styling API will make sure that the layout manager accounts for the border width! [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A border is a very common feature of Swing components and when it comes to styling\n            your UI, elements should not overlap with the border.\n            This is why the style engine of a component \n            will make sure that the layout manager accounts for the border width\n            you have specified in your style.\n            Internally the layout manager will indirectly know about the margins and paddings\n            of your component through the `Border::getBorderInsets(Component)` method.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"We create a panel with some custom styling!","code":["var panel =","            UI.panel()","            .withStyle( it ->","                it.marginTop(7)","                  .marginRight(2)","                  .paddingLeft(14)","                  .borderWidth(5)","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"\n            The insets of the border not only model the padding and margin of the component,\n            but also the border width.\n        ","code":["panel.border.getBorderInsets(panel) == new Insets(12 * uiScale, 19 * uiScale, 5 * uiScale, 7 * uiScale)"]},

        {"kind":"and","text":"We also expect there to be the mig layout manager by default.","code":["panel.layout != null","panel.layout instanceof MigLayout"]},

        {"kind":"where","text":"\n            We use the following integer scaling factors simulating different high DPI scenarios.\n            Note that usually the UI is scaled by 1, 1.5 an 2 (for 4k screens for example).\n            A scaling factor of 3 is rather unusual, however it is possible to scale it by 3 nonetheless.\n        ","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"SwingTree will un-install any custom border if no styles are found.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            SwingTree will dynamically install or uninstall a custom border on a component\n            depending on whether or not there are any styles defined for the component.\n            Check out the following example:\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple `JLabel` UI component with a style animation.","code":["var doStyle = true","var ui = UI.label(\"Click me!\")","                .withStyle(style ->","                     doStyle ? style.border(3, new Color(230, 238, 220)) : style","                )"]},

        {"kind":"and","text":"We build the label:","code":["var label = ui.get(JLabel)"]},

        {"kind":"expect","text":"\n            There is now a custom border installed on the label.\n        ","code":["label.border != null"]},

        {"kind":"when","text":"We disable the style and simulate a repaint.","code":["doStyle = false","label.paint(new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB).createGraphics())"]},

        {"kind":"then","text":"\n            The custom border has been uninstalled.\n        ","code":["label.border == null"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"SwingTree will re-install any borders overridden by the style API.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            If you supply a border implementation yourself, SwingTree may override it with a custom border\n            if you define a style for the component.\n            However, if you disable the style, SwingTree will re-install the original border.\n            Smart, right?\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple `JLabel` UI component with a style animation.","code":["var doStyle = false","var ui = UI.label(\"Click me!\").withBorderTitled(\"Original border\")","                .withStyle(style ->","                     doStyle ? style.border(3, new Color(230, 238, 220)) : style","                )"]},

        {"kind":"and","text":"We build the label:","code":["var label = ui.get(JLabel)"]},

        {"kind":"expect","text":"\n            Initially there is a custom border installed on the label.\n        ","code":["label.border instanceof TitledBorder","label.border.title == \"Original border\""]},

        {"kind":"when","text":"We enable the style and simulate a repaint.","code":["doStyle = true","label.paint(new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB).createGraphics())"]},

        {"kind":"then","text":"\n            The custom border has been installed.\n        ","code":["label.border != null","!(label.border instanceof TitledBorder)"]},

        {"kind":"when","text":"We disable the style and simulate a repaint.","code":["doStyle = false","label.paint(new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB).createGraphics())"]},

        {"kind":"then","text":"\n            The original border has been re-installed.\n        ","code":["label.border instanceof TitledBorder","label.border.title == \"Original border\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"This is how you can create a rounded green label with a border at the bottom.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is how you can create a rounded green label with a border at the bottom.\n            It looks like this:\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/rounded-green-JLabel_2_.png\" alt=\"/snapshots/components/rounded-green-JLabel_2_.png\" style=\"max-width: 50%;\" />\n\n            It demonstrates how to style a JLabel with the style API.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a UI with a green label.","code":["var ui =","        UI.label(\"I am a green label\")","        .withStyle( it -> it","            .size(205, 60)","            .backgroundColor(new Color(40,200,70))","            .padding(4, 7, 4, 7)","            .border(0, 0, 3, 0, Color.BLACK)","            .borderRadius(13)","            .margin(12)","            .foregroundColor(Color.GREEN)","            .shadowColor(new Color(0,0,0,100))","            .shadowSpreadRadius(1)","            .shadowBlurRadius(2)","            .font(new Font(\"Arial\", Font.BOLD, 20))","        )"]},

        {"kind":"when","text":"We render the label into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.get(JLabel))"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/rounded-green-JLabel.png\", 98.4) > 98.4"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"This is how you can create a JPanel with a gradient border.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            It is really easy to create a `JPanel` (or any other component for that matter) \n            with custom border gradients. <br>\n            All you need to do is pass the style configuration to the style API.\n            SwingTree will dynamically install or uninstall a custom border on a component\n            depending on whether or not there are any style configurations defined for the component. \n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/shaded-border-JPanel.png\" alt=\"/snapshots/components/shaded-border-JPanel.png\" style=\"max-width: 50%;\" />\n\n            Note that in this example we make the border extra wide so \n            that you can see the difference.\n\n            Also note that we add a little shadow just to make it look a little bit more fancy.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to the style API f a `JPanel`:","code":["var ui =","        UI.panel()","        .withStyle( it -> it","            .size(205, 205)","            .backgroundColor(new Color(40,180,240))","            .foundationColor(new Color(200,200,240))","            .padding(30)","            .margin(22)","            .border(15, Color.CYAN)","            .gradient(UI.Layer.BORDER, \"border gradient\", s -> s","                .span(UI.Span.BOTTOM_RIGHT_TO_TOP_LEFT)","                .colors(Color.YELLOW, new Color(255,255,255,0))","                .clipTo(UI.ComponentArea.BORDER)","            )","            .shadowColor(new Color(0,0,0,100))","            .shadowSpreadRadius(1)","            .shadowBlurRadius(2)","            .font(new Font(\"Arial\", Font.BOLD, 20))","        )"]},

        {"kind":"when","text":"We then render the panel into a BufferedImage...","code":["var image = Utility.renderSingleComponent(ui.get(JPanel))"]},

        {"kind":"then","text":"The image is rendered as expected (compare with the snapshot above).","code":["Utility.similarityBetween(image, \"components/shaded-border-JPanel.png\", 99.95) > 99.95"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can style a toggle button to have a custom selection shading.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can style a toggle button to have a custom selection shading.\n            Please note that this will actually override some parts of the original \n            look and feel of the button simply because SwingTree needs to cut some\n            corners to install custom styles for you. <br>\n            So in this example you may notice that the regular Metal Lool and Feel\n            is replaced by the our shading.\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/shaded-JToggleButton_1_.png\" alt=\"/snapshots/components/shaded-JToggleButton_1_.png\" style=\"max-width: 50%;\" />\n            And when toggled it would like this:\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/selection-shaded-JToggleButton_1_.png\" alt=\"/snapshots/components/selection-shaded-JToggleButton_1_.png\" style=\"max-width: 50%;\" />\n\n            Note that this example very nicely demonstrates how the style of a JToggleButton \n            will update immediately depending on component changes.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a toggle button with some shading gradients.","code":["var ui =","        UI.toggleButton(\"I am a toggle button\")","        .withStyle( it -> it","            .size(205, 60)","            .gradient(shade -> shade","               .span(UI.Span.TOP_LEFT_TO_BOTTOM_RIGHT)","               .colors(","                   it.component().getModel().isSelected()","                       ? new Color[]{ Color.YELLOW, Color.CYAN   }","                       : new Color[]{ Color.CYAN,   Color.ORANGE }","               )","            )","        )"]},

        {"kind":"and","text":"We build the toggle button:","code":["var button = ui.get(JToggleButton)"]},

        {"kind":"when","text":"We render the toggle button into a BufferedImage.","code":["var image1 = Utility.renderSingleComponent(button)","button.setSelected(true)","var image2 = Utility.renderSingleComponent(button)"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image1, \"components/shaded-JToggleButton.png\", 99.7) > 99.7","Utility.similarityBetween(image2, \"components/selection-shaded-JToggleButton.png\", 99.7) > 99.7"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A text area background can be shaded from left to right with any number of colors.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A component can be shaded from left to right with any number of colors.\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/left-to-right-shaded-JTextArea_1_.png\" alt=\"/snapshots/components/left-to-right-shaded-JTextArea_1_.png\" style=\"max-width: 50%;\" />\n\n            In this example we are painting a rainbow shading effect.\n            This kind of shading looks really nice on text areas.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A text area UI with a custom styler lambda.","code":["var ui =","        UI.textArea(\"\"\"Ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\"\"\")","        .peek( it -> it.setLineWrap(true) )","        .withStyle( it -> it","            .size(200, 240)","            .fontBold(true)","            .border(2, Color.DARK_GRAY)","            .backgroundColor(Color.CYAN)","            .padding(12)","            .margin(6)","            .gradient(UI.Layer.BACKGROUND, shade -> shade","               .span(UI.Span.LEFT_TO_RIGHT)","               .colors(","                  new Color(255,0,0,64),","                  new Color(0,255,0,64),","                  new Color(0,0,255,64),","                  new Color(255,255,0,64),","                  new Color(255,0,255,64),","                  new Color(0,255,255,64)","               )","            )","        )"]},

        {"kind":"and","text":"We build the text area:","code":["var textArea = ui.get(JTextArea)"]},

        {"kind":"when","text":"We render the text area into a BufferedImage.","code":["var image = Utility.renderSingleComponent(textArea)"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/left-to-right-shaded-JTextArea.png\", 97.5) > 97.5"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Make a text area look like it is sunken in the background using a shadow going inwards.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Make a text area look like it is sunken in the background using a shadow going inwards.\n            We achieve this by configuring the default shadow (with the name \"default\").\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/sunken-JTextArea.png\" alt=\"/snapshots/components/sunken-JTextArea.png\" style=\"max-width: 50%;\" />\n\n            This kind of shadow effect looks really nice on text areas.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A text area UI with a custom styler lambda.","code":["var ui =","        UI.textArea(\"\"\"Ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\"\"\")","        .peek( it -> it.setLineWrap(true) )","        .withStyle( it -> it","            .size(240, 200)","            .backgroundColor(new Color(120,255,240))","            .foundationColor(new Color(50,100,200))","            .margin(12)","            .padding(6, 7, 6, 7)","            .borderRadius(16)","            .foregroundColor(Color.DARK_GRAY)","            .shadowColor(new Color(0,0,0))","            .shadowBlurRadius(4)","            .shadowIsInset(true)","            .font(new Font(\"Dancing Script\", Font.PLAIN, 20))","        )"]},

        {"kind":"when","text":"We render the text area into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.get(JTextArea))"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/sunken-JTextArea.png\", 98.8) > 98.8"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Create a soft UI slider that sinks into the background if you wish.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Specifying multiple (named) shadows, allows you to create soft UI,\n            like for example a slider that sinks into the background. <br>\n            The reason why we use named shadows is because we don't want to override\n            the default shadow of the slider, but rather add a new one. <br>\n\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/soft-JSlider.png\" alt=\"/snapshots/components/soft-JSlider.png\" style=\"max-width: 50%;\" />\n\n            The concept of naming exists to make any number of sub-styles possible.\n            This concept of sub-styles is not exclusive to shadows.\n            You can also name gradients and custom foreground or background painters.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"Before we create the styled slider, we first setup up FlatLaF as a basis.","code":["FlatLightLaf.setup()"]},

        {"kind":"and","text":"Now a slider UI with a custom styler lambda.","code":["var ui =","        UI.slider(UI.Align.HORIZONTAL, 0, 100, 50)","        .withStyle( it -> it","            .size(280, 38)","            .prefSize(280, 38)","            .borderRadius(20)","            .backgroundColor(new Color(0.4f, 0.85f, 1))","            .foundationColor(new Color(0.4f, 0.85f, 1))","            .shadow(UI.Layer.BACKGROUND,\"bright\", s -> s","                .color(new Color(0.7f, 0.95f, 1f, 0.35f))","                .offset(-11)","            )","            .shadow(UI.Layer.BACKGROUND,\"dark\", s -> s","                .color(new Color(0, 0.1f, 0.2f, 0.20f))","                .offset(+4)","            )","            .shadowBlurRadius(4)","            .shadowSpreadRadius(-2)","            .shadowIsInset(true)","            .padding(6)","            .margin(10)","        )"]},

        {"kind":"when","text":"We render the slider into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.get(JSlider))"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/soft-JSlider.png\", 99.8) > 99.8"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Create a soft progress bar that looks like it is raised from the background.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Specifying multiple (named) shadows, allows you to create soft UI,\n            like for example a progress bar that looks raised from the background. <br>\n            The reason why we use named shadows is because we don't want to override\n            the default shadow of the slider, but rather add a new one. <br>\n\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/soft-raised-JProgressBar.png\" alt=\"/snapshots/components/soft-raised-JProgressBar.png\" style=\"max-width: 50%;\" />\n\n            The concept of naming exists to make any number of sub-styles possible.\n            This concept of sub-styles is not exclusive to shadows.\n            You can also name gradients and custom foreground or background painters.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"Before we create the styled slider, we first setup up FlatLaF as a basis.","code":["FlatLightLaf.setup()"]},

        {"kind":"and","text":"Now a progress bar UI with a custom styler lambda.","code":["var ui =","        UI.progressBar(UI.Align.HORIZONTAL, 0, 100, 38)","        .peek(it->{it.setString(\"%\"); it.setStringPainted(true);})","        .withStyle( it -> it","            .borderRadius(13)","            .backgroundColor(new Color(0.3f, 0.9f, 0.95f))","            .foundationColor(new Color(0.3f, 0.8f, 0.9f))","            .shadow(\"bright\", s -> s","                .color(new Color(1f, 1f, 1f, 0.3f))","                .offset(-11)","            )","            .shadow(\"dark\", s -> s","                .color(new Color(0, 0f, 0f, 0.15f))","                .offset(+6)","            )","            .shadowBlurRadius(13)","            .shadowSpreadRadius(-5)","            .shadowIsInset(false)","            .padding(0)","            .margin(10)","            .size(230, 30)","        )"]},

        {"kind":"when","text":"We render the bar into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.get(JProgressBar))"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/soft-raised-JProgressBar.png\", 99.8) > 99.8"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The look of a component, like a button for example, will be preserved if possible, when doing custom styling.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            In order to make it possible for SwingTree to apply the styles you specify,\n            it will have to override some parts of the original look and feel of the component.\n            However, SwingTree will try to preserve as much of the original look and feel as possible. <br>\n            So for example, if you specify simple style attributes like padding, margin or border radius,\n            the component will still look like a regular button, \n            but with the specified padding, margin or border radius. <br>\n\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/rounded-metal-JButton_2_.png\" alt=\"/snapshots/components/rounded-metal-JButton_2_.png\" style=\"max-width: 50%;\" />\n\n            In this example we have a button with a custom style that specifies a border radius of 20 pixels\n            as well as a little bit of padding and margin. <br>\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A button UI with a custom styler lambda.","code":["var ui =","        UI.button(\"I am a button\")","        .withStyle( it -> it","            .size(200, 60)","            .border(1, Color.BLACK)","            .borderRadius(20)","            .padding(6)","            .margin(10)","        )"]},

        {"kind":"when","text":"We render the button into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.get(JButton))"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/rounded-metal-JButton.png\", 99.8) > 99.8"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Turn a panel into a card like looking panel by giving it a round border, background color and some margins.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            If you want certain content to be grouped and highlighted by a custom background color\n            and a rounded border so that it looks like a card, you can do that\n            very easily in a `Styler` lambda. <br>\n            Here you can see an example of a panel with a black border of 3 pixels,\n            a margin of 10 pixels and a border radius of 36 pixels. <br>\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/banner-JPanel.png\" alt=\"/snapshots/components/banner-JPanel.png\" style=\"max-width: 50%;\" />\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A panel UI with a custom styler lambda.","code":["var ui =","        UI.panel()","        .withStyle( it -> it","            .size(160, 120)","            .border(3, Color.BLACK)","            .borderRadius(36)","            .backgroundColor(Color.CYAN)","            .padding(6)","            .margin(10)","        )"]},

        {"kind":"when","text":"We render the panel into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.get(JPanel))"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/banner-JPanel.png\", 99) > 99"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Adjust how text is styled through the API exposed in your `Styler` lambdas",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                The `Styler` lambda exposes a lot of API to adjust how text is styled. <br>\n                More specifically, you can adjust the style of the font, e.g. the font family, size and, well, style. <br>\n                <br>\n                Here you can see an example of a text area with a custom font family, size and style. <br>\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/custom-font-JTextArea_2_.png\" alt=\"/snapshots/components/custom-font-JTextArea_2_.png\" style=\"max-width: 50%;\" />\n            "]
      },
      "blocks":[
        {"kind":"given","text":"A text area UI with a custom styler lambda.","code":["var ui =","        UI.textArea(\"I am a text area, \\nhow are you today :) ?\")","        .peek( it -> it.setLineWrap(true) )","        .withStyle( it -> it","            .size(185, 60)","            .font(\"Buggie\", 13)","            .fontBold(true)","            .fontItalic(true)","            .fontColor(\"#FF0000\") // Red","            .fontSpacing(0.054)","        )"]},

        {"kind":"when","text":"We render the text area into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.get(JTextArea))"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/custom-font-JTextArea.png\", 95) > 95"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Configure the background, foreground and selection color of a text field through the API exposed in your `Styler` lambdas",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                The `Styler` lambda exposes a lot of API to adjust how text of a text field (or other components) is styled. <br>\n                This includes the background, foreground and selection color. <br>\n                <br>\n                Here you can see an example of a text field with a custom background, foreground and selection color. <br>\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/custom-colorful-font-JTextField.png\" alt=\"/snapshots/components/custom-colorful-font-JTextField.png\" style=\"max-width: 50%;\" />\n            "]
      },
      "blocks":[
        {"kind":"given","text":"A text field UI with a custom styler lambda.","code":["var ui =","        UI.textField(\"When you select me, I will turn blue!\")","        .withStyle( it -> it","            .size(300, 45)","            .font(\"Buggie\", 13)","            .fontColor(Color.DARK_GRAY)","            .fontSelectionColor(Color.BLUE)","            .backgroundColor(Color.ORANGE)","            .fontBold(false)","            .fontItalic(false)","            .fontSpacing(0.05)","        )"]},

        {"kind":"when","text":"We unpack the text field.","code":["var textField = ui.get(JTextField)"]},

        {"kind":"then","text":"The selection color is blue.","code":["textField.selectionColor == Color.BLUE"]},

        {"kind":"when","text":"Then we render the text field into a BufferedImage.","code":["var image = Utility.renderSingleComponent(textField)"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/custom-colorful-font-JTextField.png\", 99.2) > 99.2"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"For full styling freedom, we can add custom painters to a component on various layers. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            If you want to have full control over how a component is painted,\n            you can add custom painters to a component on various layers. <br>\n            <br>\n            Here you can see an example of a panel with a custom painter on the background layer. <br>\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/custom-painter-JLabel.png\" alt=\"/snapshots/components/custom-painter-JLabel.png\" style=\"max-width: 50%;\" />\n\n            This little example demonstrates very nicely how the painters are layered on top of each other\n            and at which layer the text of the component is painted over by your custom painters.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"A label UI with a custom styler lambda.","code":["var ui =","        UI.label(\"I am a label\")","        .withStyle( it -> it","            .fontSize(12)","            .size(120, 50)","            .padding(6)","            .margin(10)","            .painter(UI.Layer.BACKGROUND, g -> {","                g.setColor(Color.RED);","                g.fill(UI.scale(new RoundRectangle2D.Double(10,15,20,20,5,5)));","            })","            .painter(UI.Layer.CONTENT, g -> {","                g.setColor(Color.ORANGE);","                g.fill(UI.scale(new RoundRectangle2D.Double(25,15,20,20,5,5)));","            })","            .painter(UI.Layer.BORDER, g -> {","                g.setColor(Color.BLUE);","                g.fill(UI.scale(new RoundRectangle2D.Double(40,15,20,20,5,5)));","            })","            .painter(UI.Layer.FOREGROUND, g -> {","                g.setColor(Color.MAGENTA);","                g.fill(UI.scale(new RoundRectangle2D.Double(55,15,20,20,5,5)));","            })","        )"]},

        {"kind":"when","text":"We render the label into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.get(JLabel))"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/custom-painter-JLabel.png\", 99.5) > 99.5"]},

        {"kind":"where","text":"","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"For full styling freedom, we can add custom painters to a component on various layers. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            If you want to have full control over how a component is painted,\n            you can add custom painters to a component on various layers. <br>\n            <br>\n            Here you can see an example of a panel with a custom painter on the background layer. <br>\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/custom-painter-JLabel.png\" alt=\"/snapshots/components/custom-painter-JLabel.png\" style=\"max-width: 50%;\" />\n\n            This little example demonstrates very nicely how the painters are layered on top of each other\n            and at which layer the text of the component is painted over by your custom painters.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"A label UI with a custom styler lambda.","code":["var ui =","        UI.label(\"I am a label\")","        .withStyle( it -> it","            .fontSize(12)","            .size(120, 50)","            .padding(6)","            .margin(10)","            .painter(UI.Layer.BACKGROUND, g -> {","                g.setColor(Color.RED);","                g.fill(UI.scale(new RoundRectangle2D.Double(10,15,20,20,5,5)));","            })","            .painter(UI.Layer.CONTENT, g -> {","                g.setColor(Color.ORANGE);","                g.fill(UI.scale(new RoundRectangle2D.Double(25,15,20,20,5,5)));","            })","            .painter(UI.Layer.BORDER, g -> {","                g.setColor(Color.BLUE);","                g.fill(UI.scale(new RoundRectangle2D.Double(40,15,20,20,5,5)));","            })","            .painter(UI.Layer.FOREGROUND, g -> {","                g.setColor(Color.MAGENTA);","                g.fill(UI.scale(new RoundRectangle2D.Double(55,15,20,20,5,5)));","            })","        )"]},

        {"kind":"when","text":"We render the label into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.get(JLabel))"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/custom-painter-JLabel.png\", 99.5) > 99.5"]},

        {"kind":"where","text":"","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"For full styling freedom, we can add custom painters to a component on various layers. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            If you want to have full control over how a component is painted,\n            you can add custom painters to a component on various layers. <br>\n            <br>\n            Here you can see an example of a panel with a custom painter on the background layer. <br>\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/custom-painter-JLabel.png\" alt=\"/snapshots/components/custom-painter-JLabel.png\" style=\"max-width: 50%;\" />\n\n            This little example demonstrates very nicely how the painters are layered on top of each other\n            and at which layer the text of the component is painted over by your custom painters.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"A label UI with a custom styler lambda.","code":["var ui =","        UI.label(\"I am a label\")","        .withStyle( it -> it","            .fontSize(12)","            .size(120, 50)","            .padding(6)","            .margin(10)","            .painter(UI.Layer.BACKGROUND, g -> {","                g.setColor(Color.RED);","                g.fill(UI.scale(new RoundRectangle2D.Double(10,15,20,20,5,5)));","            })","            .painter(UI.Layer.CONTENT, g -> {","                g.setColor(Color.ORANGE);","                g.fill(UI.scale(new RoundRectangle2D.Double(25,15,20,20,5,5)));","            })","            .painter(UI.Layer.BORDER, g -> {","                g.setColor(Color.BLUE);","                g.fill(UI.scale(new RoundRectangle2D.Double(40,15,20,20,5,5)));","            })","            .painter(UI.Layer.FOREGROUND, g -> {","                g.setColor(Color.MAGENTA);","                g.fill(UI.scale(new RoundRectangle2D.Double(55,15,20,20,5,5)));","            })","        )"]},

        {"kind":"when","text":"We render the label into a BufferedImage.","code":["var image = Utility.renderSingleComponent(ui.get(JLabel))"]},

        {"kind":"then","text":"The image is as expected.","code":["Utility.similarityBetween(image, \"components/custom-painter-JLabel.png\", 99.5) > 99.5"]},

        {"kind":"where","text":"","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The cursor of any component can be configured through the style API. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The cursor of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the cursor in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.cursor(cursor) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified cursor!","code":["comp.cursor == cursor.toAWTCursor()"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JBox()","new JSlider()","new JSpinner()"],"cursor":["UI.Cursor.HAND","UI.Cursor.CROSS","UI.Cursor.DEFAULT","UI.Cursor.RESIZE_EAST","UI.Cursor.RESIZE_NORTH","UI.Cursor.RESIZE_NORTH_EAST"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The cursor of any component can be configured through the style API. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The cursor of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the cursor in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.cursor(cursor) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified cursor!","code":["comp.cursor == cursor.toAWTCursor()"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JBox()","new JSlider()","new JSpinner()"],"cursor":["UI.Cursor.HAND","UI.Cursor.CROSS","UI.Cursor.DEFAULT","UI.Cursor.RESIZE_EAST","UI.Cursor.RESIZE_NORTH","UI.Cursor.RESIZE_NORTH_EAST"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The cursor of any component can be configured through the style API. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The cursor of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the cursor in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.cursor(cursor) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified cursor!","code":["comp.cursor == cursor.toAWTCursor()"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JBox()","new JSlider()","new JSpinner()"],"cursor":["UI.Cursor.HAND","UI.Cursor.CROSS","UI.Cursor.DEFAULT","UI.Cursor.RESIZE_EAST","UI.Cursor.RESIZE_NORTH","UI.Cursor.RESIZE_NORTH_EAST"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The cursor of any component can be configured through the style API. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The cursor of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the cursor in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.cursor(cursor) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified cursor!","code":["comp.cursor == cursor.toAWTCursor()"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JBox()","new JSlider()","new JSpinner()"],"cursor":["UI.Cursor.HAND","UI.Cursor.CROSS","UI.Cursor.DEFAULT","UI.Cursor.RESIZE_EAST","UI.Cursor.RESIZE_NORTH","UI.Cursor.RESIZE_NORTH_EAST"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The cursor of any component can be configured through the style API. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The cursor of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the cursor in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.cursor(cursor) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified cursor!","code":["comp.cursor == cursor.toAWTCursor()"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JBox()","new JSlider()","new JSpinner()"],"cursor":["UI.Cursor.HAND","UI.Cursor.CROSS","UI.Cursor.DEFAULT","UI.Cursor.RESIZE_EAST","UI.Cursor.RESIZE_NORTH","UI.Cursor.RESIZE_NORTH_EAST"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The cursor of any component can be configured through the style API. [5]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The cursor of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the cursor in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.cursor(cursor) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified cursor!","code":["comp.cursor == cursor.toAWTCursor()"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JBox()","new JSlider()","new JSpinner()"],"cursor":["UI.Cursor.HAND","UI.Cursor.CROSS","UI.Cursor.DEFAULT","UI.Cursor.RESIZE_EAST","UI.Cursor.RESIZE_NORTH","UI.Cursor.RESIZE_NORTH_EAST"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [5]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [6]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [7]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [8]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [9]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [10]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [11]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [12]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [13]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [14]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [15]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [16]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of any component can be configured through the style API. [17]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The background color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the background color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.backgroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified background color!","code":["comp.background == expected"]},

        {"kind":"where","text":"\n            We are using a set of raw Swing components as well as SwingTree native components\n            together with a variety of colors.\n\n            Note that some of the linea looks very strange, \n            they expect the component to return a fully transparent background\n            color, after a normal color was specified in the style API.\n            But this is not an error, it is completely intentionally by design!\n\n            So as you may have noticed, \n            the SwingTree native components all report the \"wrong\" color.\n\n            To understand what is going on here, you have to know that when a component is\n            flagged to be opaque, then every Swing look and feel will, before painting\n            anything else, first fill out the entire background of the component with\n            the background color of the component.\n            It does this to ensure that rendering artefacts from the parent\n            are overridden.\n\n            Now this is a problem when you have the background layer of your SwingTree component\n            styled using various things like gradients, shadows, images, etc.\n            This is because SwingTree cannot hijack the internals of the ComponentUI,\n            it can however do some painting before the ComponentUI\n            through an overridden `paint(Graphics2D)` method!\n\n            Now, we could simply set the opaque flag to false to prevent the ComponentUI\n            from filling the component bounds,\n            but then we would lose the\n            performance benefits of having the opaque flag set to true (avoiding the\n            traversal repaint of parent components, and their parent components, etc).\n\n            The style configuration of this particular component\n            leads to an opaque panel, and we also have the ability to render\n            the background of the component ourselves due to the\n            component being a SwingTree component (it has the paint method overridden).\n\n            So what we do here is we set the background color of the component to\n            UI.Color.UNDEFINED, which is a special color that is actually fully transparent.\n\n            This way, when the Swing look and feel tries to paint the background of the\n            component, it will actually paint nothing, and we can do the background\n            painting ourselves in the paint method of the component.\n\n        ","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JSpinner()","new JPanel()","new JSlider()","new JProgressBar()","new JTabbedPane()","new UI.Button()","new UI.TextArea()","new UI.TextField()","new UI.Panel()","new JBox()","new JSplitButton()","new UI.Spinner()","new UI.Slider()","new UI.ProgressBar()","new UI.TabbedPane()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.ORANGE","Color.WHITE","Color.MAGENTA","Color.CYAN","Color.ORANGE","Color.BLACK"],"expected":["Color.RED","Color.GREEN","Color.BLUE","Color.MAGENTA","Color.YELLOW","Color.CYAN","Color.ORANGE","Color.BLACK","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","new Color(0,0,0,0)","Color.CYAN","Color.ORANGE","Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The foreground color of any component can be configured through the style API. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The foreground color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the foreground color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.foregroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified foreground color!","code":["comp.foreground == color"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JBox()","new JSlider()","new JSpinner()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.CYAN","Color.MAGENTA"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The foreground color of any component can be configured through the style API. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The foreground color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the foreground color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.foregroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified foreground color!","code":["comp.foreground == color"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JBox()","new JSlider()","new JSpinner()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.CYAN","Color.MAGENTA"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The foreground color of any component can be configured through the style API. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The foreground color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the foreground color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.foregroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified foreground color!","code":["comp.foreground == color"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JBox()","new JSlider()","new JSpinner()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.CYAN","Color.MAGENTA"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The foreground color of any component can be configured through the style API. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The foreground color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the foreground color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.foregroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified foreground color!","code":["comp.foreground == color"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JBox()","new JSlider()","new JSpinner()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.CYAN","Color.MAGENTA"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The foreground color of any component can be configured through the style API. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The foreground color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the foreground color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.foregroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified foreground color!","code":["comp.foreground == color"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JBox()","new JSlider()","new JSpinner()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.CYAN","Color.MAGENTA"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The foreground color of any component can be configured through the style API. [5]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The foreground color of any component can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the foreground color in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.foregroundColor(color) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified foreground color!","code":["comp.foreground == color"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextArea()","new JTextField()","new JBox()","new JSlider()","new JSpinner()"],"color":["Color.RED","Color.GREEN","Color.BLUE","Color.YELLOW","Color.CYAN","Color.MAGENTA"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The horizontal text alignment of many text based components can be configured through the style API. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The horizontal text alignment of many text based components can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the horizontal text alignment in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.fontAlignment(alignment) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified horizontal text alignment!","code":["comp.horizontalAlignment == alignment.forSwing().get()"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextField()","new JPasswordField()","new JMenuItem()","new JCheckBoxMenuItem()"],"alignment":["UI.HorizontalAlignment.LEFT","UI.HorizontalAlignment.RIGHT","UI.HorizontalAlignment.CENTER","UI.HorizontalAlignment.LEADING","UI.HorizontalAlignment.TRAILING"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The horizontal text alignment of many text based components can be configured through the style API. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The horizontal text alignment of many text based components can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the horizontal text alignment in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.fontAlignment(alignment) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified horizontal text alignment!","code":["comp.horizontalAlignment == alignment.forSwing().get()"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextField()","new JPasswordField()","new JMenuItem()","new JCheckBoxMenuItem()"],"alignment":["UI.HorizontalAlignment.LEFT","UI.HorizontalAlignment.RIGHT","UI.HorizontalAlignment.CENTER","UI.HorizontalAlignment.LEADING","UI.HorizontalAlignment.TRAILING"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The horizontal text alignment of many text based components can be configured through the style API. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The horizontal text alignment of many text based components can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the horizontal text alignment in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.fontAlignment(alignment) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified horizontal text alignment!","code":["comp.horizontalAlignment == alignment.forSwing().get()"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextField()","new JPasswordField()","new JMenuItem()","new JCheckBoxMenuItem()"],"alignment":["UI.HorizontalAlignment.LEFT","UI.HorizontalAlignment.RIGHT","UI.HorizontalAlignment.CENTER","UI.HorizontalAlignment.LEADING","UI.HorizontalAlignment.TRAILING"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The horizontal text alignment of many text based components can be configured through the style API. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The horizontal text alignment of many text based components can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the horizontal text alignment in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.fontAlignment(alignment) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified horizontal text alignment!","code":["comp.horizontalAlignment == alignment.forSwing().get()"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextField()","new JPasswordField()","new JMenuItem()","new JCheckBoxMenuItem()"],"alignment":["UI.HorizontalAlignment.LEFT","UI.HorizontalAlignment.RIGHT","UI.HorizontalAlignment.CENTER","UI.HorizontalAlignment.LEADING","UI.HorizontalAlignment.TRAILING"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The horizontal text alignment of many text based components can be configured through the style API. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The horizontal text alignment of many text based components can be configured through the style API\n            exposed by the `withStyle` method. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a SwingTree builder node using the `of`method and apply the horizontal text alignment in the style API.","code":["var ui = UI.of(component).withStyle( it -> it.fontAlignment(alignment) )"]},

        {"kind":"and","text":"We build the component:","code":["var comp = ui.get(JComponent)"]},

        {"kind":"expect","text":"The component indeed has the specified horizontal text alignment!","code":["comp.horizontalAlignment == alignment.forSwing().get()"]},

        {"kind":"where","text":"","code":{"component":["new JButton()","new JTextField()","new JPasswordField()","new JMenuItem()","new JCheckBoxMenuItem()"],"alignment":["UI.HorizontalAlignment.LEFT","UI.HorizontalAlignment.RIGHT","UI.HorizontalAlignment.CENTER","UI.HorizontalAlignment.LEADING","UI.HorizontalAlignment.TRAILING"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Paint images as component backgrounds using the style API. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the grounding of a component, which\n                is a sort of background for every style layer.\n                <br>\n                Here you can see an example of multipl labels with different grounding styles. <br>\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/image-panels-collage.png\" alt=\"/snapshots/components/image-panels-collage.png\" style=\"max-width: 50%;\" />\n\n                They are all stitched together into a collage so that you can see them \n                all at once and compare them with each other.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of labels:","code":["var img = Utility.loadImage(\"img/swing.png\")","var ui1 =","            UI.label(\"Top Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.TOP_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui2 =","             UI.label(\"Top Right\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.GREEN)","                 .size(120, 120)","                 .image(ground -> ground","                     .image(img)","                     .size(60, 60)","                     .placement(UI.Placement.TOP_RIGHT)","                     .opacity(0.5f)","                     .primer(new Color(100,200,230, 100))","                 )","             )","var ui3 =","            UI.label(\"Bottom Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui4 =","            UI.label(\"Bottom Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM_RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui5 =","            UI.label(\"Center\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui6 =","            UI.label(\"Top\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.TOP)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui7 =","            UI.label(\"Bottom\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui8 =","            UI.label(\"Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui9 =","            UI.label(\"Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui10 =","            UI.label(\"Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img).autoFit(true)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui11 =","            UI.label(\"Only Color\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .primer(new Color(200,240,230, 200))","                )","            )","var ui12 =","            UI.label(\"Only Image\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                )","            )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/image-panels-collage.png\", 99) > 99"]},

        {"kind":"where","text":"We test this using the following UI scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Paint images as component backgrounds using the style API. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the grounding of a component, which\n                is a sort of background for every style layer.\n                <br>\n                Here you can see an example of multipl labels with different grounding styles. <br>\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/image-panels-collage.png\" alt=\"/snapshots/components/image-panels-collage.png\" style=\"max-width: 50%;\" />\n\n                They are all stitched together into a collage so that you can see them \n                all at once and compare them with each other.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of labels:","code":["var img = Utility.loadImage(\"img/swing.png\")","var ui1 =","            UI.label(\"Top Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.TOP_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui2 =","             UI.label(\"Top Right\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.GREEN)","                 .size(120, 120)","                 .image(ground -> ground","                     .image(img)","                     .size(60, 60)","                     .placement(UI.Placement.TOP_RIGHT)","                     .opacity(0.5f)","                     .primer(new Color(100,200,230, 100))","                 )","             )","var ui3 =","            UI.label(\"Bottom Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui4 =","            UI.label(\"Bottom Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM_RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui5 =","            UI.label(\"Center\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui6 =","            UI.label(\"Top\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.TOP)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui7 =","            UI.label(\"Bottom\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui8 =","            UI.label(\"Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui9 =","            UI.label(\"Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui10 =","            UI.label(\"Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img).autoFit(true)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui11 =","            UI.label(\"Only Color\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .primer(new Color(200,240,230, 200))","                )","            )","var ui12 =","            UI.label(\"Only Image\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                )","            )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/image-panels-collage.png\", 99) > 99"]},

        {"kind":"where","text":"We test this using the following UI scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Paint images as component backgrounds using the style API. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the grounding of a component, which\n                is a sort of background for every style layer.\n                <br>\n                Here you can see an example of multipl labels with different grounding styles. <br>\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/image-panels-collage.png\" alt=\"/snapshots/components/image-panels-collage.png\" style=\"max-width: 50%;\" />\n\n                They are all stitched together into a collage so that you can see them \n                all at once and compare them with each other.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of labels:","code":["var img = Utility.loadImage(\"img/swing.png\")","var ui1 =","            UI.label(\"Top Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.TOP_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui2 =","             UI.label(\"Top Right\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.GREEN)","                 .size(120, 120)","                 .image(ground -> ground","                     .image(img)","                     .size(60, 60)","                     .placement(UI.Placement.TOP_RIGHT)","                     .opacity(0.5f)","                     .primer(new Color(100,200,230, 100))","                 )","             )","var ui3 =","            UI.label(\"Bottom Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui4 =","            UI.label(\"Bottom Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM_RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui5 =","            UI.label(\"Center\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui6 =","            UI.label(\"Top\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.TOP)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui7 =","            UI.label(\"Bottom\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui8 =","            UI.label(\"Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui9 =","            UI.label(\"Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui10 =","            UI.label(\"Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img).autoFit(true)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui11 =","            UI.label(\"Only Color\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .primer(new Color(200,240,230, 200))","                )","            )","var ui12 =","            UI.label(\"Only Image\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                )","            )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/image-panels-collage.png\", 99) > 99"]},

        {"kind":"where","text":"We test this using the following UI scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Paint images as component backgrounds using the style API. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the grounding of a component, which\n                is a sort of background for every style layer.\n                <br>\n                Here you can see an example of multipl labels with different grounding styles. <br>\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/image-panels-collage.png\" alt=\"/snapshots/components/image-panels-collage.png\" style=\"max-width: 50%;\" />\n\n                They are all stitched together into a collage so that you can see them \n                all at once and compare them with each other.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of labels:","code":["var img = Utility.loadImage(\"img/swing.png\")","var ui1 =","            UI.label(\"Top Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.TOP_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui2 =","             UI.label(\"Top Right\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.GREEN)","                 .size(120, 120)","                 .image(ground -> ground","                     .image(img)","                     .size(60, 60)","                     .placement(UI.Placement.TOP_RIGHT)","                     .opacity(0.5f)","                     .primer(new Color(100,200,230, 100))","                 )","             )","var ui3 =","            UI.label(\"Bottom Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui4 =","            UI.label(\"Bottom Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM_RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui5 =","            UI.label(\"Center\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui6 =","            UI.label(\"Top\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.TOP)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui7 =","            UI.label(\"Bottom\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui8 =","            UI.label(\"Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui9 =","            UI.label(\"Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui10 =","            UI.label(\"Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img).autoFit(true)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui11 =","            UI.label(\"Only Color\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .primer(new Color(200,240,230, 200))","                )","            )","var ui12 =","            UI.label(\"Only Image\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                )","            )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/image-panels-collage.png\", 99) > 99"]},

        {"kind":"where","text":"We test this using the following UI scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Paint SVG based images as a component background through the style API. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the grounding of a component, which\n                is a sort of background for every style layer.\n                <br>\n                Here you can see an example of a hand full of labels \n                with an SVG based background image\n                rendered according to the specified placement policies, dimesnions and opacity.\n\n                They are all stitched together into a collage so that you can see them\n                all at once and compare them with each other.\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/svg-image-panels-collage.png\" alt=\"/snapshots/components/svg-image-panels-collage.png\" style=\"max-width: 50%;\" />\n\n                The text of each label describes the placement policy of the image.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of label declarations:","code":["var img = UI.findIcon(\"img/two-16th-notes.svg\").get()","var spacing = 0.03f","var ui1 =","            UI.label(\"Top Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER).fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.TOP_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui2 =","             UI.label(\"Top Right\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER).fontSpacing(spacing)","                 .border(2, Color.GREEN)","                 .size(120, 120)","                 .image(ground -> ground","                     .image(img)","                     .size(60, 60)","                     .placement(UI.Placement.TOP_RIGHT)","                     .opacity(0.5f)","                     .primer(new Color(100,200,230, 100))","                 )","             )","var ui3 =","            UI.label(\"Bottom Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui4 =","            UI.label(\"Bottom Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM_RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui5 =","            UI.label(\"Center\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui6 =","            UI.label(\"Top\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.TOP)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui7 =","            UI.label(\"Bottom\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui8 =","            UI.label(\"Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui9 =","            UI.label(\"Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui10 =","            UI.label(\"Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img).autoFit(true)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui11 =","            UI.label(\"Only Color\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .primer(new Color(200,240,230, 200))","                )","            )","var ui12 =","            UI.label(\"Only Image\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                )","            )","var ui13 =","            UI.label(\"Center X Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .height(60)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                    .fitMode(UI.FitComponent.WIDTH)","                )","            )","var ui14 =","            UI.label(\"Center Y Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .width(60)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                    .fitMode(UI.FitComponent.HEIGHT)","                )","            )","var ui15 =","            UI.label(\"Center XY Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                    .fitMode(UI.FitComponent.WIDTH_AND_HEIGHT)","                )","            )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var image13 = Utility.renderSingleComponent(ui13.get(JLabel))","var image14 = Utility.renderSingleComponent(ui14.get(JLabel))","var image15 = Utility.renderSingleComponent(ui15.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12, image13, image14, image15}"]},

        {"kind":"then","text":"The image is rendered as expected (compared to the snapshot above).","code":["Utility.similarityBetween(images, \"components/svg-image-panels-collage.png\", 99) > 99"]},

        {"kind":"where","text":"We test this UI using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Paint SVG based images as a component background through the style API. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the grounding of a component, which\n                is a sort of background for every style layer.\n                <br>\n                Here you can see an example of a hand full of labels \n                with an SVG based background image\n                rendered according to the specified placement policies, dimesnions and opacity.\n\n                They are all stitched together into a collage so that you can see them\n                all at once and compare them with each other.\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/svg-image-panels-collage.png\" alt=\"/snapshots/components/svg-image-panels-collage.png\" style=\"max-width: 50%;\" />\n\n                The text of each label describes the placement policy of the image.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of label declarations:","code":["var img = UI.findIcon(\"img/two-16th-notes.svg\").get()","var spacing = 0.03f","var ui1 =","            UI.label(\"Top Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER).fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.TOP_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui2 =","             UI.label(\"Top Right\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER).fontSpacing(spacing)","                 .border(2, Color.GREEN)","                 .size(120, 120)","                 .image(ground -> ground","                     .image(img)","                     .size(60, 60)","                     .placement(UI.Placement.TOP_RIGHT)","                     .opacity(0.5f)","                     .primer(new Color(100,200,230, 100))","                 )","             )","var ui3 =","            UI.label(\"Bottom Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui4 =","            UI.label(\"Bottom Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM_RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui5 =","            UI.label(\"Center\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui6 =","            UI.label(\"Top\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.TOP)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui7 =","            UI.label(\"Bottom\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui8 =","            UI.label(\"Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui9 =","            UI.label(\"Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui10 =","            UI.label(\"Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img).autoFit(true)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui11 =","            UI.label(\"Only Color\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .primer(new Color(200,240,230, 200))","                )","            )","var ui12 =","            UI.label(\"Only Image\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                )","            )","var ui13 =","            UI.label(\"Center X Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .height(60)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                    .fitMode(UI.FitComponent.WIDTH)","                )","            )","var ui14 =","            UI.label(\"Center Y Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .width(60)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                    .fitMode(UI.FitComponent.HEIGHT)","                )","            )","var ui15 =","            UI.label(\"Center XY Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                    .fitMode(UI.FitComponent.WIDTH_AND_HEIGHT)","                )","            )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var image13 = Utility.renderSingleComponent(ui13.get(JLabel))","var image14 = Utility.renderSingleComponent(ui14.get(JLabel))","var image15 = Utility.renderSingleComponent(ui15.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12, image13, image14, image15}"]},

        {"kind":"then","text":"The image is rendered as expected (compared to the snapshot above).","code":["Utility.similarityBetween(images, \"components/svg-image-panels-collage.png\", 99) > 99"]},

        {"kind":"where","text":"We test this UI using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Paint SVG based images as a component background through the style API. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the grounding of a component, which\n                is a sort of background for every style layer.\n                <br>\n                Here you can see an example of a hand full of labels \n                with an SVG based background image\n                rendered according to the specified placement policies, dimesnions and opacity.\n\n                They are all stitched together into a collage so that you can see them\n                all at once and compare them with each other.\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/svg-image-panels-collage.png\" alt=\"/snapshots/components/svg-image-panels-collage.png\" style=\"max-width: 50%;\" />\n\n                The text of each label describes the placement policy of the image.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of label declarations:","code":["var img = UI.findIcon(\"img/two-16th-notes.svg\").get()","var spacing = 0.03f","var ui1 =","            UI.label(\"Top Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER).fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.TOP_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui2 =","             UI.label(\"Top Right\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER).fontSpacing(spacing)","                 .border(2, Color.GREEN)","                 .size(120, 120)","                 .image(ground -> ground","                     .image(img)","                     .size(60, 60)","                     .placement(UI.Placement.TOP_RIGHT)","                     .opacity(0.5f)","                     .primer(new Color(100,200,230, 100))","                 )","             )","var ui3 =","            UI.label(\"Bottom Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui4 =","            UI.label(\"Bottom Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM_RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui5 =","            UI.label(\"Center\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui6 =","            UI.label(\"Top\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.TOP)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui7 =","            UI.label(\"Bottom\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui8 =","            UI.label(\"Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui9 =","            UI.label(\"Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui10 =","            UI.label(\"Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img).autoFit(true)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui11 =","            UI.label(\"Only Color\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .primer(new Color(200,240,230, 200))","                )","            )","var ui12 =","            UI.label(\"Only Image\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                )","            )","var ui13 =","            UI.label(\"Center X Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .height(60)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                    .fitMode(UI.FitComponent.WIDTH)","                )","            )","var ui14 =","            UI.label(\"Center Y Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .width(60)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                    .fitMode(UI.FitComponent.HEIGHT)","                )","            )","var ui15 =","            UI.label(\"Center XY Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                    .fitMode(UI.FitComponent.WIDTH_AND_HEIGHT)","                )","            )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var image13 = Utility.renderSingleComponent(ui13.get(JLabel))","var image14 = Utility.renderSingleComponent(ui14.get(JLabel))","var image15 = Utility.renderSingleComponent(ui15.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12, image13, image14, image15}"]},

        {"kind":"then","text":"The image is rendered as expected (compared to the snapshot above).","code":["Utility.similarityBetween(images, \"components/svg-image-panels-collage.png\", 99) > 99"]},

        {"kind":"where","text":"We test this UI using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Paint SVG based images as a component background through the style API. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the grounding of a component, which\n                is a sort of background for every style layer.\n                <br>\n                Here you can see an example of a hand full of labels \n                with an SVG based background image\n                rendered according to the specified placement policies, dimesnions and opacity.\n\n                They are all stitched together into a collage so that you can see them\n                all at once and compare them with each other.\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/svg-image-panels-collage.png\" alt=\"/snapshots/components/svg-image-panels-collage.png\" style=\"max-width: 50%;\" />\n\n                The text of each label describes the placement policy of the image.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of label declarations:","code":["var img = UI.findIcon(\"img/two-16th-notes.svg\").get()","var spacing = 0.03f","var ui1 =","            UI.label(\"Top Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER).fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.TOP_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui2 =","             UI.label(\"Top Right\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER).fontSpacing(spacing)","                 .border(2, Color.GREEN)","                 .size(120, 120)","                 .image(ground -> ground","                     .image(img)","                     .size(60, 60)","                     .placement(UI.Placement.TOP_RIGHT)","                     .opacity(0.5f)","                     .primer(new Color(100,200,230, 100))","                 )","             )","var ui3 =","            UI.label(\"Bottom Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui4 =","            UI.label(\"Bottom Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM_RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui5 =","            UI.label(\"Center\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui6 =","            UI.label(\"Top\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.TOP)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui7 =","            UI.label(\"Bottom\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.BOTTOM)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui8 =","            UI.label(\"Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui9 =","            UI.label(\"Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                    .placement(UI.Placement.RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui10 =","            UI.label(\"Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img).autoFit(true)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui11 =","            UI.label(\"Only Color\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .primer(new Color(200,240,230, 200))","                )","            )","var ui12 =","            UI.label(\"Only Image\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                )","            )","var ui13 =","            UI.label(\"Center X Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .height(60)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                    .fitMode(UI.FitComponent.WIDTH)","                )","            )","var ui14 =","            UI.label(\"Center Y Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .width(60)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                    .fitMode(UI.FitComponent.HEIGHT)","                )","            )","var ui15 =","            UI.label(\"Center XY Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontSpacing(spacing)","                .border(2, Color.GREEN)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                    .fitMode(UI.FitComponent.WIDTH_AND_HEIGHT)","                )","            )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var image13 = Utility.renderSingleComponent(ui13.get(JLabel))","var image14 = Utility.renderSingleComponent(ui14.get(JLabel))","var image15 = Utility.renderSingleComponent(ui15.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12, image13, image14, image15}"]},

        {"kind":"then","text":"The image is rendered as expected (compared to the snapshot above).","code":["Utility.similarityBetween(images, \"components/svg-image-panels-collage.png\", 99) > 99"]},

        {"kind":"where","text":"We test this UI using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Paint automatically stretched images as component background through the style API.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the image style of a component, which\n                is a image background that may be configured for every style layer.\n                These images styles allows for rendering images as background\n                for the component which may be stretched to fit the component size, \n                which is demonstrated in this example.\n                <br>\n                Note that a image dimension will only be stretched to the component\n                if no size was specified for a particular dimension (width or height).\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/stretched-image-panels-collage.png\" alt=\"/snapshots/components/stretched-image-panels-collage.png\" style=\"max-width: 50%;\" />\n\n                Also note that here we actually configure 2 images for every component\n                which will both be rendered on top of the component.\n                Here you can see an example of a panel with a background image.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of label declarations:","code":["var img = Utility.loadImage(\"img/trees.png\")","var ui1 =","            UI.label(\"Top Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.BLUE)","                .size(120, 120)","                .image(\"Image 1\", ground -> ground","                    .image(img)","                    .autoFit(true)","                    .width(40)","                    .placement(UI.Placement.TOP_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","                .image(\"Image 2\", ground -> ground","                    .image(img)","                    .autoFit(true)","                    .height(40)","                    .placement(UI.Placement.TOP_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui2 =","            UI.label(\"Top Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.BLUE)","                .size(120, 120)","                .image(\"Image 1\",  ground -> ground","                    .image(img)","                    .autoFit(true)","                    .width(40)","                    .placement(UI.Placement.TOP_RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","                .image(\"Image 2\",  ground -> ground","                    .image(img)","                    .autoFit(true)","                    .height(40)","                    .placement(UI.Placement.TOP_RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui3 =","            UI.label(\"Bottom Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.BLUE)","                .size(120, 120)","                .image(\"Image 1\", ground -> ground","                    .image(img)","                    .autoFit(true)","                    .width(40)","                    .placement(UI.Placement.BOTTOM_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","                .image(\"Image 2\", ground -> ground","                    .image(img)","                    .autoFit(true)","                    .height(40)","                    .placement(UI.Placement.BOTTOM_LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui4 =","            UI.label(\"Bottom Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.BLUE)","                .size(120, 120)","                .image(\"Image 1\", ground -> ground","                    .image(img)","                    .autoFit(true)","                    .width(40)","                    .placement(UI.Placement.BOTTOM_RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","                .image(\"Image 2\", ground -> ground","                    .image(img)","                    .autoFit(true)","                    .height(40)","                    .placement(UI.Placement.BOTTOM_RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui5 =","            UI.label(\"Center\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.BLUE)","                .size(120, 120)","                .image(\"Image 1\", ground -> ground","                    .image(img)","                    .autoFit(true)","                    .width(40)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","                .image(\"Image 2\", ground -> ground","                    .image(img)","                    .autoFit(true)","                    .height(40)","                    .placement(UI.Placement.CENTER)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","            var ui6 =","                        UI.label(\"Top\").withStyle( it -> it","                            .fontAlignment(UI.HorizontalAlignment.CENTER)","                            .border(2, Color.BLUE)","                            .size(120, 120)","                            .image(\"Image 1\", ground -> ground","                                .image(img)","                                .autoFit(true)","                                .width(40)","                                .placement(UI.Placement.TOP)","                                .opacity(0.5f)","                                .primer(new Color(100,200,230, 100))","                            )","                            .image(\"Image 2\", ground -> ground","                                .image(img)","                                .autoFit(true)","                                .height(40)","                                .placement(UI.Placement.TOP)","                                .opacity(0.5f)","                                .primer(new Color(100,200,230, 100))","                            )","","                        )","var ui7 =","            UI.label(\"Bottom\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.BLUE)","                .size(120, 120)","                .image(\"Image 1\", ground -> ground","                    .image(img)","                    .autoFit(true)","                    .width(40)","                    .placement(UI.Placement.BOTTOM)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","                .image(\"Image 2\", ground -> ground","                    .image(img)","                    .autoFit(true)","                    .height(40)","                    .placement(UI.Placement.BOTTOM)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui8 =","            UI.label(\"Left\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.BLUE)","                .size(120, 120)","                .image(\"Image 1\", ground -> ground","                    .image(img)","                    .autoFit(true)","                    .width(40)","                    .placement(UI.Placement.LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","                .image(\"Image 2\", ground -> ground","                    .image(img)","                    .autoFit(true)","                    .height(40)","                    .placement(UI.Placement.LEFT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui9 =","            UI.label(\"Right\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.BLUE)","                .size(120, 120)","                .image(\"Image 1\", ground -> ground","                    .image(img)","                    .autoFit(true)","                    .width(40)","                    .placement(UI.Placement.RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","                .image(\"Image 2\", ground -> ground","                    .image(img)","                    .autoFit(true)","                    .height(40)","                    .placement(UI.Placement.RIGHT)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui10 =","            UI.label(\"Stretch\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.BLUE)","                .size(120, 120)","                .image(\"Image 1\", ground -> ground","                    .image(img)","                    .autoFit(true)","                    .width(40)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","                .image(\"Image 2\", ground -> ground","                    .image(img)","                    .autoFit(true)","                    .height(40)","                    .opacity(0.5f)","                    .primer(new Color(100,200,230, 100))","                )","            )","var ui11 =","            UI.label(\"Only Color\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.BLUE)","                .size(120, 120)","                .image(ground -> ground","                    .primer(new Color(200,240,230, 200))","                )","            )","var ui12 =","            UI.label(\"Only Image\").withStyle( it -> it","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.BLUE)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(60, 60)","                )","            )"]},

        {"kind":"when","text":"We paint the UIs into BufferedImage instances.","code":["var image1  = Utility.renderSingleComponent(ui1.get(JLabel))","var image2  = Utility.renderSingleComponent(ui2.get(JLabel))","var image3  = Utility.renderSingleComponent(ui3.get(JLabel))","var image4  = Utility.renderSingleComponent(ui4.get(JLabel))","var image5  = Utility.renderSingleComponent(ui5.get(JLabel))","var image6  = Utility.renderSingleComponent(ui6.get(JLabel))","var image7  = Utility.renderSingleComponent(ui7.get(JLabel))","var image8  = Utility.renderSingleComponent(ui8.get(JLabel))","var image9  = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12}"]},

        {"kind":"then","text":"The image is rendered as expected (compared to the snapshot above).","code":["Utility.similarityBetween(images, \"components/stretched-image-panels-collage.png\", 98) > 98"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A single image can be painted repeatedly in a panel.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The image sub-style can be used to paint a single image repeatedly in a panel\n            by setting the `repeat` flag to true.\n            Here you can see various examples of this in the form of a collage\n            where the image is painted in the center, top, bottom, left, right and stretched.\n\n            Note that we use labels as a basis for this style configuration\n            to also describe the placement of the image.\n\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/repeated-image-label-collage_1_.png\" alt=\"/snapshots/components/repeated-image-label-collage_1_.png\" style=\"max-width: 50%;\" />\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A hand full of UIs each with a single image painted repeatedly in a label.","code":["var img = Utility.loadImage(\"img/trees.png\")","var ui1 =","            UI.label(\"Plain Repeat\").peek( it -> it.setOpaque(true) )","            .withStyle( it -> it","                // No background color!","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontColor(Color.BLUE)","                .fontFamily(\"Ubuntu\")","                .border(2, Color.BLACK).borderRadius(10)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(30, 30)","                    .repeat(true)","                )","            )","var ui2 =","            UI.label(\"Top Let Repeat\").peek( it -> it.setOpaque(false) )","            .withStyle( it -> it","                // No background color!","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontColor(Color.BLUE)","                .fontFamily(\"Ubuntu\")","                .border(2, Color.BLACK).borderRadius(10)","                .size(120, 120)","                .image(ground -> ground","                    .image(img)","                    .size(30, 30)","                    .repeat(true)","                    .placement(UI.Placement.TOP_LEFT)","                )","            )","var ui3 =","            UI.label(\"Fill Height\").peek( it -> it.setOpaque(true) )","            .withStyle( it -> it","                .backgroundColor(\"salmon\") // Opacity is 1.0f","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontColor(Color.BLUE)","                .fontFamily(\"Ubuntu\")","                .border(2, Color.BLACK).borderRadius(10)","                .size(120, 120)","                .image(ground -> ground","                    .image(img).autoFit(true)","                    .width(40)","                    .repeat(true)","                )","            )","var ui4 =","            UI.label(\"Fill Width\").peek( it -> it.setOpaque(false) )","            .withStyle( it -> it","                .backgroundColor(\"salmon\") // Opacity is 1.0f","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontColor(Color.BLUE)","                .fontFamily(\"Ubuntu\")","                .border(2, Color.BLACK).borderRadius(10)","                .size(120, 120)","                .image(ground -> ground","                    .image(img).autoFit(true)","                    .height(40)","                    .repeat(true)","                    .placement(UI.Placement.TOP_RIGHT)","                )","            )","var ui5 =","            UI.label(\"Width 40\").peek( it -> it.setOpaque(true) )","            .withStyle( it -> it","                .backgroundColor(new Color(0,0,0,0)) // Opacity is 0.0f","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontColor(Color.BLUE)","                .fontFamily(\"Ubuntu\")","                .border(2, Color.BLACK).borderRadius(10)","                .size(120, 120)","                .image(ground -> ground","                    .image(img) // No auto-fit!","                    .width(40)","                    .repeat(true)","                    .placement(UI.Placement.RIGHT)","                )","            )","var ui6 =","            UI.label(\"Height 40\").peek( it -> it.setOpaque(false) )","            .withStyle( it -> it","                .backgroundColor(new Color(0,0,0,0)) // Opacity is 0.0f","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .fontColor(Color.BLUE)","                .fontFamily(\"Ubuntu\")","                .border(2, Color.BLACK).borderRadius(10)","                .size(120, 120)","                .image(ground -> ground","                    .image(img) // No auto-fit!","                    .height(40)","                    .repeat(true)","                    .placement(UI.Placement.LEFT)","                )","            )"]},

        {"kind":"when","text":"We paint the UIs into a BufferedImage instance.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6}"]},

        {"kind":"then","text":"The image is rendered as expected.","code":["Utility.similarityBetween(images, \"components/repeated-image-label-collage.png\", 99.75) > 99.75"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Create fancy text fields with custom icons and a button.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Creating heavily customized components in a way which prefers composition over inheritance\n            is one of the main goals of SwingTree and this little example demonstrates this very nicely.\n            <br>\n            Here you can see an example of a text field with a custom icon and a button:\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/heavily-customized-text-field_1_.png\" alt=\"/snapshots/components/heavily-customized-text-field_1_.png\" style=\"max-width: 50%;\" />\n\n            As you can see, the resulting text field looks nothing like the default text field\n            and we did not need to extend any Swing class to achieve this.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"Now we create a text field UI with a custom styler lambda and a button.","code":["var seed = Utility.loadImage(\"img/seed.png\")","var trees = Utility.loadImage(\"img/trees.png\")","var ui =","        UI.textField(\"I am fancy! :)\").withLayout(\"fill, ins 0\").withPrefSize(190, 25)","        .withStyle( it -> it","            .fontSize(16)","            .paddingLeft(26)","            .marginRight(25)","            .paddingRight(-20)","            .image(UI.Layer.BORDER, image -> image","                .image(seed)","                .placement(UI.Placement.LEFT)","                .width(30).autoFit(true)","                .padding(3)","            )","        )","        .add(\"right\",","            UI.button(19, 19, new ImageIcon(trees))","            .withStyle( it -> it","                .margin(0)","                .cursor(UI.Cursor.HAND)","                .painter(UI.Layer.BACKGROUND, g2d -> {","                    boolean isHovered = it.component().getModel().isRollover();","                    boolean isPressed = it.component().getModel().isPressed();","                    if ( isPressed ) {","                        g2d.setColor(new Color(0,100,200));","                        g2d.fillRoundRect(0, 0, it.component().getWidth(), it.component().getHeight(), 5, 5);","                    }","                    else if ( isHovered ) {","                        g2d.setColor(new Color(120,220,100));","                        g2d.fillRoundRect(0, 0, it.component().getWidth(), it.component().getHeight(), 5, 5);","                    }","                })","            )","            .makePlain()","        );"]},

        {"kind":"expect","text":"The image is as expected.","code":["Utility.similarityBetween(ui.get(JTextField), \"components/heavily-customized-text-field.png\", 99.5) > 99.5"]},

        {"kind":"where","text":"","code":{"uiScale":["3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Create a button with a SVG icon based toggle mode.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Creating heavily customized components in a way which prefers composition over inheritance\n            is one of the main goals of SwingTree and this little example demonstrates this very \n            nicely using 2 buttons, a regular button and a toggle button nested inside.\n            <br>\n            Here you can see an example of a text field with a custom icon and a button:\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/nested-buttons.png\" alt=\"/snapshots/components/nested-buttons.png\" style=\"max-width: 50%;\" />\n\n            As you can see, the resulting button looks nothing like the default button\n            and we did not need to extend any Swing class to achieve this.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"Now we create a button UI with a custom styler lambda and a button.","code":["var funnel = UI.findIcon(\"img/funnel.svg\")","var ui =","        UI.button(\"Click\").withLayout(\"fill, ins 0\")","        .withPrefSize(160, 80)","        .withSize(160, 80)","        .withStyle( it -> it","            .fontSize(16)","            .fontAlignment(UI.HorizontalAlignment.LEFT)","            .padding(0)","            .paddingLeft(10)","            .margin(15)","            .border(3, \"orange\")","        )","        .add(\"right\",","            UI.toggleButton(funnel.get())","            .withStyle( it -> it","                .prefWidth((int)it.parent().map(Container::getSize).map(d -> d.height).orElse(80)-40)","                .prefHeight((int)it.parent().map(Container::getSize).map(d -> d.height).orElse(80)-40)","                .margin(5)","                .padding(5)","                .cursor(UI.Cursor.HAND)","                .border(2, \"gray\")","                .borderRadius(15)","            )","        );"]},

        {"kind":"expect","text":"The image is as expected.","code":["Utility.similarityBetween(ui.get(JButton), \"components/nested-buttons.png\", 99.5) > 99.5"]},

        {"kind":"where","text":"","code":{"uiScale":["1"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The font style of a parent component will be inherited by its children.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The font style of a parent component will be inherited by its children.\n            Here you can see an example of a panel of 2 different panels,\n            one with a label and a button and the other with a big text area.\n            Font related styles are only configured for the parent panel\n            and the children will inherit these styles automatically.\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/font-style-inheritance_1_.png\" alt=\"/snapshots/components/font-style-inheritance_1_.png\" style=\"max-width: 50%;\" />\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"A UI with a higher level of nesting:","code":["var ui =","        UI.panel().withLayout(\"fill, ins 0, wrap 1\")","        .withStyle( it -> it","            .fontFamily(\"Alloy Ink\")","            .fontSize(15)","            .fontColor(Color.WHITE)","            .fontAlignment(UI.HorizontalAlignment.CENTER)","            .margin(5).padding(5)","            .borderRadius(6)","            .backgroundColor(Color.BLACK)","        )","        .add(","            UI.panel().withLayout(\"fill, ins 0\")","            .withStyle( it -> it","                .margin(5).padding(5)","                .borderRadius(6)","                .backgroundColor(Color.DARK_GRAY)","            )","            .add(","                UI.label(\"Label\").withStyle( it -> it","                    .minWidth(65)","                    .margin(5).padding(5)","                    .borderRadius(6)","                    .fontSize(10)","                    .backgroundColor(Color.ORANGE)","                )","            )","            .add(","                UI.button(\"Button\").withStyle( it -> it","                    .minWidth(85)","                    .margin(5).padding(5)","                    .borderRadius(6)","                    .backgroundColor(\"magenta\")","                )","            )","        )","        .add(\"grow\",","            UI.panel().withLayout(\"fill, ins 0\")","            .withStyle( it -> it","                .margin(5).padding(5)","                .borderRadius(6)","                .backgroundColor(Color.DARK_GRAY)","            )","            .add(\"grow\",","                UI.textArea(\"A simple TextArea\").withStyle( it -> it","                    .margin(5).padding(5)","                    .borderRadius(6)","                    .backgroundColor(Color.GRAY)","                    .fontFamily(\"Ubuntu\") // we override the font name here","                )","            )","        )"]},

        {"kind":"expect","text":"The image is as expected.","code":["Utility.similarityBetween(ui.get(JPanel), \"components/font-style-inheritance.png\", 99.4) > 99.4"]},

        {"kind":"where","text":"","code":{"uiScale":["1"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Configure a custom paint for the font of your components.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The style API allows you to configure custom paint styles for the font of your components.\n            Usually the paint of a font is used to fill out the bounds of the characters.\n            It may be a gradient, noise function or a custom `java.awt.Paint` implementation.\n            This example demonstrates different font paint confgurations.\n\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/font-style-with-custom-paint_1_.png\" alt=\"/snapshots/components/font-style-with-custom-paint_1_.png\" style=\"max-width: 50%;\" />\n\n            As you can see, you can easily have a font style with horizontal\n            and vertical gradient paint effect as well as noise based paint.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            Before we create the UI declaration we first need to \n            set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"A UI declaration consisting of a `JBox` with 3 components:","code":["var ui =","        UI.box(\"fill, ins 3, wrap 2, gap 3\", \"[grow][grow]\")","        .add(\"span, center\",","            UI.label(\"I am a Gradient\")","            .withStyle( it -> it","                .padding(3).borderRadius(12)","                .componentFont(f->f","                    .size(18)","                    .family(\"Alloy Ink\")","                    .gradient(grad -> grad","                        .colors(Color.BLACK, Color.GREEN, Color.BLUE, Color.MAGENTA)","                        .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                        .span(UI.Span.BOTTOM_TO_TOP)","                        .type(UI.GradientType.LINEAR)","                    )","                )","                .fontAlignment(UI.HorizontalAlignment.CENTER)","            )","        )","        .add(","            UI.toggleButton(\"I am a Rainbow\")","            .withStyle( it -> it","                .padding(3).borderRadius(12)","                .componentFont(f->f","                    .size(18).weight(3f)","                    .family(\"Ubuntu\")","                    .gradient(grad -> grad","                        .colors(Color.BLACK, Color.RED, Color.ORANGE, Color.YELLOW, Color.GREEN, Color.BLUE, Color.MAGENTA)","                        .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                        .span(UI.Span.LEFT_TO_RIGHT)","                        .type(UI.GradientType.LINEAR)","                    )","                )","                .fontAlignment(UI.HorizontalAlignment.CENTER)","            )","        )","        .add(","            UI.button(\"I am Noisy\")","            .withStyle( it -> it","                .padding(3).borderRadius(12)","                .componentFont(f->f","                    .size(18).weight(3f)","                    .family(\"Ubuntu\")","                    .noise(n->n","                        .colors(\"black\", \"blue\", \"dark green\", \"yellow\")","                        .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                        .function(UI.NoiseType.HAZE)","                        .scale(0.5)","                    )","                )","                .fontAlignment(UI.HorizontalAlignment.CENTER)","            )","        )"]},

        {"kind":"expect","text":"The image is as expected.","code":["Utility.similarityBetween(ui.get(JBox), \"components/font-style-with-custom-paint.png\", 95.95) > 95.95"]},

        {"kind":"where","text":"","code":{"uiScale":["2"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the style API to design custom tabbed panes from scratch. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Creating heavily customized components in a way which prefers composition over inheritance\n            is one of the main goals of SwingTree and this little example demonstrates \n            how this principle is also applicable for\n            more sophisticated components like tabbed panes.\n            <br>\n            Here you can see an example of a custom SwingTree based tabbed pane:\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/my-tabbed-pane.png\" alt=\"/snapshots/components/my-tabbed-pane.png\" style=\"max-width: 50%;\" />\n\n            As you can see, the resulting tabbed pane looks nothing like the default tabbed pane\n            and we did not need to extend any Swing class to achieve this.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"","code":["MyTabsViewModel.TabModel tab1 = new MyTabsView.DummyTab(\"Tab 1\", \"\").getModel();","MyTabsViewModel.TabModel tab2 = new MyTabsView.DummyTab(\"Tab 2\", \"img/two-16th-notes.svg\").getModel();","MyTabsViewModel.TabModel tab3 = new MyTabsView.DummyTab(\"Tab 3\", \"img/funnel.svg\").getModel();","MyTabsViewModel vm = new MyTabsViewModel();","vm.getTabs().add(tab1);","vm.getTabs().add(tab2);","vm.getTabs().add(tab3);","vm.getCurrentTab().set(tab2);","var ui = new MyTabsView(vm)","ui.setPreferredSize(new Dimension(UI.scale(220), UI.scale(80)))"]},

        {"kind":"expect","text":"The image is as expected.","code":["Utility.similarityBetween(ui, \"components/my-tabbed-pane.png\", 97.5) > 97.5"]},

        {"kind":"where","text":"","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the style API to design custom tabbed panes from scratch. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Creating heavily customized components in a way which prefers composition over inheritance\n            is one of the main goals of SwingTree and this little example demonstrates \n            how this principle is also applicable for\n            more sophisticated components like tabbed panes.\n            <br>\n            Here you can see an example of a custom SwingTree based tabbed pane:\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/my-tabbed-pane.png\" alt=\"/snapshots/components/my-tabbed-pane.png\" style=\"max-width: 50%;\" />\n\n            As you can see, the resulting tabbed pane looks nothing like the default tabbed pane\n            and we did not need to extend any Swing class to achieve this.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"","code":["MyTabsViewModel.TabModel tab1 = new MyTabsView.DummyTab(\"Tab 1\", \"\").getModel();","MyTabsViewModel.TabModel tab2 = new MyTabsView.DummyTab(\"Tab 2\", \"img/two-16th-notes.svg\").getModel();","MyTabsViewModel.TabModel tab3 = new MyTabsView.DummyTab(\"Tab 3\", \"img/funnel.svg\").getModel();","MyTabsViewModel vm = new MyTabsViewModel();","vm.getTabs().add(tab1);","vm.getTabs().add(tab2);","vm.getTabs().add(tab3);","vm.getCurrentTab().set(tab2);","var ui = new MyTabsView(vm)","ui.setPreferredSize(new Dimension(UI.scale(220), UI.scale(80)))"]},

        {"kind":"expect","text":"The image is as expected.","code":["Utility.similarityBetween(ui, \"components/my-tabbed-pane.png\", 97.5) > 97.5"]},

        {"kind":"where","text":"","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the style API to design custom tabbed panes from scratch. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Creating heavily customized components in a way which prefers composition over inheritance\n            is one of the main goals of SwingTree and this little example demonstrates \n            how this principle is also applicable for\n            more sophisticated components like tabbed panes.\n            <br>\n            Here you can see an example of a custom SwingTree based tabbed pane:\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/my-tabbed-pane.png\" alt=\"/snapshots/components/my-tabbed-pane.png\" style=\"max-width: 50%;\" />\n\n            As you can see, the resulting tabbed pane looks nothing like the default tabbed pane\n            and we did not need to extend any Swing class to achieve this.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"","code":["MyTabsViewModel.TabModel tab1 = new MyTabsView.DummyTab(\"Tab 1\", \"\").getModel();","MyTabsViewModel.TabModel tab2 = new MyTabsView.DummyTab(\"Tab 2\", \"img/two-16th-notes.svg\").getModel();","MyTabsViewModel.TabModel tab3 = new MyTabsView.DummyTab(\"Tab 3\", \"img/funnel.svg\").getModel();","MyTabsViewModel vm = new MyTabsViewModel();","vm.getTabs().add(tab1);","vm.getTabs().add(tab2);","vm.getTabs().add(tab3);","vm.getCurrentTab().set(tab2);","var ui = new MyTabsView(vm)","ui.setPreferredSize(new Dimension(UI.scale(220), UI.scale(80)))"]},

        {"kind":"expect","text":"The image is as expected.","code":["Utility.similarityBetween(ui, \"components/my-tabbed-pane.png\", 97.5) > 97.5"]},

        {"kind":"where","text":"","code":{"uiScale":["1","2","3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can use the style API to configure client properties for components.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The style API allows you to configure client properties for components.\n            Client properties are a way to attach custom data to a component.\n            Usually the purpose of client properties is to give a particular look and feel\n            implementation a way to configure how a particular component should be painted.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple toggle button with a few abitrary properties.","code":["var ui =","        UI.toggleButton(\"Toggle Me\").withStyle( it -> it","            .property(\"my.custom.property.1\", \"Hello World!\")","            .property(\"my.custom.property.2\", \"42\")","            .property(\"my.custom.property.3\", \"true\")","        )"]},

        {"kind":"and","text":"We build the toggle button:","code":["var button = ui.get(JToggleButton)"]},

        {"kind":"expect","text":"The component indeed has the specified client properties!","code":["button.getClientProperty(\"my.custom.property.1\") == \"Hello World!\"","button.getClientProperty(\"my.custom.property.2\") == \"42\"","button.getClientProperty(\"my.custom.property.3\") == \"true\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render linear gradients as component backgrounds using the style API. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the gradient of a component.\n                <br>\n                Here you can see an example of multiple labels with different \n                linear gradient styles. <br>\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/linear-gradients-collage.png\" alt=\"/snapshots/components/linear-gradients-collage.png\" style=\"max-width: 50%;\" />\n\n                They are all stitched together into a collage so that you can see them \n                all at once and compare them with each other.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of labels:","code":["var ui1 =","            UI.label(\"Center Left Right\").withStyle( it -> it","                .fontFamily(\"Ubuntu\")","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.DARK_GRAY)","                .size(120, 120)","                .gradient( gradConf -> gradConf","                    .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                    .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                    .span(UI.Span.LEFT_TO_RIGHT)","                    .type(UI.GradientType.LINEAR)","                    .focus(26,16)","                )","            )","var ui2 =","             UI.label(\"Center Right Left\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.RIGHT_TO_LEFT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui3 =","             UI.label(\"Center Top Bottom\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_TO_BOTTOM)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui4 =","             UI.label(\"Center Bottom TOP\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_TO_TOP)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui5 =","             UI.label(\"Center LT to BR\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_LEFT_TO_BOTTOM_RIGHT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui6 =","             UI.label(\"Center BR to LT\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_RIGHT_TO_TOP_LEFT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui7 =","             UI.label(\"Center TR to BL\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_RIGHT_TO_BOTTOM_LEFT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui8 =","             UI.label(\"Center BL to TR\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_LEFT_TO_TOP_RIGHT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui9 =","             UI.label(\"Full Top Bottom\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.TOP_TO_BOTTOM)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui10 =","             UI.label(\"Full Bottom TOP\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.BOTTOM_TO_TOP)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui11 =","             UI.label(\"Full Left Right\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.LEFT_TO_RIGHT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui12 =","             UI.label(\"Full Right Left\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.RIGHT_TO_LEFT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/linear-gradients-collage.png\", 99) > 99"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render linear gradients as component backgrounds using the style API. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the gradient of a component.\n                <br>\n                Here you can see an example of multiple labels with different \n                linear gradient styles. <br>\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/linear-gradients-collage.png\" alt=\"/snapshots/components/linear-gradients-collage.png\" style=\"max-width: 50%;\" />\n\n                They are all stitched together into a collage so that you can see them \n                all at once and compare them with each other.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of labels:","code":["var ui1 =","            UI.label(\"Center Left Right\").withStyle( it -> it","                .fontFamily(\"Ubuntu\")","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.DARK_GRAY)","                .size(120, 120)","                .gradient( gradConf -> gradConf","                    .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                    .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                    .span(UI.Span.LEFT_TO_RIGHT)","                    .type(UI.GradientType.LINEAR)","                    .focus(26,16)","                )","            )","var ui2 =","             UI.label(\"Center Right Left\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.RIGHT_TO_LEFT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui3 =","             UI.label(\"Center Top Bottom\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_TO_BOTTOM)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui4 =","             UI.label(\"Center Bottom TOP\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_TO_TOP)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui5 =","             UI.label(\"Center LT to BR\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_LEFT_TO_BOTTOM_RIGHT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui6 =","             UI.label(\"Center BR to LT\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_RIGHT_TO_TOP_LEFT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui7 =","             UI.label(\"Center TR to BL\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_RIGHT_TO_BOTTOM_LEFT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui8 =","             UI.label(\"Center BL to TR\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_LEFT_TO_TOP_RIGHT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui9 =","             UI.label(\"Full Top Bottom\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.TOP_TO_BOTTOM)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui10 =","             UI.label(\"Full Bottom TOP\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.BOTTOM_TO_TOP)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui11 =","             UI.label(\"Full Left Right\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.LEFT_TO_RIGHT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui12 =","             UI.label(\"Full Right Left\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.RIGHT_TO_LEFT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/linear-gradients-collage.png\", 99) > 99"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render linear gradients as component backgrounds using the style API. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the gradient of a component.\n                <br>\n                Here you can see an example of multiple labels with different \n                linear gradient styles. <br>\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/linear-gradients-collage.png\" alt=\"/snapshots/components/linear-gradients-collage.png\" style=\"max-width: 50%;\" />\n\n                They are all stitched together into a collage so that you can see them \n                all at once and compare them with each other.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of labels:","code":["var ui1 =","            UI.label(\"Center Left Right\").withStyle( it -> it","                .fontFamily(\"Ubuntu\")","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.DARK_GRAY)","                .size(120, 120)","                .gradient( gradConf -> gradConf","                    .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                    .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                    .span(UI.Span.LEFT_TO_RIGHT)","                    .type(UI.GradientType.LINEAR)","                    .focus(26,16)","                )","            )","var ui2 =","             UI.label(\"Center Right Left\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.RIGHT_TO_LEFT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui3 =","             UI.label(\"Center Top Bottom\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_TO_BOTTOM)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui4 =","             UI.label(\"Center Bottom TOP\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_TO_TOP)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui5 =","             UI.label(\"Center LT to BR\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_LEFT_TO_BOTTOM_RIGHT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui6 =","             UI.label(\"Center BR to LT\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_RIGHT_TO_TOP_LEFT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui7 =","             UI.label(\"Center TR to BL\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_RIGHT_TO_BOTTOM_LEFT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui8 =","             UI.label(\"Center BL to TR\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_LEFT_TO_TOP_RIGHT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui9 =","             UI.label(\"Full Top Bottom\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.TOP_TO_BOTTOM)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui10 =","             UI.label(\"Full Bottom TOP\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.BOTTOM_TO_TOP)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui11 =","             UI.label(\"Full Left Right\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.LEFT_TO_RIGHT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui12 =","             UI.label(\"Full Right Left\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.RIGHT_TO_LEFT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/linear-gradients-collage.png\", 99) > 99"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render linear gradients as component backgrounds using the style API. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the gradient of a component.\n                <br>\n                Here you can see an example of multiple labels with different \n                linear gradient styles. <br>\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/linear-gradients-collage.png\" alt=\"/snapshots/components/linear-gradients-collage.png\" style=\"max-width: 50%;\" />\n\n                They are all stitched together into a collage so that you can see them \n                all at once and compare them with each other.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of labels:","code":["var ui1 =","            UI.label(\"Center Left Right\").withStyle( it -> it","                .fontFamily(\"Ubuntu\")","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.DARK_GRAY)","                .size(120, 120)","                .gradient( gradConf -> gradConf","                    .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                    .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                    .span(UI.Span.LEFT_TO_RIGHT)","                    .type(UI.GradientType.LINEAR)","                    .focus(26,16)","                )","            )","var ui2 =","             UI.label(\"Center Right Left\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.RIGHT_TO_LEFT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui3 =","             UI.label(\"Center Top Bottom\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_TO_BOTTOM)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui4 =","             UI.label(\"Center Bottom TOP\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_TO_TOP)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui5 =","             UI.label(\"Center LT to BR\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_LEFT_TO_BOTTOM_RIGHT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui6 =","             UI.label(\"Center BR to LT\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_RIGHT_TO_TOP_LEFT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui7 =","             UI.label(\"Center TR to BL\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_RIGHT_TO_BOTTOM_LEFT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui8 =","             UI.label(\"Center BL to TR\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_LEFT_TO_TOP_RIGHT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui9 =","             UI.label(\"Full Top Bottom\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.TOP_TO_BOTTOM)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui10 =","             UI.label(\"Full Bottom TOP\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.BOTTOM_TO_TOP)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui11 =","             UI.label(\"Full Left Right\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.LEFT_TO_RIGHT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )","var ui12 =","             UI.label(\"Full Right Left\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.RIGHT_TO_LEFT)","                     .type(UI.GradientType.LINEAR)","                     .focus(26,16)","                 )","             )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/linear-gradients-collage.png\", 99) > 99"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render conic gradients as component backgrounds using the style API. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the gradient of a component.\n                <br>\n                Here you can see an example of multiple labels with different \n                conic gradient styles. <br>\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/conic-gradients-collage.png\" alt=\"/snapshots/components/conic-gradients-collage.png\" style=\"max-width: 50%;\" />\n\n                They are all stitched together into a collage so that you can see them \n                all at once and compare them with each other.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of labels:","code":["var ui1 =","            UI.label(\"Center Left Right\").withStyle( it -> it","                .fontFamily(\"Ubuntu\")","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.DARK_GRAY)","                .size(120, 120)","                .gradient( gradConf -> gradConf","                    .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                    .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                    .span(UI.Span.LEFT_TO_RIGHT)","                    .type(UI.GradientType.CONIC)","                    .focus(26,16)","                )","            )","var ui2 =","             UI.label(\"Center Right Left\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.RIGHT_TO_LEFT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui3 =","             UI.label(\"Center Top Bottom\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_TO_BOTTOM)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui4 =","             UI.label(\"Center Bottom TOP\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_TO_TOP)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui5 =","             UI.label(\"Center LT to BR\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_LEFT_TO_BOTTOM_RIGHT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui6 =","             UI.label(\"Center BR to LT\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_RIGHT_TO_TOP_LEFT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui7 =","             UI.label(\"Center TR to BL\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_RIGHT_TO_BOTTOM_LEFT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui8 =","             UI.label(\"Center BL to TR\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_LEFT_TO_TOP_RIGHT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui9 =","             UI.label(\"Full Top Bottom\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.TOP_TO_BOTTOM)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui10 =","             UI.label(\"Full Bottom TOP\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.BOTTOM_TO_TOP)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui11 =","             UI.label(\"Full Left Right\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.LEFT_TO_RIGHT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui12 =","             UI.label(\"Full Right Left\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.RIGHT_TO_LEFT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/conic-gradients-collage.png\", 99) > 99"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render conic gradients as component backgrounds using the style API. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the gradient of a component.\n                <br>\n                Here you can see an example of multiple labels with different \n                conic gradient styles. <br>\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/conic-gradients-collage.png\" alt=\"/snapshots/components/conic-gradients-collage.png\" style=\"max-width: 50%;\" />\n\n                They are all stitched together into a collage so that you can see them \n                all at once and compare them with each other.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of labels:","code":["var ui1 =","            UI.label(\"Center Left Right\").withStyle( it -> it","                .fontFamily(\"Ubuntu\")","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.DARK_GRAY)","                .size(120, 120)","                .gradient( gradConf -> gradConf","                    .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                    .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                    .span(UI.Span.LEFT_TO_RIGHT)","                    .type(UI.GradientType.CONIC)","                    .focus(26,16)","                )","            )","var ui2 =","             UI.label(\"Center Right Left\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.RIGHT_TO_LEFT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui3 =","             UI.label(\"Center Top Bottom\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_TO_BOTTOM)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui4 =","             UI.label(\"Center Bottom TOP\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_TO_TOP)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui5 =","             UI.label(\"Center LT to BR\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_LEFT_TO_BOTTOM_RIGHT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui6 =","             UI.label(\"Center BR to LT\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_RIGHT_TO_TOP_LEFT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui7 =","             UI.label(\"Center TR to BL\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_RIGHT_TO_BOTTOM_LEFT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui8 =","             UI.label(\"Center BL to TR\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_LEFT_TO_TOP_RIGHT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui9 =","             UI.label(\"Full Top Bottom\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.TOP_TO_BOTTOM)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui10 =","             UI.label(\"Full Bottom TOP\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.BOTTOM_TO_TOP)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui11 =","             UI.label(\"Full Left Right\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.LEFT_TO_RIGHT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui12 =","             UI.label(\"Full Right Left\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.RIGHT_TO_LEFT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/conic-gradients-collage.png\", 99) > 99"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render conic gradients as component backgrounds using the style API. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the gradient of a component.\n                <br>\n                Here you can see an example of multiple labels with different \n                conic gradient styles. <br>\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/conic-gradients-collage.png\" alt=\"/snapshots/components/conic-gradients-collage.png\" style=\"max-width: 50%;\" />\n\n                They are all stitched together into a collage so that you can see them \n                all at once and compare them with each other.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of labels:","code":["var ui1 =","            UI.label(\"Center Left Right\").withStyle( it -> it","                .fontFamily(\"Ubuntu\")","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.DARK_GRAY)","                .size(120, 120)","                .gradient( gradConf -> gradConf","                    .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                    .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                    .span(UI.Span.LEFT_TO_RIGHT)","                    .type(UI.GradientType.CONIC)","                    .focus(26,16)","                )","            )","var ui2 =","             UI.label(\"Center Right Left\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.RIGHT_TO_LEFT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui3 =","             UI.label(\"Center Top Bottom\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_TO_BOTTOM)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui4 =","             UI.label(\"Center Bottom TOP\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_TO_TOP)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui5 =","             UI.label(\"Center LT to BR\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_LEFT_TO_BOTTOM_RIGHT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui6 =","             UI.label(\"Center BR to LT\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_RIGHT_TO_TOP_LEFT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui7 =","             UI.label(\"Center TR to BL\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_RIGHT_TO_BOTTOM_LEFT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui8 =","             UI.label(\"Center BL to TR\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_LEFT_TO_TOP_RIGHT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui9 =","             UI.label(\"Full Top Bottom\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.TOP_TO_BOTTOM)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui10 =","             UI.label(\"Full Bottom TOP\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.BOTTOM_TO_TOP)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui11 =","             UI.label(\"Full Left Right\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.LEFT_TO_RIGHT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui12 =","             UI.label(\"Full Right Left\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.RIGHT_TO_LEFT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/conic-gradients-collage.png\", 99) > 99"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render conic gradients as component backgrounds using the style API. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the gradient of a component.\n                <br>\n                Here you can see an example of multiple labels with different \n                conic gradient styles. <br>\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/conic-gradients-collage.png\" alt=\"/snapshots/components/conic-gradients-collage.png\" style=\"max-width: 50%;\" />\n\n                They are all stitched together into a collage so that you can see them \n                all at once and compare them with each other.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of labels:","code":["var ui1 =","            UI.label(\"Center Left Right\").withStyle( it -> it","                .fontFamily(\"Ubuntu\")","                .fontAlignment(UI.HorizontalAlignment.CENTER)","                .border(2, Color.DARK_GRAY)","                .size(120, 120)","                .gradient( gradConf -> gradConf","                    .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                    .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                    .span(UI.Span.LEFT_TO_RIGHT)","                    .type(UI.GradientType.CONIC)","                    .focus(26,16)","                )","            )","var ui2 =","             UI.label(\"Center Right Left\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.RIGHT_TO_LEFT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui3 =","             UI.label(\"Center Top Bottom\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_TO_BOTTOM)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui4 =","             UI.label(\"Center Bottom TOP\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_TO_TOP)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui5 =","             UI.label(\"Center LT to BR\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_LEFT_TO_BOTTOM_RIGHT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui6 =","             UI.label(\"Center BR to LT\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_RIGHT_TO_TOP_LEFT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui7 =","             UI.label(\"Center TR to BL\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.TOP_RIGHT_TO_BOTTOM_LEFT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui8 =","             UI.label(\"Center BL to TR\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .span(UI.Span.BOTTOM_LEFT_TO_TOP_RIGHT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui9 =","             UI.label(\"Full Top Bottom\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.TOP_TO_BOTTOM)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui10 =","             UI.label(\"Full Bottom TOP\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.BOTTOM_TO_TOP)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui11 =","             UI.label(\"Full Left Right\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.LEFT_TO_RIGHT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )","var ui12 =","             UI.label(\"Full Right Left\").withStyle( it -> it","                 .fontFamily(\"Ubuntu\")","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .gradient( gradConf -> gradConf","                     .colors(Color.BLACK, Color.CYAN, Color.GREEN, Color.MAGENTA)","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .span(UI.Span.RIGHT_TO_LEFT)","                     .type(UI.GradientType.CONIC)","                     .focus(26,16)","                 )","             )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/conic-gradients-collage.png\", 99) > 99"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render noise gradients as component backgrounds using the style API. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the gradient of a component.\n                <br>\n                Here you can see an example of multiple labels with different \n                types noise gradient styles applied. <br>\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/noise-gradients-collage_2_.png\" alt=\"/snapshots/components/noise-gradients-collage_2_.png\" style=\"max-width: 50%;\" />\n\n                They are all stitched together into a collage so that you can see them \n                all at once and compare them with each other.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of labels:","code":["var ui1 =","             UI.label(\"Center Left Right\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.STOCHASTIC)","                     .offset(10, 15)","                 )","             )","var ui2 =","             UI.label(\"Center Right Left\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.SMOOTH_TOPOLOGY)","                     .offset(10, 15)","                 )","             )","var ui3 =","             UI.label(\"Center Top Bottom\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.HARD_TOPOLOGY)","                     .offset(10, 15)","                 )","             )","var ui4 =","             UI.label(\"Center Bottom TOP\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.SMOOTH_SPOTS)","                     .offset(10, 15)","                 )","             )","var ui5 =","             UI.label(\"Center LT to BR\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.HARD_SPOTS)","                     .offset(10, 15)","                 )","             )","var ui6 =","             UI.label(\"Center BR to LT\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"dark skyblue\", \"skyblue\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.TILES)","                     .offset(10, 15)","                 )","             )","var ui7 =","             UI.label(\"Center TR to BL\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"dark purple\", \"dark skyblue\", \"bright skyblue\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.FIBERS)","                     .offset(10, 15)","                 )","             )","var ui8 =","             UI.label(\"Center BL to TR\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"tan\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.GRAINY)","                     .offset(10, 15)","                 )","             )","var ui9 =","             UI.label(\"Full Top Bottom\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"white\")","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .function(UI.NoiseType.SPIRALS)","                     .offset(10, 15)","                 )","             )","var ui10 =","             UI.label(\"Full Bottom TOP\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"blue\", \"white\")","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .function(UI.NoiseType.HAZE)","                     .offset(10, 15)","                 )","             )","var ui11 =","             UI.label(\"Full Left Right\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\")","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .function(UI.NoiseType.CELLS)","                     .offset(10, 15)","                 )","             )","var ui12 =","             UI.label(\"Full Right Left\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"red\", \"navi\")","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .function(UI.NoiseType.RETRO)","                     .offset(10, 15)","                 )","             )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/noise-gradients-collage.png\", 99.8) > 99.8"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render noise gradients as component backgrounds using the style API. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the gradient of a component.\n                <br>\n                Here you can see an example of multiple labels with different \n                types noise gradient styles applied. <br>\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/noise-gradients-collage_2_.png\" alt=\"/snapshots/components/noise-gradients-collage_2_.png\" style=\"max-width: 50%;\" />\n\n                They are all stitched together into a collage so that you can see them \n                all at once and compare them with each other.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of labels:","code":["var ui1 =","             UI.label(\"Center Left Right\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.STOCHASTIC)","                     .offset(10, 15)","                 )","             )","var ui2 =","             UI.label(\"Center Right Left\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.SMOOTH_TOPOLOGY)","                     .offset(10, 15)","                 )","             )","var ui3 =","             UI.label(\"Center Top Bottom\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.HARD_TOPOLOGY)","                     .offset(10, 15)","                 )","             )","var ui4 =","             UI.label(\"Center Bottom TOP\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.SMOOTH_SPOTS)","                     .offset(10, 15)","                 )","             )","var ui5 =","             UI.label(\"Center LT to BR\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.HARD_SPOTS)","                     .offset(10, 15)","                 )","             )","var ui6 =","             UI.label(\"Center BR to LT\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"dark skyblue\", \"skyblue\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.TILES)","                     .offset(10, 15)","                 )","             )","var ui7 =","             UI.label(\"Center TR to BL\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"dark purple\", \"dark skyblue\", \"bright skyblue\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.FIBERS)","                     .offset(10, 15)","                 )","             )","var ui8 =","             UI.label(\"Center BL to TR\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"tan\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.GRAINY)","                     .offset(10, 15)","                 )","             )","var ui9 =","             UI.label(\"Full Top Bottom\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"white\")","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .function(UI.NoiseType.SPIRALS)","                     .offset(10, 15)","                 )","             )","var ui10 =","             UI.label(\"Full Bottom TOP\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"blue\", \"white\")","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .function(UI.NoiseType.HAZE)","                     .offset(10, 15)","                 )","             )","var ui11 =","             UI.label(\"Full Left Right\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\")","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .function(UI.NoiseType.CELLS)","                     .offset(10, 15)","                 )","             )","var ui12 =","             UI.label(\"Full Right Left\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"red\", \"navi\")","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .function(UI.NoiseType.RETRO)","                     .offset(10, 15)","                 )","             )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/noise-gradients-collage.png\", 99.8) > 99.8"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render noise gradients as component backgrounds using the style API. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the gradient of a component.\n                <br>\n                Here you can see an example of multiple labels with different \n                types noise gradient styles applied. <br>\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/noise-gradients-collage_2_.png\" alt=\"/snapshots/components/noise-gradients-collage_2_.png\" style=\"max-width: 50%;\" />\n\n                They are all stitched together into a collage so that you can see them \n                all at once and compare them with each other.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of labels:","code":["var ui1 =","             UI.label(\"Center Left Right\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.STOCHASTIC)","                     .offset(10, 15)","                 )","             )","var ui2 =","             UI.label(\"Center Right Left\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.SMOOTH_TOPOLOGY)","                     .offset(10, 15)","                 )","             )","var ui3 =","             UI.label(\"Center Top Bottom\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.HARD_TOPOLOGY)","                     .offset(10, 15)","                 )","             )","var ui4 =","             UI.label(\"Center Bottom TOP\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.SMOOTH_SPOTS)","                     .offset(10, 15)","                 )","             )","var ui5 =","             UI.label(\"Center LT to BR\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.HARD_SPOTS)","                     .offset(10, 15)","                 )","             )","var ui6 =","             UI.label(\"Center BR to LT\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"dark skyblue\", \"skyblue\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.TILES)","                     .offset(10, 15)","                 )","             )","var ui7 =","             UI.label(\"Center TR to BL\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"dark purple\", \"dark skyblue\", \"bright skyblue\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.FIBERS)","                     .offset(10, 15)","                 )","             )","var ui8 =","             UI.label(\"Center BL to TR\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"tan\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.GRAINY)","                     .offset(10, 15)","                 )","             )","var ui9 =","             UI.label(\"Full Top Bottom\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"white\")","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .function(UI.NoiseType.SPIRALS)","                     .offset(10, 15)","                 )","             )","var ui10 =","             UI.label(\"Full Bottom TOP\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"blue\", \"white\")","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .function(UI.NoiseType.HAZE)","                     .offset(10, 15)","                 )","             )","var ui11 =","             UI.label(\"Full Left Right\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\")","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .function(UI.NoiseType.CELLS)","                     .offset(10, 15)","                 )","             )","var ui12 =","             UI.label(\"Full Right Left\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"red\", \"navi\")","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .function(UI.NoiseType.RETRO)","                     .offset(10, 15)","                 )","             )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/noise-gradients-collage.png\", 99.8) > 99.8"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render noise gradients as component backgrounds using the style API. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                Inside your `Styler` lambdas you may access another sub style\n                for configuring the gradient of a component.\n                <br>\n                Here you can see an example of multiple labels with different \n                types noise gradient styles applied. <br>\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/noise-gradients-collage_2_.png\" alt=\"/snapshots/components/noise-gradients-collage_2_.png\" style=\"max-width: 50%;\" />\n\n                They are all stitched together into a collage so that you can see them \n                all at once and compare them with each other.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of labels:","code":["var ui1 =","             UI.label(\"Center Left Right\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.STOCHASTIC)","                     .offset(10, 15)","                 )","             )","var ui2 =","             UI.label(\"Center Right Left\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.SMOOTH_TOPOLOGY)","                     .offset(10, 15)","                 )","             )","var ui3 =","             UI.label(\"Center Top Bottom\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.HARD_TOPOLOGY)","                     .offset(10, 15)","                 )","             )","var ui4 =","             UI.label(\"Center Bottom TOP\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.SMOOTH_SPOTS)","                     .offset(10, 15)","                 )","             )","var ui5 =","             UI.label(\"Center LT to BR\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.HARD_SPOTS)","                     .offset(10, 15)","                 )","             )","var ui6 =","             UI.label(\"Center BR to LT\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"dark skyblue\", \"skyblue\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.TILES)","                     .offset(10, 15)","                 )","             )","var ui7 =","             UI.label(\"Center TR to BL\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"dark purple\", \"dark skyblue\", \"bright skyblue\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.FIBERS)","                     .offset(10, 15)","                 )","             )","var ui8 =","             UI.label(\"Center BL to TR\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"tan\", \"white\")","                     .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                     .function(UI.NoiseType.GRAINY)","                     .offset(10, 15)","                 )","             )","var ui9 =","             UI.label(\"Full Top Bottom\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"white\")","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .function(UI.NoiseType.SPIRALS)","                     .offset(10, 15)","                 )","             )","var ui10 =","             UI.label(\"Full Bottom TOP\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"blue\", \"white\")","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .function(UI.NoiseType.HAZE)","                     .offset(10, 15)","                 )","             )","var ui11 =","             UI.label(\"Full Left Right\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"lime\")","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .function(UI.NoiseType.CELLS)","                     .offset(10, 15)","                 )","             )","var ui12 =","             UI.label(\"Full Right Left\").withStyle( it -> it","                 .fontAlignment(UI.HorizontalAlignment.CENTER)","                 .fontFamily(\"Ubuntu\")","                 .border(2, Color.DARK_GRAY)","                 .size(120, 120)","                 .noise( conf -> conf","                     .colors(\"black\", \"red\", \"navi\")","                     .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                     .function(UI.NoiseType.RETRO)","                     .offset(10, 15)","                 )","             )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JLabel))","var image2 = Utility.renderSingleComponent(ui2.get(JLabel))","var image3 = Utility.renderSingleComponent(ui3.get(JLabel))","var image4 = Utility.renderSingleComponent(ui4.get(JLabel))","var image5 = Utility.renderSingleComponent(ui5.get(JLabel))","var image6 = Utility.renderSingleComponent(ui6.get(JLabel))","var image7 = Utility.renderSingleComponent(ui7.get(JLabel))","var image8 = Utility.renderSingleComponent(ui8.get(JLabel))","var image9 = Utility.renderSingleComponent(ui9.get(JLabel))","var image10 = Utility.renderSingleComponent(ui10.get(JLabel))","var image11 = Utility.renderSingleComponent(ui11.get(JLabel))","var image12 = Utility.renderSingleComponent(ui12.get(JLabel))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/noise-gradients-collage.png\", 99.8) > 99.8"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render custom text using the style API. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                The SwingTree style engine makes it possible to turn\n                any Swing component into a text component.\n                This is possible by configuring custom text sub style \n                inside your `Styler` lambdas exposed by the style API.\n                <br>\n                In this example we style the `JBox` type to render custom text.\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/custom-text-placement-collage_1_.png\" alt=\"/snapshots/components/custom-text-placement-collage_1_.png\" style=\"max-width: 50%;\" />\n\n                The rendered components are all stitched together into a collage so that you can see them\n                all at once and compare them with each other.\n\n                As you can see, there are a number of different placements for the text.\n                You may also style the font and the text color to your liking.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of `JBox` UIs:","code":["var ui1 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Center\").placement(UI.Placement.CENTER)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui2 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Top\").placement(UI.Placement.TOP)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui3 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Bottom\").placement(UI.Placement.BOTTOM)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui4 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Left\").placement(UI.Placement.LEFT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui5 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Right\").placement(UI.Placement.RIGHT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui6 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Top Left\").placement(UI.Placement.TOP_LEFT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui7 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Top Right\").placement(UI.Placement.TOP_RIGHT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui8 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Bottom Left\").placement(UI.Placement.BOTTOM_LEFT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui9 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Bottom Right\").placement(UI.Placement.BOTTOM_RIGHT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JBox))","var image2 = Utility.renderSingleComponent(ui2.get(JBox))","var image3 = Utility.renderSingleComponent(ui3.get(JBox))","var image4 = Utility.renderSingleComponent(ui4.get(JBox))","var image5 = Utility.renderSingleComponent(ui5.get(JBox))","var image6 = Utility.renderSingleComponent(ui6.get(JBox))","var image7 = Utility.renderSingleComponent(ui7.get(JBox))","var image8 = Utility.renderSingleComponent(ui8.get(JBox))","var image9 = Utility.renderSingleComponent(ui9.get(JBox))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/custom-text-placement-collage.png\", 99.6) > 99.6"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render custom text using the style API. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                The SwingTree style engine makes it possible to turn\n                any Swing component into a text component.\n                This is possible by configuring custom text sub style \n                inside your `Styler` lambdas exposed by the style API.\n                <br>\n                In this example we style the `JBox` type to render custom text.\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/custom-text-placement-collage_1_.png\" alt=\"/snapshots/components/custom-text-placement-collage_1_.png\" style=\"max-width: 50%;\" />\n\n                The rendered components are all stitched together into a collage so that you can see them\n                all at once and compare them with each other.\n\n                As you can see, there are a number of different placements for the text.\n                You may also style the font and the text color to your liking.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of `JBox` UIs:","code":["var ui1 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Center\").placement(UI.Placement.CENTER)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui2 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Top\").placement(UI.Placement.TOP)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui3 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Bottom\").placement(UI.Placement.BOTTOM)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui4 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Left\").placement(UI.Placement.LEFT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui5 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Right\").placement(UI.Placement.RIGHT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui6 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Top Left\").placement(UI.Placement.TOP_LEFT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui7 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Top Right\").placement(UI.Placement.TOP_RIGHT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui8 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Bottom Left\").placement(UI.Placement.BOTTOM_LEFT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui9 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Bottom Right\").placement(UI.Placement.BOTTOM_RIGHT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JBox))","var image2 = Utility.renderSingleComponent(ui2.get(JBox))","var image3 = Utility.renderSingleComponent(ui3.get(JBox))","var image4 = Utility.renderSingleComponent(ui4.get(JBox))","var image5 = Utility.renderSingleComponent(ui5.get(JBox))","var image6 = Utility.renderSingleComponent(ui6.get(JBox))","var image7 = Utility.renderSingleComponent(ui7.get(JBox))","var image8 = Utility.renderSingleComponent(ui8.get(JBox))","var image9 = Utility.renderSingleComponent(ui9.get(JBox))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/custom-text-placement-collage.png\", 99.6) > 99.6"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render custom text using the style API. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                The SwingTree style engine makes it possible to turn\n                any Swing component into a text component.\n                This is possible by configuring custom text sub style \n                inside your `Styler` lambdas exposed by the style API.\n                <br>\n                In this example we style the `JBox` type to render custom text.\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/custom-text-placement-collage_1_.png\" alt=\"/snapshots/components/custom-text-placement-collage_1_.png\" style=\"max-width: 50%;\" />\n\n                The rendered components are all stitched together into a collage so that you can see them\n                all at once and compare them with each other.\n\n                As you can see, there are a number of different placements for the text.\n                You may also style the font and the text color to your liking.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of `JBox` UIs:","code":["var ui1 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Center\").placement(UI.Placement.CENTER)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui2 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Top\").placement(UI.Placement.TOP)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui3 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Bottom\").placement(UI.Placement.BOTTOM)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui4 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Left\").placement(UI.Placement.LEFT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui5 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Right\").placement(UI.Placement.RIGHT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui6 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Top Left\").placement(UI.Placement.TOP_LEFT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui7 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Top Right\").placement(UI.Placement.TOP_RIGHT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui8 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Bottom Left\").placement(UI.Placement.BOTTOM_LEFT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui9 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Bottom Right\").placement(UI.Placement.BOTTOM_RIGHT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JBox))","var image2 = Utility.renderSingleComponent(ui2.get(JBox))","var image3 = Utility.renderSingleComponent(ui3.get(JBox))","var image4 = Utility.renderSingleComponent(ui4.get(JBox))","var image5 = Utility.renderSingleComponent(ui5.get(JBox))","var image6 = Utility.renderSingleComponent(ui6.get(JBox))","var image7 = Utility.renderSingleComponent(ui7.get(JBox))","var image8 = Utility.renderSingleComponent(ui8.get(JBox))","var image9 = Utility.renderSingleComponent(ui9.get(JBox))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/custom-text-placement-collage.png\", 99.6) > 99.6"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render custom text using the style API. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                The SwingTree style engine makes it possible to turn\n                any Swing component into a text component.\n                This is possible by configuring custom text sub style \n                inside your `Styler` lambdas exposed by the style API.\n                <br>\n                In this example we style the `JBox` type to render custom text.\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/custom-text-placement-collage_1_.png\" alt=\"/snapshots/components/custom-text-placement-collage_1_.png\" style=\"max-width: 50%;\" />\n\n                The rendered components are all stitched together into a collage so that you can see them\n                all at once and compare them with each other.\n\n                As you can see, there are a number of different placements for the text.\n                You may also style the font and the text color to your liking.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of `JBox` UIs:","code":["var ui1 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Center\").placement(UI.Placement.CENTER)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui2 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Top\").placement(UI.Placement.TOP)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui3 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Bottom\").placement(UI.Placement.BOTTOM)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui4 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Left\").placement(UI.Placement.LEFT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui5 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Right\").placement(UI.Placement.RIGHT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui6 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Top Left\").placement(UI.Placement.TOP_LEFT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui7 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Top Right\").placement(UI.Placement.TOP_RIGHT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui8 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Bottom Left\").placement(UI.Placement.BOTTOM_LEFT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )","var ui9 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(12, new Color(50,100,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                     .content(\"Bottom Right\").placement(UI.Placement.BOTTOM_RIGHT)","                     .font( f -> f","                         .color(\"navy\")","                         .family(\"Ubuntu\")","                     )","                )","            )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JBox))","var image2 = Utility.renderSingleComponent(ui2.get(JBox))","var image3 = Utility.renderSingleComponent(ui3.get(JBox))","var image4 = Utility.renderSingleComponent(ui4.get(JBox))","var image5 = Utility.renderSingleComponent(ui5.get(JBox))","var image6 = Utility.renderSingleComponent(ui6.get(JBox))","var image7 = Utility.renderSingleComponent(ui7.get(JBox))","var image8 = Utility.renderSingleComponent(ui8.get(JBox))","var image9 = Utility.renderSingleComponent(ui9.get(JBox))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/custom-text-placement-collage.png\", 99.6) > 99.6"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render custom text with a custom placement and placement boundary. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                The SwingTree style engine makes it possible to turn\n                any Swing component into a text component.\n                This is possible by configuring custom text sub style \n                inside your `Styler` lambdas exposed by the style API.\n                <br>\n                In this example we style the `JBox` type to render custom text\n                with a custom placement and placement boundary.\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/custom-text-boundary-placement-collage_1_.png\" alt=\"/snapshots/components/custom-text-boundary-placement-collage_1_.png\" style=\"max-width: 50%;\" />\n\n                The rendered components are all stitched together into a collage so that you can see them\n                all at once and compare them with each other.\n\n                As you can see, there are a number of different placements for the text.\n                You may also style the font and the text color to your liking.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of `JBox` UIs:","code":["var ui1 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Top Left\")","                    .placement(UI.Placement.TOP_LEFT)","                    .placementBoundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                    .font( f -> f","                        .color(\"red\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui2 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Top\")","                    .placement(UI.Placement.TOP)","                    .placementBoundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                    .font( f -> f","                        .color(\"green\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui3 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Top Right\")","                    .placement(UI.Placement.TOP_RIGHT)","                    .placementBoundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                    .font( f -> f","                        .color(\"blue\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui4 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Left\").placement(UI.Placement.LEFT)","                    .placementBoundary(UI.ComponentBoundary.BORDER_TO_INTERIOR)","                    .font( f -> f","                        .color(\"tan\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui5 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Center\").placement(UI.Placement.CENTER)","                    .placementBoundary(UI.ComponentBoundary.BORDER_TO_INTERIOR)","                    .font( f -> f","                        .color(\"magenta\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui6 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Right\").placement(UI.Placement.RIGHT)","                    .placementBoundary(UI.ComponentBoundary.BORDER_TO_INTERIOR)","                    .font( f -> f","                        .color(\"oak\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui7 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Bottom Left\").placement(UI.Placement.BOTTOM_LEFT)","                    .placementBoundary(UI.ComponentBoundary.EXTERIOR_TO_BORDER)","                    .font( f -> f","                        .color(\"navy\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui8 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Bottom\")","                    .placement(UI.Placement.BOTTOM)","                    .placementBoundary(UI.ComponentBoundary.EXTERIOR_TO_BORDER)","                    .font( f -> f","                        .color(\"dark cyan\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui9 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Bottom Right\")","                    .placement(UI.Placement.BOTTOM_RIGHT)","                    .placementBoundary(UI.ComponentBoundary.EXTERIOR_TO_BORDER)","                    .font( f -> f","                        .color(\"dark purple\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JBox))","var image2 = Utility.renderSingleComponent(ui2.get(JBox))","var image3 = Utility.renderSingleComponent(ui3.get(JBox))","var image4 = Utility.renderSingleComponent(ui4.get(JBox))","var image5 = Utility.renderSingleComponent(ui5.get(JBox))","var image6 = Utility.renderSingleComponent(ui6.get(JBox))","var image7 = Utility.renderSingleComponent(ui7.get(JBox))","var image8 = Utility.renderSingleComponent(ui8.get(JBox))","var image9 = Utility.renderSingleComponent(ui9.get(JBox))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/custom-text-boundary-placement-collage.png\", 98.5) > 98.5"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render custom text with a custom placement and placement boundary. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                The SwingTree style engine makes it possible to turn\n                any Swing component into a text component.\n                This is possible by configuring custom text sub style \n                inside your `Styler` lambdas exposed by the style API.\n                <br>\n                In this example we style the `JBox` type to render custom text\n                with a custom placement and placement boundary.\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/custom-text-boundary-placement-collage_1_.png\" alt=\"/snapshots/components/custom-text-boundary-placement-collage_1_.png\" style=\"max-width: 50%;\" />\n\n                The rendered components are all stitched together into a collage so that you can see them\n                all at once and compare them with each other.\n\n                As you can see, there are a number of different placements for the text.\n                You may also style the font and the text color to your liking.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of `JBox` UIs:","code":["var ui1 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Top Left\")","                    .placement(UI.Placement.TOP_LEFT)","                    .placementBoundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                    .font( f -> f","                        .color(\"red\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui2 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Top\")","                    .placement(UI.Placement.TOP)","                    .placementBoundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                    .font( f -> f","                        .color(\"green\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui3 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Top Right\")","                    .placement(UI.Placement.TOP_RIGHT)","                    .placementBoundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                    .font( f -> f","                        .color(\"blue\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui4 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Left\").placement(UI.Placement.LEFT)","                    .placementBoundary(UI.ComponentBoundary.BORDER_TO_INTERIOR)","                    .font( f -> f","                        .color(\"tan\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui5 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Center\").placement(UI.Placement.CENTER)","                    .placementBoundary(UI.ComponentBoundary.BORDER_TO_INTERIOR)","                    .font( f -> f","                        .color(\"magenta\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui6 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Right\").placement(UI.Placement.RIGHT)","                    .placementBoundary(UI.ComponentBoundary.BORDER_TO_INTERIOR)","                    .font( f -> f","                        .color(\"oak\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui7 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Bottom Left\").placement(UI.Placement.BOTTOM_LEFT)","                    .placementBoundary(UI.ComponentBoundary.EXTERIOR_TO_BORDER)","                    .font( f -> f","                        .color(\"navy\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui8 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Bottom\")","                    .placement(UI.Placement.BOTTOM)","                    .placementBoundary(UI.ComponentBoundary.EXTERIOR_TO_BORDER)","                    .font( f -> f","                        .color(\"dark cyan\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui9 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Bottom Right\")","                    .placement(UI.Placement.BOTTOM_RIGHT)","                    .placementBoundary(UI.ComponentBoundary.EXTERIOR_TO_BORDER)","                    .font( f -> f","                        .color(\"dark purple\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JBox))","var image2 = Utility.renderSingleComponent(ui2.get(JBox))","var image3 = Utility.renderSingleComponent(ui3.get(JBox))","var image4 = Utility.renderSingleComponent(ui4.get(JBox))","var image5 = Utility.renderSingleComponent(ui5.get(JBox))","var image6 = Utility.renderSingleComponent(ui6.get(JBox))","var image7 = Utility.renderSingleComponent(ui7.get(JBox))","var image8 = Utility.renderSingleComponent(ui8.get(JBox))","var image9 = Utility.renderSingleComponent(ui9.get(JBox))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/custom-text-boundary-placement-collage.png\", 98.5) > 98.5"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render custom text with a custom placement and placement boundary. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                The SwingTree style engine makes it possible to turn\n                any Swing component into a text component.\n                This is possible by configuring custom text sub style \n                inside your `Styler` lambdas exposed by the style API.\n                <br>\n                In this example we style the `JBox` type to render custom text\n                with a custom placement and placement boundary.\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/custom-text-boundary-placement-collage_1_.png\" alt=\"/snapshots/components/custom-text-boundary-placement-collage_1_.png\" style=\"max-width: 50%;\" />\n\n                The rendered components are all stitched together into a collage so that you can see them\n                all at once and compare them with each other.\n\n                As you can see, there are a number of different placements for the text.\n                You may also style the font and the text color to your liking.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of `JBox` UIs:","code":["var ui1 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Top Left\")","                    .placement(UI.Placement.TOP_LEFT)","                    .placementBoundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                    .font( f -> f","                        .color(\"red\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui2 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Top\")","                    .placement(UI.Placement.TOP)","                    .placementBoundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                    .font( f -> f","                        .color(\"green\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui3 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Top Right\")","                    .placement(UI.Placement.TOP_RIGHT)","                    .placementBoundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                    .font( f -> f","                        .color(\"blue\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui4 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Left\").placement(UI.Placement.LEFT)","                    .placementBoundary(UI.ComponentBoundary.BORDER_TO_INTERIOR)","                    .font( f -> f","                        .color(\"tan\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui5 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Center\").placement(UI.Placement.CENTER)","                    .placementBoundary(UI.ComponentBoundary.BORDER_TO_INTERIOR)","                    .font( f -> f","                        .color(\"magenta\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui6 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Right\").placement(UI.Placement.RIGHT)","                    .placementBoundary(UI.ComponentBoundary.BORDER_TO_INTERIOR)","                    .font( f -> f","                        .color(\"oak\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui7 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Bottom Left\").placement(UI.Placement.BOTTOM_LEFT)","                    .placementBoundary(UI.ComponentBoundary.EXTERIOR_TO_BORDER)","                    .font( f -> f","                        .color(\"navy\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui8 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Bottom\")","                    .placement(UI.Placement.BOTTOM)","                    .placementBoundary(UI.ComponentBoundary.EXTERIOR_TO_BORDER)","                    .font( f -> f","                        .color(\"dark cyan\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui9 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Bottom Right\")","                    .placement(UI.Placement.BOTTOM_RIGHT)","                    .placementBoundary(UI.ComponentBoundary.EXTERIOR_TO_BORDER)","                    .font( f -> f","                        .color(\"dark purple\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JBox))","var image2 = Utility.renderSingleComponent(ui2.get(JBox))","var image3 = Utility.renderSingleComponent(ui3.get(JBox))","var image4 = Utility.renderSingleComponent(ui4.get(JBox))","var image5 = Utility.renderSingleComponent(ui5.get(JBox))","var image6 = Utility.renderSingleComponent(ui6.get(JBox))","var image7 = Utility.renderSingleComponent(ui7.get(JBox))","var image8 = Utility.renderSingleComponent(ui8.get(JBox))","var image9 = Utility.renderSingleComponent(ui9.get(JBox))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/custom-text-boundary-placement-collage.png\", 98.5) > 98.5"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Render custom text with a custom placement and placement boundary. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                The SwingTree style engine makes it possible to turn\n                any Swing component into a text component.\n                This is possible by configuring custom text sub style \n                inside your `Styler` lambdas exposed by the style API.\n                <br>\n                In this example we style the `JBox` type to render custom text\n                with a custom placement and placement boundary.\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/custom-text-boundary-placement-collage_1_.png\" alt=\"/snapshots/components/custom-text-boundary-placement-collage_1_.png\" style=\"max-width: 50%;\" />\n\n                The rendered components are all stitched together into a collage so that you can see them\n                all at once and compare them with each other.\n\n                As you can see, there are a number of different placements for the text.\n                You may also style the font and the text color to your liking.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"We pass the following style rules to a number of `JBox` UIs:","code":["var ui1 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Top Left\")","                    .placement(UI.Placement.TOP_LEFT)","                    .placementBoundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                    .font( f -> f","                        .color(\"red\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui2 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Top\")","                    .placement(UI.Placement.TOP)","                    .placementBoundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                    .font( f -> f","                        .color(\"green\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui3 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Top Right\")","                    .placement(UI.Placement.TOP_RIGHT)","                    .placementBoundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                    .font( f -> f","                        .color(\"blue\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui4 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Left\").placement(UI.Placement.LEFT)","                    .placementBoundary(UI.ComponentBoundary.BORDER_TO_INTERIOR)","                    .font( f -> f","                        .color(\"tan\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui5 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Center\").placement(UI.Placement.CENTER)","                    .placementBoundary(UI.ComponentBoundary.BORDER_TO_INTERIOR)","                    .font( f -> f","                        .color(\"magenta\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui6 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Right\").placement(UI.Placement.RIGHT)","                    .placementBoundary(UI.ComponentBoundary.BORDER_TO_INTERIOR)","                    .font( f -> f","                        .color(\"oak\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui7 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Bottom Left\").placement(UI.Placement.BOTTOM_LEFT)","                    .placementBoundary(UI.ComponentBoundary.EXTERIOR_TO_BORDER)","                    .font( f -> f","                        .color(\"navy\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui8 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Bottom\")","                    .placement(UI.Placement.BOTTOM)","                    .placementBoundary(UI.ComponentBoundary.EXTERIOR_TO_BORDER)","                    .font( f -> f","                        .color(\"dark cyan\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )","var ui9 =","            UI.box().withStyle( it -> it","                .margin(12)","                .padding(12)","                .border(6, new Color(100,50,220,100))","                .size(142, 110)","                .fontBold(true)","                .text( conf -> conf","                    .content(\"Bottom Right\")","                    .placement(UI.Placement.BOTTOM_RIGHT)","                    .placementBoundary(UI.ComponentBoundary.EXTERIOR_TO_BORDER)","                    .font( f -> f","                        .color(\"dark purple\")","                        .family(\"Ubuntu\")","                        .size(13)","                    )","                )","            )"]},

        {"kind":"when","text":"We render the UIs into BufferedImage instances.","code":["var image1 = Utility.renderSingleComponent(ui1.get(JBox))","var image2 = Utility.renderSingleComponent(ui2.get(JBox))","var image3 = Utility.renderSingleComponent(ui3.get(JBox))","var image4 = Utility.renderSingleComponent(ui4.get(JBox))","var image5 = Utility.renderSingleComponent(ui5.get(JBox))","var image6 = Utility.renderSingleComponent(ui6.get(JBox))","var image7 = Utility.renderSingleComponent(ui7.get(JBox))","var image8 = Utility.renderSingleComponent(ui8.get(JBox))","var image9 = Utility.renderSingleComponent(ui9.get(JBox))","var images = new BufferedImage[] {image1, image2, image3, image4, image5, image6, image7, image8, image9}"]},

        {"kind":"then","text":"The collage of images is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(images, \"components/custom-text-boundary-placement-collage.png\", 98.5) > 98.5"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["1f","1.25f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A border can have different colors on each side.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n                The border of a SwingTree style consists of four parts:\n                the top, right, bottom, and left sides, which are divided cleanily\n                by the diagonal lines of the rectengular bounds of a component.\n                Each of these sides can have a different color  \n                and thickness.\n                <br>\n                In this example we style a `JBox` type to with a border that \n                has thick border and different colors on each side.\n\n                <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/components/thick-border-with-different-colors.png\" alt=\"/snapshots/components/thick-border-with-different-colors.png\" style=\"max-width: 50%;\" />\n\n                As you can see, the border of the `JBox` type has a different color\n                on each side and a thickness of 6-12 pixels.\n                Note that they are almost triangular in shape, \n                which is due to the diagonal shreshold lines of the \n                rectangular bounds of the component.\n            "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(scale)"]},

        {"kind":"and","text":"We pass the following style rules to a `JBox` UI:","code":["var ui =","            UI.box().withStyle( it -> it","                .margin(4)","                .padding(2)","                .size(12+20+20, 12+18)","                .borderAt(UI.Edge.TOP, 3, UI.Color.RED.withOpacity(0.5))","                .borderAt(UI.Edge.RIGHT, 6, \"green\")","                .borderAt(UI.Edge.BOTTOM, 15, UI.Color.LIGHTBLUE)","                .borderAt(UI.Edge.LEFT, 14, \"light magenta\")","            )"]},

        {"kind":"when","text":"We render the UI into a BufferedImage instance.","code":["var image = Utility.renderSingleComponent(ui.get(JBox))"]},

        {"kind":"then","text":"The image is as expected (compared with the snapshot above).","code":["Utility.similarityBetween(image, \"components/thick-border-with-different-colors.png\", 99.6) > 99.6"]},

        {"kind":"where","text":"We test this using the following scaling values:","code":{"scale":["5.5f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
