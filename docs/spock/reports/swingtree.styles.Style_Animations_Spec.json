{
  "className":"swingtree.styles.Style_Animations_Spec",
  "title":"Style Animations",
  "narrative":"Styles in SwingTree are based on a functional style engine\n    which reevaluates your styles whenever your component is\n    repainted. \n    This makes them a perfect fit for animations.\n    Continue reading to learn how to animate your styles.",
  "subjects":[],
  "statistics":{
    "runs":"3",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"An `onMouseClick` event style animation is only temporary.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A vanilla component created through one of the many `UI` factory\n            methods will not have any animations applied to it.\n            However, once you apply a style animation to it, it will\n            temporarily change the component to support your animated style.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple `JLabel` UI component with a style animation.","code":["var label = UI.label(\"Click me!\")","            .onMouseClick(it ->","                it.animateFor(1, TimeUnit.MINUTES, state ->","                    it.style(state, style -> style","                        .borderWidth((int) (10 * state.cycle()))","                        .borderColor(new Color(0, 100,200))","                        .backgroundColor(new Color(255, 100, 0, (int) (255 * state.cycle())))","                    )","                )","            )"]},

        {"kind":"expect","text":"\n            When the user clicks on the label, the border width of the label\n            will be animated from 0 to 10 over the course of 100 milliseconds\n            and the background color will be animated from transparent to orange.\n            But initially the label will not have any border or background color.\n            So let's check that.\n        ","code":["label.component.border == null","label.component.background == new Color(238, 238, 238) // default background color of a JLabel","label.component.foreground == new Color(51, 51, 51) // default foreground color of a JLabel","label.component.getUI() instanceof MetalLabelUI"]},

        {"kind":"when","text":"We simulate a user click event programmatically","code":["label.component.dispatchEvent(new MouseEvent(label.component, MouseEvent.MOUSE_CLICKED, System.currentTimeMillis(), 0, 0, 0, 1, false))","Thread.sleep(100)","UI.sync()","label.component.paint(new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB).createGraphics())"]},

        {"kind":"then","text":"The label will have a border and a background color.","code":["label.component.border != null","label.component.background != new Color(238, 238, 238)","label.component.foreground == new Color(51, 51, 51)","label.component.getUI() instanceof MetalLabelUI"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"SwingTree will uninstall any custom border after an animation has completed.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A vanilla component created through one of the many `UI` factory\n            methods will not have any animations applied to it.\n            However, once you apply a style animation to it, it will\n            temporarily change the component to support your animated style.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple `JLabel` UI component with a style animation.","code":["var label = UI.label(\"Click me!\")","            .onMouseClick(it ->","                it.animateFor(1, TimeUnit.SECONDS, state ->","                    it.style(state, style -> style","                        .borderWidth((int) (10 * state.cycle()))","                        .backgroundColor(new Color(255, 100, 0, (int) (255 * state.cycle())))","                    )","                )","            )"]},

        {"kind":"expect","text":"It has the expected initial state.","code":["label.component.border == null","label.component.background == new Color(238, 238, 238) // default background color of a JLabel","label.component.foreground == new Color(51, 51, 51) // default foreground color of a JLabel","label.component.getUI() instanceof MetalLabelUI"]},

        {"kind":"when","text":"We simulate a user click event programmatically","code":["label.component.dispatchEvent(new MouseEvent(label.component, MouseEvent.MOUSE_CLICKED, System.currentTimeMillis(), 0, 0, 0, 1, false))","Thread.sleep(50)","UI.sync()","label.component.paint(new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB).createGraphics())"]},

        {"kind":"then","text":"\n            The border will have a custom border installed.\n        ","code":["label.component.border != null","label.component.background != new Color(238, 238, 238)","label.component.foreground == new Color(51, 51, 51)","label.component.getUI() instanceof MetalLabelUI"]},

        {"kind":"when","text":"We wait for the animation to end...","code":["Thread.sleep(2000)","UI.sync()","label.component.paint(new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB).createGraphics())"]},

        {"kind":"then","text":"\n            The border will have been uninstalled.\n        ","code":["label.component.border == null","label.component.background == new Color(238, 238, 238)","label.component.foreground == new Color(51, 51, 51)","label.component.getUI() instanceof MetalLabelUI"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Advanced style animations will override the Look and Feel of a component temporarily",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A vanilla component created through one of the many `UI` factory\n            methods will not have any animations applied to it.\n            However, once you apply a style animation to it, it will\n            temporarily change the component to support your animated style.\n            For very advanced styles, this may mean that the component\n            will temporarily override the Look and Feel of the component.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple `JButton` UI component with a style animation.","code":["var button = UI.button(\"Click me!\")","            .onClick(it ->","                it.animateFor(300, TimeUnit.MILLISECONDS, state ->","                    it.style(state, style -> style","                        .border((int) (12 * state.cycle()), Color.RED)","                        .backgroundColor(new Color(255, 100, 0, (int) (255 * state.cycle())))","                        .margin(12)","                        .foundationColor(new Color(0, 100, 200))","                        .painter(UI.Layer.BACKGROUND, g2d -> {","                            boolean isMouseRollover = style.component().getModel().isRollover()","                            // We draw a custom gradient:","                            var gradient = new GradientPaint(","                                0, 0, isMouseRollover ? Color.RED : Color.BLUE,","                                    style.component().getWidth(), style.component().getHeight(), isMouseRollover ? Color.BLUE : Color.RED","                            )","                            g2d.setPaint(gradient)","                            g2d.fillRect(0, 0, it.component.getWidth(), it.component.getHeight())","                        })","                    )","                )","            )"]},

        {"kind":"expect","text":"\n            Initially the button will the default button border and background color.\n        ","code":["button.component.border instanceof CompoundBorder","button.component.background == new Color(238, 238, 238) // default background color of a JButton","button.component.foreground == new Color(51, 51, 51) // default foreground color of a JButton","button.component.getUI() instanceof MetalButtonUI"]},

        {"kind":"when","text":"We simulate a user click event programmatically","code":["button.component.doClick()","Thread.sleep(100)","UI.sync()","UI.runNow({button.component.paint(new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB).createGraphics())})"]},

        {"kind":"then","text":"The label will have a border and a background color.","code":["!(button.component.border instanceof CompoundBorder)","button.component.background != new Color(238, 238, 238)","button.component.foreground == new Color(51, 51, 51)","!(button.component.getUI() instanceof MetalButtonUI)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
