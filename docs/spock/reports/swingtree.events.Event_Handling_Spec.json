{
  "className":"swingtree.events.Event_Handling_Spec",
  "title":"Registering Event Handlers",
  "narrative":"In this specification you can see how to register different kinds of event handlers\n    on Swing components.",
  "subjects":[],
  "statistics":{
    "runs":"13",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.245 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"The \"onChange\" event handlers are triggered in the same order as they were registered.",
      "result":"PASS",
      "duration":"0.072 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This type of event occurs when the state of the radio button changes.\n            Internally this is based on an `ItemListener` which\n            will be triggered by the radio button and then call \n            your Swing-Tree event handler implementation.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A simple list where handlers are going to leave a trace.","code":["var trace = []"]},

        {"kind":"and","text":"A simple radio button UI.","code":["var ui =","        UI.radioButton(\"CLICK ME\")","        .onChange( it -> trace.add(\"1\") )","        .onChange( it -> trace.add(\"2\") )","        .onChange( it -> trace.add(\"3\") )","        .onChange( it -> trace.add(\"4\") )","        .onChange( it -> trace.add(\"5\") )","        .onChange( it -> trace.add(\"6\") )","        .onChange( it -> trace.add(\"7\") )"]},

        {"kind":"when","text":"The button is clicked.","code":["ui.component.doClick()"]},

        {"kind":"then","text":"The handlers are triggered in the same order as they were registered.","code":["trace == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"onClick\" event handlers are triggered in the same order as they were registered.",
      "result":"PASS",
      "duration":"0.072 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This type of event occurs when the user clicks the button.\n            Internally this is based on an `ActionListener` which\n            will be triggered by the button and then call \n            your Swing-Tree event handler implementation.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A simple list where handlers are going to leave a trace.","code":["var trace = []"]},

        {"kind":"and","text":"A simple button UI.","code":["var ui =","        UI.button(\"CLICK ME\")","        .onClick( it -> trace.add(\"1\") )","        .onClick( it -> trace.add(\"2\") )","        .onClick( it -> trace.add(\"3\") )","        .onClick( it -> trace.add(\"4\") )","        .onClick( it -> trace.add(\"5\") )","        .onClick( it -> trace.add(\"6\") )","        .onClick( it -> trace.add(\"7\") )"]},

        {"kind":"when","text":"The button is clicked.","code":["ui.component.doClick()"]},

        {"kind":"then","text":"The handlers are triggered in the same order as they were registered.","code":["trace == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"onResize\" event handlers are triggered in the same order as they were registered.",
      "result":"PASS",
      "duration":"0.020 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This type of event occurs when the user changes the size of your component.\n            Internally this is based on an `ComponentListener` which\n            will be triggered by the window and then call \n            your Swing-Tree event handler implementation.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A simple list where handlers are going to leave a trace.","code":["var trace = []"]},

        {"kind":"and","text":"A simple text field UI.","code":["var ui =","        UI.formattedTextField(\"Some content...\")","        .onResize( it -> trace.add(\"1\") )","        .onResize( it -> trace.add(\"2\") )","        .onResize( it -> trace.add(\"3\") )","        .onResize( it -> trace.add(\"4\") )","        .onResize( it -> trace.add(\"5\") )","        .onResize( it -> trace.add(\"6\") )","        .onResize( it -> trace.add(\"7\") )"]},

        {"kind":"when","text":"The text field is resized.","code":["ui.component.setSize(100, 100)","UI.sync()"]},

        {"kind":"then","text":"The handlers are triggered in the same order as they were registered.","code":["trace == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"onShown\" event handlers are triggered in the same order as they were registered.",
      "result":"PASS",
      "duration":"0.007 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This type of event occurs when the component is made visible.\n            Internally this is based on an `ComponentListener` which\n            will for example be triggered by the `setVisible(boolean)` method\n           and then call your Swing-Tree event handler implementation.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A simple list where handlers are going to leave a trace.","code":["var trace = []"]},

        {"kind":"and","text":"A simple text area UI.","code":["var ui =","        UI.textArea(\"Some content...\")","        .onShown( it -> trace.add(\"1\") )","        .onShown( it -> trace.add(\"2\") )","        .onShown( it -> trace.add(\"3\") )","        .onShown( it -> trace.add(\"4\") )","        .onShown( it -> trace.add(\"5\") )","        .onShown( it -> trace.add(\"6\") )","        .onShown( it -> trace.add(\"7\") )"]},

        {"kind":"when","text":"The text area is set to visible.","code":["ui.component.setVisible(true)","UI.sync()"]},

        {"kind":"then","text":"Nothing happens because the text area is already shown.","code":["trace == []"]},

        {"kind":"when","text":"The text area is set to invisible and then visible again.","code":["ui.component.setVisible(false)","ui.component.setVisible(true)","UI.sync()"]},

        {"kind":"then","text":"The handlers are triggered in the same order as they were registered.","code":["trace == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"onEnter\" event handlers are triggered in the same order as they were registered.",
      "result":"PASS",
      "duration":"0.006 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This type of event occurs when the user presses the enter key.\n            Internally this is actually based on an `ActionListener` which\n            will be triggered by the text field and then call\n            your Swing-Tree event handler implementation.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A simple list where handlers are going to leave a trace.","code":["var trace = []"]},

        {"kind":"and","text":"A simple text field UI.","code":["var ui =","        UI.textField(\"Some content...\")","        .onEnter( it -> trace.add(\"1\") )","        .onEnter( it -> trace.add(\"2\") )","        .onEnter( it -> trace.add(\"3\") )","        .onEnter( it -> trace.add(\"4\") )","        .onEnter( it -> trace.add(\"5\") )","        .onEnter( it -> trace.add(\"6\") )","        .onEnter( it -> trace.add(\"7\") )"]},

        {"kind":"when","text":"Something is entered in the text field.","code":["ui.component.setText(\"Some other content...\")","ui.component.postActionEvent()","UI.sync()"]},

        {"kind":"then","text":"The handlers are triggered in the same order as they were registered.","code":["trace == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"In a formatted text field, the \"onEnter\" event handlers are triggered in the same order as they were registered.",
      "result":"PASS",
      "duration":"0.006 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This type of event occurs when the user presses the enter key.\n            Internally this is actually based on an `ActionListener` which\n            will be triggered by the formatted text field and then call\n            your Swing-Tree event handler implementation.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A simple list where handlers are going to leave a trace.","code":["var trace = []"]},

        {"kind":"and","text":"A simple text field UI.","code":["var ui =","        UI.formattedTextField(\"Some content...\")","        .onEnter( it -> trace.add(\"1\") )","        .onEnter( it -> trace.add(\"2\") )","        .onEnter( it -> trace.add(\"3\") )","        .onEnter( it -> trace.add(\"4\") )","        .onEnter( it -> trace.add(\"5\") )","        .onEnter( it -> trace.add(\"6\") )","        .onEnter( it -> trace.add(\"7\") )"]},

        {"kind":"when","text":"Something is entered in the text field.","code":["ui.component.setText(\"Some other content...\")","ui.component.postActionEvent()","UI.sync()"]},

        {"kind":"then","text":"The handlers are triggered in the same order as they were registered.","code":["trace == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"onSelection\" event handlers of a combo box are triggered in the same order as they were registered.",
      "result":"PASS",
      "duration":"0.011 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This type of event occurs when the user selects an item in the combo box.\n            Internally this is actually based on an `ActionListener` which\n            will be triggered by the combo box and then call\n            your Swing-Tree event handler implementation.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A simple list where handlers are going to leave a trace.","code":["var trace = []"]},

        {"kind":"and","text":"A simple combo box UI.","code":["var ui =","        UI.comboBox(\"Item 1\", \"Item 2\", \"Item 3\")","        .onSelection( it -> trace.add(\"1\") )","        .onSelection( it -> trace.add(\"2\") )","        .onSelection( it -> trace.add(\"3\") )","        .onSelection( it -> trace.add(\"4\") )","        .onSelection( it -> trace.add(\"5\") )","        .onSelection( it -> trace.add(\"6\") )","        .onSelection( it -> trace.add(\"7\") )"]},

        {"kind":"when","text":"An item is selected in the combo box.","code":["ui.component.setSelectedIndex(1)","UI.sync()"]},

        {"kind":"then","text":"The handlers are triggered in the same order as they were registered.","code":["trace == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"onContentChange\" event handler of a text area is triggered when the text area content changes.",
      "result":"PASS",
      "duration":"0.007 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This type of event occurs when the user changes the content of the text area.\n            Internally this is actually based on a `DocumentListener`\n            which will forward any one of its events to your `onContentChange` handler.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A simple text area UI.","code":["var ui = UI.textArea(\"Some content...\")"]},

        {"kind":"and","text":"A simple list where handlers are going to leave a trace.","code":["var trace = []"]},

        {"kind":"and","text":"A handler that records the text area content.","code":["ui.onContentChange( it -> trace.add(it.component.text) )"]},

        {"kind":"when","text":"The text area content is changed.","code":["UI.runNow { ui.component.setText(\"Some other content...\") }","UI.sync()"]},

        {"kind":"then","text":"The handler is triggered.","code":["trace == [\"\", \"Some other content...\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"onTextChange\" event handler of a text area is triggered when the text area content changes.",
      "result":"PASS",
      "duration":"0.004 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This type of event occurs when the user changes the text of the text area.\n            Internally this is actually based on a `DocumentListener`\n            which will forward the `insertUpdate` and `removeUpdate` method calls \n            to your `onTextChange` handler.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A simple text area UI.","code":["var ui = UI.textArea(\"Some content...\")"]},

        {"kind":"and","text":"A simple list where handlers are going to leave a trace.","code":["var trace = []"]},

        {"kind":"and","text":"A handler that records the text area content.","code":["ui.onTextChange( it -> trace.add(it.component.text) )"]},

        {"kind":"when","text":"The text area content is changed.","code":["UI.runNow { ui.component.setText(\"Some other content...\") }","UI.sync()"]},

        {"kind":"then","text":"The handler is triggered.","code":["trace == [\"\", \"Some other content...\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"onTextInsert\" event handler of a text area is triggered when the text area content changes.",
      "result":"PASS",
      "duration":"0.009 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This type of event occurs when the user inserts text into the text area.\n            Internally this is actually based on a `DocumentListener`\n            which will forward the `insertUpdate` method call \n            to your `onTextInsert` handler.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A simple text area UI.","code":["var ui = UI.textArea(\"Some content...\")"]},

        {"kind":"and","text":"A simple list where handlers are going to leave a trace.","code":["var trace1 = []","var trace2 = []"]},

        {"kind":"and","text":"A handler that records the text area content.","code":["ui.onTextInsert( it -> {","    trace1.add(it.component.text)","    trace2.add(it.textToBeInserted)","})"]},

        {"kind":"when","text":"The text area content is changed.","code":["UI.runNow { ui.component.document.insertString(5, \"other \", null) }","UI.sync()"]},

        {"kind":"then","text":"The handler is not triggered.","code":["trace1 == [\"Some content...\"]","trace2 == [\"other \"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"onTextRemove\" event handler of a text area is triggered when the text area content changes.",
      "result":"PASS",
      "duration":"0.006 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This type of event occurs when the user changes the content of the text area.\n            Internally this is actually based on a `DocumentListener`\n            which will forward the `removeUpdate` method call \n            to your `onTextRemove` handler.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A simple text area UI.","code":["var ui = UI.textArea(\"Some long content...\")"]},

        {"kind":"and","text":"A simple list where handlers are going to leave a trace.","code":["var trace1 = []","var trace2 = []"]},

        {"kind":"and","text":"A handler that records the text area content.","code":["ui.onTextRemove( it -> {","    trace1.add(it.component.text)","    trace2.add(it.textToBeRemoved)","})"]},

        {"kind":"when","text":"The text area content is changed.","code":["UI.runNow { ui.component.document.remove(5, 5) }","UI.sync()"]},

        {"kind":"then","text":"The handler is not triggered.","code":["trace1 == [\"Some long content...\"]","trace2 == [\"long \"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"onTextReplace\" event handler of a text area is triggered when the text area content changes.",
      "result":"PASS",
      "duration":"0.005 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This type of event occurs when the user replaces in the text area.\n            Internally this is actually based on a `DocumentFilter`\n            which will forward the `replace` method calls \n            to your `onTextReplace` handler.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A simple text area UI.","code":["var ui = UI.textArea(\"Some content...\")"]},

        {"kind":"and","text":"A simple list where handlers are going to leave a trace.","code":["var trace1 = []","var trace2 = []","var trace3 = []"]},

        {"kind":"and","text":"A handler that records the text area content.","code":["ui.onTextReplace( it -> {","    trace1.add(it.component.text)","    trace2.add(it.replacementText)","    trace3.add(\"$it.offset|$it.length\")","})"]},

        {"kind":"when","text":"The text area content is changed.","code":["UI.runNow { ui.component.setText(\"Some other content...\") }","UI.sync()"]},

        {"kind":"then","text":"The handler was triggered.","code":["trace1 == [\"Some content...\"]","trace2 == [\"Some content...\"] // We replace everything.","trace3 == [\"0|15\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"onTextReplace\" event handlers will be triggered in the correct order.",
      "result":"PASS",
      "duration":"0.004 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A simple text area UI.","code":["var ui = UI.textArea(\"Some content...\")"]},

        {"kind":"and","text":"A simple list where handlers are going to leave a trace.","code":["var trace = []"]},

        {"kind":"and","text":"A handler that records the text area content.","code":["ui.onTextReplace( it -> trace.add(\"1\") )","  .onTextReplace( it -> trace.add(\"2\") )","  .onTextReplace( it -> trace.add(\"3\") )","  .onTextReplace( it -> trace.add(\"4\") )","  .onTextReplace( it -> trace.add(\"5\") )","  .onTextReplace( it -> trace.add(\"6\") )","  .onTextReplace( it -> trace.add(\"7\") )"]},

        {"kind":"when","text":"The text area content is changed.","code":["UI.runNow { ui.component.setText(\"Some other content...\") }","UI.sync()"]},

        {"kind":"then","text":"The handlers are triggered in the correct order.","code":["trace == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}