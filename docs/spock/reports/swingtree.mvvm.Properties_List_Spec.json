{
  "className":"swingtree.mvvm.Properties_List_Spec",
  "title":"Lists of Properties",
  "narrative":"Just like properties you can create lists of properties\n    and then bind them to UI components.\n    They are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    This specification shows how to use the various\n    methods exposed by the property lists classes, \n    namely \"Vals\" (immutable) and \"Vars\" (mutable).",
  "subjects":["swingtree.api.mvvm.Vals","swingtree.api.mvvm.Vars"],
  "statistics":{
    "runs":"18",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.066 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Multiple properties can be modelled through the \"Vars\" and \"Vals\" classes.",
      "result":"PASS",
      "duration":"0.012 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A \"Vars\" class with two properties.","code":["var vars = Vars.of(\"Apple\", \"Banana\")"]},

        {"kind":"and","text":"A \"Vals\" class with two properties.","code":["var vals = Vals.of(\"Cherry\", \"Date\")"]},

        {"kind":"expect","text":"Both the \"Vars\" and \"Vals\" have two properties.","code":["vars.size() == 2","vars.at(0).get() == \"Apple\"","vars.at(1).get() == \"Banana\"","vals.size() == 2","vals.at(0).get() == \"Cherry\"","vals.at(1).get() == \"Date\""]},

        {"kind":"and","text":"You can also use the \"First\" and \"last\" methods.","code":["vars.first().get() == \"Apple\"","vars.last().get() == \"Banana\"","vals.first().get() == \"Cherry\"","vals.last().get() == \"Date\""]},

        {"kind":"and","text":"They also have the correct type.","code":["vars.type() == String","vals.type() == String"]},

        {"kind":"and","text":"The \"Vals\" class has no methods for mutation, it is read only (basically a tuple).","code":["Vals.metaClass.getMethods().findAll{ it.name == \"set\" }.size() == 0","Vals.metaClass.getMethods().findAll{ it.name == \"add\" }.size() == 0","Vals.metaClass.getMethods().findAll{ it.name == \"remove\" }.size() == 0"]},

        {"kind":"and","text":"Both property lists are not empty","code":["!vars.isEmpty() && vars.isNotEmpty()","!vals.isEmpty() && vals.isNotEmpty()"]},

        {"kind":"and","text":"Both property lists are iterable","code":["vars.each{ it }","vals.each{ it }"]},

        {"kind":"when","text":"We change the state of the \"Vars\" properties.","code":["vars.at(0).set(\"Apricot\")","vars.at(1).set(\"Blueberry\")"]},

        {"kind":"then","text":"The \"Vars\" properties have changed.","code":["vars.at(0).get() == \"Apricot\"","vars.at(1).get() == \"Blueberry\""]},

        {"kind":"when","text":"We use the \"aetAt\" method to change the state of the \"Vars\" properties.","code":["vars.setAt(0, \"Tim\")","vars.setAt(1, \"Tom\")"]},

        {"kind":"then","text":"The \"Vars\" properties have changed.","code":["vars.at(0).get() == \"Tim\"","vars.at(1).get() == \"Tom\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can remove n leading or trailing entries from a property list.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A very common use case is to remove the first or last entry from a list.\n            Not only can you do this with the \"removeFirst()\" and \"removeLast()\" methods,\n            but you can also remove n entries from the start or end of the list\n            through the \"removeFirst(int)\" and \"removeLast(int)\" methods.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A \"Vars\" class with six properties.","code":["var vars = Vars.of(\"Racoon\", \"Squirrel\", \"Turtle\", \"Piglet\", \"Rooster\", \"Rabbit\")"]},

        {"kind":"expect","text":"The \"Vars\" class has six properties.","code":["vars.size() == 6"]},

        {"kind":"when","text":"We remove the first entry from the list.","code":["vars.removeFirst()"]},

        {"kind":"then","text":"The \"Vars\" class has five properties.","code":["vars.size() == 5"]},

        {"kind":"and","text":"The first entry has been removed.","code":["vars.at(0).get() == \"Squirrel\""]},

        {"kind":"when","text":"We remove the last entry from the list.","code":["vars.removeLast()"]},

        {"kind":"then","text":"The \"Vars\" class has four properties.","code":["vars.size() == 4"]},

        {"kind":"and","text":"The last entry has been removed.","code":["vars.at(3).get() == \"Rooster\""]},

        {"kind":"when","text":"We remove the first two entries from the list.","code":["vars.removeFirst(2)"]},

        {"kind":"then","text":"The \"Vars\" class has two properties.","code":["vars.size() == 2"]},

        {"kind":"and","text":"The first two entries have been removed.","code":["vars.at(0).get() == \"Piglet\"","vars.at(1).get() == \"Rooster\""]},

        {"kind":"when","text":"We remove the last two entries from the list.","code":["vars.removeLast(2)"]},

        {"kind":"then","text":"The \"Vars\" class has no properties.","code":["vars.size() == 0"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The properties of one property list can be added to another property list.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The properties of one property list can be added to another property list.\n            This is useful when you want to combine two property lists into one.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A \"Vars\" class with three properties.","code":["var vars1 = Vars.of(\"Racoon\", \"Squirrel\", \"Turtle\")"]},

        {"kind":"and","text":"A \"Vars\" class with three properties.","code":["var vars2 = Vars.of(\"Piglet\", \"Rooster\", \"Rabbit\")"]},

        {"kind":"expect","text":"The \"Vars\" classes have three properties.","code":["vars1.size() == 3","vars2.size() == 3"]},

        {"kind":"when","text":"We add the properties of the second \"Vars\" class to the first \"Vars\" class.","code":["vars1.addAll(vars2)"]},

        {"kind":"then","text":"The \"Vars\" class has six properties.","code":["vars1.size() == 6"]},

        {"kind":"and","text":"The properties of the second \"Vars\" class have been added to the first \"Vars\" class.","code":["vars1.at(0).get() == \"Racoon\"","vars1.at(1).get() == \"Squirrel\"","vars1.at(2).get() == \"Turtle\"","vars1.at(3).get() == \"Piglet\"","vars1.at(4).get() == \"Rooster\"","vars1.at(5).get() == \"Rabbit\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"Vars\" is a list of properties which can grow and shrink.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A \"Vars\" class with two properties.","code":["var vars = Vars.of(\"Kachori\", \"Dal Biji\")"]},

        {"kind":"expect","text":"The \"Vars\" class has two properties.","code":["vars.size() == 2","vars.at(0).get() == \"Kachori\"","vars.at(1).get() == \"Dal Biji\""]},

        {"kind":"when","text":"We add a new property to the \"Vars\" class.","code":["vars.add(\"Chapati\")"]},

        {"kind":"then","text":"The \"Vars\" class has three properties.","code":["vars.size() == 3","vars.at(0).get() == \"Kachori\"","vars.at(1).get() == \"Dal Biji\"","vars.at(2).get() == \"Chapati\""]},

        {"kind":"when","text":"We remove a property from the \"Vars\" class.","code":["vars.remove(\"Dal Biji\")"]},

        {"kind":"then","text":"The \"Vars\" class has two properties.","code":["vars.size() == 2","vars.at(0).get() == \"Kachori\"","vars.at(1).get() == \"Chapati\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Both the \"Vars\" and immutable \"Vals\" types can be used for functional programming.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A \"Vars\" class with two properties.","code":["var vars = Vars.of(\"Kachori\", \"Dal Biji\")"]},

        {"kind":"and","text":"A \"Vals\" class with two properties.","code":["var vals = Vals.of(\"Chapati\", \"Papad\")"]},

        {"kind":"when","text":"We use the \"map\" method to transform all the properties.","code":["var mappedVars = vars.map{ it.toUpperCase() }","var mappedVals = vals.map{ it.toUpperCase() }"]},

        {"kind":"then","text":"The properties have been transformed.","code":["mappedVars.at(0).get() == \"KACHORI\"","mappedVars.at(1).get() == \"DAL BIJI\"","mappedVals.at(0).get() == \"CHAPATI\"","mappedVals.at(1).get() == \"PAPAD\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Map a \"Vals\" instance from one type of properties to another.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A \"Vals\" class with two properties.","code":["var vals = Vals.of(\"Chapati\", \"Papad\")"]},

        {"kind":"when","text":"We use the \"mapTo\" method to transform all the properties.","code":["var mappedVals = vals.mapTo(Integer, { it.length() })"]},

        {"kind":"then","text":"The properties have been transformed.","code":["mappedVals.at(0).get() == 7","mappedVals.at(1).get() == 5"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Map a \"Vars\" instance from one type of properties to another.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A \"Vars\" class with two properties.","code":["var vars = Vars.of(\"Kachori\", \"Dal Biji\")"]},

        {"kind":"when","text":"We use the \"mapTo\" method to transform all the properties.","code":["var mappedVars = vars.mapTo(Integer, { it.length() })"]},

        {"kind":"then","text":"The properties have been transformed.","code":["mappedVars.at(0).get() == 7","mappedVars.at(1).get() == 8"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can create the \"Vars\"/\"Vals\" property lists from property instances.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A \"Vars\" class with two properties.","code":["var vars = Vars.of(Var.of(\"Chana\"), Var.of(\"Dal\"))"]},

        {"kind":"and","text":"A \"Vals\" class with two properties.","code":["var vals = Vals.of(Val.of(\"Chapati\"), Val.of(\"Papad\"))"]},

        {"kind":"expect","text":"The \"Vars\" class has two properties.","code":["vars.size() == 2","vars.at(0).get() == \"Chana\"","vars.at(1).get() == \"Dal\""]},

        {"kind":"and","text":"The \"Vals\" class has two properties.","code":["vals.size() == 2","vals.at(0).get() == \"Chapati\"","vals.at(1).get() == \"Papad\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Just like a regular \"Var\" property you can register \"show\" listeners on \"Vars\".",
      "result":"PASS",
      "duration":"0.005 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A \"Vars\" class with two properties.","code":["var vars = Vars.of(42, 73)"]},

        {"kind":"and","text":"A list where we are going to record changes.","code":["var changes = []"]},

        {"kind":"and","text":"Now we register a \"show\" listener on the \"Vars\" class.","code":["vars.onShow{ changes << it.index() }"]},

        {"kind":"when","text":"We modify the property in various ways...","code":["vars.addAt(1, 1)","vars.setAt(0, 2)","vars.removeAt(1)","vars.add(3)"]},

        {"kind":"then","text":"The \"show\" listener has been called four times.","code":["changes.size() == 4"]},

        {"kind":"and","text":"The \"show\" listener has been called with the correct indices.","code":["changes == [1, 0, 1, 2]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The display action of a property or list of properties will not be called if they report \"canBeRemoved()\"",
      "result":"PASS",
      "duration":"0.006 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A single property and list of two properties.","code":["var prop = Var.of(7)","var list = Vars.of(42, 73)"]},

        {"kind":"and","text":"A list where we are going to record changes.","code":["var changes = []"]},

        {"kind":"and","text":"Now we register a \"show\" listeners on both objects.","code":["prop.onShowThis(new UIAction<ValDelegate<Integer>>() {","    @Override","    void accept(ValDelegate<Integer> delegate) {","        changes << \"Something happened to the property.\"","    }","    @Override boolean canBeRemoved() { return true }","})","list.onShow(new UIAction<ValsDelegate<Integer>>() {","    @Override","    void accept(ValsDelegate<Integer> delegate) {","        changes << \"Something happened to the list.\"","    }","    @Override boolean canBeRemoved() { return true }","})"]},

        {"kind":"when","text":"We modify the properties in various ways...","code":["prop.set(42)","list.add(1)","list.removeAt(1)","list.setAt(0, 2)","list.addAt(1, 3)","list.remove(3)"]},

        {"kind":"then","text":"The \"show\" listener has been called zero times.","code":["changes.size() == 0"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The listeners registered in property lists will be informed what type of modification occurred.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A \"Vars\" class with two properties.","code":["var vars = Vars.of(42, 73)"]},

        {"kind":"and","text":"A list where we are going to record changes.","code":["var changes = []"]},

        {"kind":"and","text":"Now we register a \"show\" listener on the \"Vars\" class.","code":["vars.onShow{ changes << it.type() }"]},

        {"kind":"when","text":"We modify the property in various ways...","code":["vars.addAt(1, 1)","vars.setAt(0, 2)","vars.removeAt(1)","vars.add(3)"]},

        {"kind":"then","text":"The \"show\" listener has been called four times.","code":["changes.size() == 4"]},

        {"kind":"and","text":"The \"show\" listener has been called with the correct indices.","code":["changes == [Mutation.ADD, Mutation.SET, Mutation.REMOVE, Mutation.ADD]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Lists of properties can be sorted based on their natural order through the \"sort\" method.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A \"Vars\" class with two properties.","code":["var vars = Vars.of(42, 73)"]},

        {"kind":"when","text":"We sort the list.","code":["vars.sort()"]},

        {"kind":"then","text":"The properties have been sorted.","code":["vars.at(0).get() == 42","vars.at(1).get() == 73"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Lists of properties can be sorted using a custom comparator through the \"sort\" method.",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A \"Vars\" class with two properties.","code":["var vars = Vars.of(42, 73)"]},

        {"kind":"when","text":"We sort the list.","code":["vars.sort((Comparator<Integer>) { a, b -> b - a })"]},

        {"kind":"then","text":"The properties have been sorted.","code":["vars.at(0).get() == 73","vars.at(1).get() == 42"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Change listeners registered on a property list will be called when the list is sorted.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A \"Vars\" list with two properties.","code":["var vars = Vars.of(42, 73)"]},

        {"kind":"and","text":"A regular list where we are going to record changes.","code":["var changes = []"]},

        {"kind":"and","text":"Now we register a \"show\" change listener on the properties.","code":["vars.onShow({ changes << it.type() })"]},

        {"kind":"when","text":"We sort the list.","code":["vars.sort()"]},

        {"kind":"then","text":"The listener has been called once.","code":["changes.size() == 1"]},

        {"kind":"and","text":"It reports the correct type of change/mutation.","code":["changes == [Mutation.SORT]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can create a \"Vars\" list from a regular List of properties.",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A \"List\" of properties.","code":["var list = [Var.of(42), Var.of(73)]"]},

        {"kind":"when","text":"We create a \"Vars\" list from the \"List\".","code":["var vars = Vars.of(Integer, list)"]},

        {"kind":"then","text":"The \"Vars\" list has the same properties.","code":["vars.at(0).get() == 42","vars.at(1).get() == 73"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A list of properties can be turned into lists, sets or maps using various convenience methods.",
      "result":"PASS",
      "duration":"0.007 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The \"Vals\" class has a number of convenience methods for turning the list of properties into\n            immutable lists, sets or maps. \n            These methods make property lists more compatible with the rest of the Java ecosystem.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A \"Vars\" class with 4 properties that have unique ids.","code":["var vars = Vars.of(","                                    Var.of(42).withId(\"a\"),","                                    Var.of(73).withId(\"b\"),","                                    Var.of(1).withId(\"c\"),","                                    Var.of(2).withId(\"d\")","                                )"]},

        {"kind":"when","text":"We turn the list of properties into different collection types...","code":["var list = vars.toList()","var set = vars.toSet()","var map = vars.toMap()","var valMap = vars.toValMap()"]},

        {"kind":"then","text":"The collections have the correct size and values.","code":["list.size() == 4","set.size() == 4","map.size() == 4","valMap.size() == 4","list == [42, 73, 1, 2]","set == [42, 73, 1, 2] as Set","map == [\"a\": 42, \"b\": 73, \"c\": 1, \"d\": 2]","valMap == [\"a\": Val.of(42), \"b\": Val.of(73), \"c\": Val.of(1), \"d\": Val.of(2)]"]},

        {"kind":"and","text":"All of these collections are of the correct type.","code":["list instanceof List","set instanceof Set","map instanceof Map","valMap instanceof Map"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A list of properties can be turned into an immutable \"Vals\" list using the \"toVals\" method.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A \"Vars\" class with 4 properties that have unique ids.","code":["var vars = Vars.of(","                                    Var.of(\"ukraine\"),","                                    Var.of(\"belgium\"),","                                    Var.of(\"france\")","                                )"]},

        {"kind":"when","text":"We turn the list of properties into an immutable \"Vals\" list.","code":["var vals = vars.toVals()"]},

        {"kind":"then","text":"The \"Vals\" list has the correct size and values.","code":["vals.size() == 3","vals == Vals.of(Val.of(\"ukraine\"), Val.of(\"belgium\"), Val.of(\"france\"))"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"makeDistinct\" method on a mutable list of properties modifies the list in-place.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The \"makeDistinct\" method makes sure that there are only unique values in the Vals list.\n            It does this by removing all duplicates from the list.\n            This is especially useful when you use the properties to model \n            combo box or radio button selections.\n            This modification will be reported to all \"show\" listeners,\n            which are usually used to update the UI.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A \"Vars\" class with 4 properties that have unique ids.","code":["var vars = Vars.of(","                                    Var.of(3.1415f),","                                    Var.of(2.7182f),","                                    Var.of(3.1415f),","                                    Var.of(1.6180f)","                                )"]},

        {"kind":"and","text":"We register a listener which will record changes for us.","code":["var changes = []","vars.onShow({ changes << it.type() })"]},

        {"kind":"when","text":"We call the \"makeDistinct\" method.","code":["vars.makeDistinct()"]},

        {"kind":"then","text":"The list has been modified in-place.","code":["vars.size() == 3","vars == Vars.of(Var.of(3.1415f), Var.of(2.7182f), Var.of(1.6180f))"]},

        {"kind":"and","text":"The \"show\" listeners have been called.","code":["changes == [Mutation.DISTINCT]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}