{
  "className":"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec",
  "title":"Swing tree makes UI building fun again!",
  "narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree.",
  "subjects":[],
  "statistics":{
    "runs":"10",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"1",
    "duration":"0.225 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"We can add a list of components to the swing tree API and get a builder node in return.",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We have a simple JPanel UI node.","code":["var node = UI.panel()"]},

        {"kind":"expect","text":"At the beginning the wrapped component will have no children.","code":["node.component.components.length == 0"]},

        {"kind":"when","text":"We add a list of panels...","code":["node.add([new JPanel(), new JPanel(), new JPanel()])"]},

        {"kind":"then","text":"The wrapped component will have the expected amount of child components.","code":["node.component.components.length == 3"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Swing tree nests components (trough builder nodes).",
      "result":"PASS",
      "duration":"0.005 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A regular swing object.","code":["var panel = new JPanel()"]},

        {"kind":"and","text":"A simple UI builder instance.","code":["var node = UI.of(panel)"]},

        {"kind":"expect","text":"","code":["node.component === panel"]},

        {"kind":"and","text":"","code":["panel.components.length == 0"]},

        {"kind":"when","text":"We now add something to our UI node...","code":["node.add(UI.label(\"Hey! I am a wrapped JLabel.\"))"]},

        {"kind":"then","text":"The panel will have received a new component.","code":["panel.components.length == 1"]},

        {"kind":"and","text":"This component is a label with the expected text.","code":["panel.components[0] instanceof JLabel","panel.components[0].text == \"Hey! I am a wrapped JLabel.\""]},

        {"kind":"when","text":"We add 2 more components...","code":["node.add(UI.button(\"Button 1\"), UI.button(\"Button 2\"))"]},

        {"kind":"then","text":"The panel will have 3 components in total.","code":["panel.components.length == 3"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can easily define the cursor on a wrapped UI component",
      "result":"PASS",
      "duration":"0.005 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a UI builder node containing a simple button.","code":["var node = UI.button()"]},

        {"kind":"expect","text":"At the beginning the default cursor will be set.","code":["node.component.cursor.type == Cursor.DEFAULT_CURSOR"]},

        {"kind":"when","text":"We set the cursor of the button to be something else...","code":["node.with(UI.Cursor.RESIZE_SOUTH_EAST)"]},

        {"kind":"then","text":"This will lead to the correct cursor being chosen.","code":["node.component.cursor.type == Cursor.SE_RESIZE_CURSOR"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use the swing tree to build a valid Swing GUI tree.",
      "result":"PASS",
      "duration":"0.093 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"","code":["def tree =","        Tree.of(","            UI.of(new JPanel()).id(\"Root\")","            .add(","                BorderLayout.PAGE_START,","                UI.of(new JButton(\"Button 1 (PAGE_START)\")).id(\"B1\")","            )","            .add(","                BorderLayout.CENTER,","                UI.of(new JRadioButton(\"Button 2 (CENTER)\")).id(\"B2\")","                .peek(button -> button.setPreferredSize(new Dimension(200, 100)) )","            )","            .add(","                BorderLayout.LINE_START,","                UI.of(new JButton(\"Button 3 (LINE_START)\")).id(\"B3\")","            )","            .add(","                BorderLayout.PAGE_END,","                UI.of(new JButton(\"Long-Named Button 4 (PAGE_END)\")).id(\"B4\")","            )","            .add(","                BorderLayout.LINE_END,","                UI.of(new JButton(\"5 (LINE_END)\")).id(\"B5\")","            )","            .get(JPanel)","        )"]},

        {"kind":"and","text":"We do this little trick to remove hash code...","code":["tree.entrySet().each {","    entry -> tree[entry.key] = entry.value.replaceAll(\"(\\\\@([0-9]?[abcdef]?)+)\", \"\")","}"]},

        {"kind":"then","text":"","code":["'Root' in tree","'B1' in tree","'B2' in tree","'B3' in tree","'B4' in tree","'B5' in tree"]},

        {"kind":"and","text":"","code":["tree['Root'] == 'javax.swing.JPanel[Root,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]'","tree['B1'  ] == 'javax.swing.JButton[B1,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.5,border=javax.swing.plaf.BorderUIResource$CompoundBorderUIResource,flags=296,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,disabledSelectedIcon=,margin=javax.swing.plaf.InsetsUIResource[top=2,left=14,bottom=2,right=14],paintBorder=true,paintFocus=true,pressedIcon=,rolloverEnabled=true,rolloverIcon=,rolloverSelectedIcon=,selectedIcon=,text=Button 1 (PAGE_START),defaultCapable=true]'","tree['B2'  ] == 'javax.swing.JRadioButton[B2,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.5,border=javax.swing.plaf.BorderUIResource$CompoundBorderUIResource,flags=360,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=200,height=100],defaultIcon=,disabledIcon=,disabledSelectedIcon=,margin=javax.swing.plaf.InsetsUIResource[top=2,left=2,bottom=2,right=2],paintBorder=false,paintFocus=true,pressedIcon=,rolloverEnabled=true,rolloverIcon=,rolloverSelectedIcon=,selectedIcon=,text=Button 2 (CENTER)]'","tree['B3'  ] == 'javax.swing.JButton[B3,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.5,border=javax.swing.plaf.BorderUIResource$CompoundBorderUIResource,flags=296,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,disabledSelectedIcon=,margin=javax.swing.plaf.InsetsUIResource[top=2,left=14,bottom=2,right=14],paintBorder=true,paintFocus=true,pressedIcon=,rolloverEnabled=true,rolloverIcon=,rolloverSelectedIcon=,selectedIcon=,text=Button 3 (LINE_START),defaultCapable=true]'","tree['B4'  ] == 'javax.swing.JButton[B4,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.5,border=javax.swing.plaf.BorderUIResource$CompoundBorderUIResource,flags=296,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,disabledSelectedIcon=,margin=javax.swing.plaf.InsetsUIResource[top=2,left=14,bottom=2,right=14],paintBorder=true,paintFocus=true,pressedIcon=,rolloverEnabled=true,rolloverIcon=,rolloverSelectedIcon=,selectedIcon=,text=Long-Named Button 4 (PAGE_END),defaultCapable=true]'","tree['B5'  ] == 'javax.swing.JButton[B5,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.5,border=javax.swing.plaf.BorderUIResource$CompoundBorderUIResource,flags=296,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,disabledSelectedIcon=,margin=javax.swing.plaf.InsetsUIResource[top=2,left=14,bottom=2,right=14],paintBorder=true,paintFocus=true,pressedIcon=,rolloverEnabled=true,rolloverIcon=,rolloverSelectedIcon=,selectedIcon=,text=5 (LINE_END),defaultCapable=true]'"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can register various keyboard events in swing tree nodes.",
      "result":"PASS",
      "duration":"0.020 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"","code":["def panel =","        UI.of(new JPanel()).id(\"Root\")","        .onKeyPressed(it -> {/*something*/})","        .onPressed(Keyboard.Key.H, it -> {/*something*/})","        .onKeyReleased(it -> {/*something*/})","        .onReleased(Keyboard.Key.X, it -> {/*something*/})","        .onKeyTyped(it -> {/*something*/})","        .onTyped(Keyboard.Key.X, it -> {/*something*/})","        .get(JPanel)"]},

        {"kind":"then","text":"","code":["panel.getListeners(KeyListener.class).size() == 6"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can register various UI focus events in swing tree nodes.",
      "result":"PASS",
      "duration":"0.007 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"","code":["def panel =","        UI.of(new JPanel()).id(\"Root\")","        .onFocusGained(it -> {/*something*/})","        .onFocusLost(it -> {/*something*/})","        .get(JPanel)"]},

        {"kind":"then","text":"","code":["panel.getListeners(FocusListener.class).size() == 2"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can register list selection events on a JList based swing tree node.",
      "result":"PASS",
      "duration":"0.021 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"","code":["def list =","        UI.of(new JList<>())","        .onSelection(it -> {/*something*/})","        .onSelection(it -> {/*something*/})","        .onSelection(it -> {/*something*/})","        .get(JList)"]},

        {"kind":"then","text":"","code":["list.getListeners(ListSelectionListener.class).size() == 3"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A tabbed pane can be created and populated in a declarative way.",
      "result":"PASS",
      "duration":"0.031 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"","code":["def tabbedPane =","    UI.tabbedPane(UI.Position.LEFT).id(\"Tabs\")","    .add(","        UI.tab(\"Tab 1\")","        .onSelection(it -> {/*something*/})","        .add(UI.label(\"Tab 1 content\"))","    )","    .add(","        UI.tab(\"Tab 2\")","        .withTip(\"Tab 2 tip\")","        .add(UI.label(\"Tab 2 content\")))","    .add(","        UI.tab(\"Tab 3\")","        .onMouseClick(it -> {/*something*/})","        .add(UI.label(\"Tab 3 content\")))","    .get(JTabbedPane)"]},

        {"kind":"then","text":"","code":["tabbedPane.getTabCount() == 3","tabbedPane.getTitleAt(0) == \"Tab 1\"","tabbedPane.getTitleAt(1) == \"Tab 2\"","tabbedPane.getTitleAt(2) == \"Tab 3\""]},

        {"kind":"and","text":"The tabbed pane has only titles but no header components:","code":["tabbedPane.getTabComponentAt(0) == null","tabbedPane.getTabComponentAt(1) == null","tabbedPane.getTabComponentAt(2) == null"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The tab buttons of a tabbed pane can have custom components.",
      "result":"PASS",
      "duration":"0.012 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"","code":["def tabbedPane =","    UI.tabbedPane(UI.Position.RIGHT).id(\"Tabs\")","    .add(","        UI.tab(\"Tab 1\")","        .withHeader(UI.label(\"Tab 1 header\"))","        .add(UI.label(\"Tab 1 content\"))","    )","    .add(","        UI.tab(\"Tab 2\")","        .withHeader(UI.label(\"Tab 2 header\"))","        .add(UI.label(\"Tab 2 content\")))","    .add(","        UI.tab(\"Tab 3\")","        .withHeader(UI.label(\"Tab 3 header\"))","        .add(UI.label(\"Tab 3 content\")))","    .get(JTabbedPane)"]},

        {"kind":"then","text":"","code":["tabbedPane.getTabCount() == 3","tabbedPane.getTitleAt(0) == \"Tab 1\"","tabbedPane.getTitleAt(1) == \"Tab 2\"","tabbedPane.getTitleAt(2) == \"Tab 3\""]},

        {"kind":"and","text":"The tabbed pane has both title labels and header components:","code":["tabbedPane.getTabComponentAt(0) instanceof JPanel // wrapping both the title and the header","tabbedPane.getTabComponentAt(1) instanceof JPanel","tabbedPane.getTabComponentAt(2) instanceof JPanel","((JPanel)tabbedPane.getTabComponentAt(0)).getComponentCount() == 2","((JPanel)tabbedPane.getTabComponentAt(1)).getComponentCount() == 2","((JPanel)tabbedPane.getTabComponentAt(2)).getComponentCount() == 2"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Tab header components can be passed to the \"tab\" factory method instead of the title.",
      "result":"PASS",
      "duration":"0.005 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"","code":["def tabbedPane =","    UI.tabbedPane(UI.Position.BOTTOM).id(\"Tabs\")","    .add(","        UI.tab(UI.label(\"Tab 1 header\"))","        .add(UI.label(\"Tab 1 content\"))","    )","    .add(","        UI.tab(UI.label(\"Tab 2 header\"))","        .add(UI.label(\"Tab 2 content\")))","    .add(","        UI.tab(UI.label(\"Tab 3 header\"))","        .add(UI.label(\"Tab 3 content\")))","    .get(JTabbedPane)"]},

        {"kind":"then","text":"","code":["tabbedPane.getTabCount() == 3","tabbedPane.getTitleAt(0) == \"\"","tabbedPane.getTitleAt(1) == \"\"","tabbedPane.getTitleAt(2) == \"\""]},

        {"kind":"and","text":"The tabbed pane has header components:","code":["tabbedPane.getTabComponentAt(0) instanceof JLabel","tabbedPane.getTabComponentAt(1) instanceof JLabel","tabbedPane.getTabComponentAt(2) instanceof JLabel"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Swing tree makes us a viewable window!",
      "result":"IGNORED",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["UI.of(new JFrame(\"Test\"))",".peek(frame -> frame.add(","    UI.of(new JPanel())","    .add(BorderLayout.PAGE_START, new JButton(\"Button 1 (PAGE_START)\"))","    .add(","        BorderLayout.CENTER,","        UI.of(new JRadioButton(\"Button 2 (CENTER)\"))","        .peek(","            button ->","                    button.setPreferredSize(new Dimension(200, 100))","        )","    )","    .add(BorderLayout.LINE_START, new JButton(\"Button 3 (LINE_START)\"))","    .add(BorderLayout.PAGE_END, new JButton(\"Long-Named Button 4 (PAGE_END)\"))","    .add(BorderLayout.LINE_END, new JButton(\"5 (LINE_END)\"))","    .get(JPanel)","))",".peek(","    frame -> {","        frame.setSize(300, 300)","        frame.show()","    }",")","!= null"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}