{
  "className":"swingtree.Color_Spec",
  "title":"Yet Another Color",
  "narrative":"The age-old `java.awt.Color` class is a bit limited in what it can do.\n    Not only are the color constants it has to offer rather limited,\n    many of them are also inconsistent with the\n    naming and RGB values of modern color palettes.\n    The `java.awt.Color.GREEN` constant for example has an RGB value of\n    `(0, 255, 0)` which is considered \"lime\" in modern color palettes.\n\n    Furthermore, there is a lack of useful wither methods on the `Color` class\n    that are expected from a modern value based type, like in this case for example\n    `withRed(double)`, `withGreen(double)`, `withBlue(double)`, `withAlpha(double)`\n    or `withBrightness(double)`, `withSaturation(double)`, `withHue(double)`.\n\n    SwingTree addresses these shortcomings by providing a custom `Color` type\n    in the `UI` namespace which is a subclass of `java.awt.Color` and has a number\n    of useful methods to manipulate colors in both the RGB and HSB color spaces.",
  "subjects":["swingtree.UI$Color"],
  "statistics":{
    "runs":"56",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Use the \"brighterBy(double)\" on a SwingTree color to brighten the color according to the HSB color space. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `brighterBy(double)` which will brighten the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.brighterBy(factor) == brighter"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"brighter":["new Color(240,248,255)","new Color(255,255,229)","new Color(21,21,21)","new Color(0,143,0)","new Color(240,255,240)","new Color(255,114,114)","new Color(255,255,255)","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"brighterBy(double)\" on a SwingTree color to brighten the color according to the HSB color space. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `brighterBy(double)` which will brighten the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.brighterBy(factor) == brighter"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"brighter":["new Color(240,248,255)","new Color(255,255,229)","new Color(21,21,21)","new Color(0,143,0)","new Color(240,255,240)","new Color(255,114,114)","new Color(255,255,255)","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"brighterBy(double)\" on a SwingTree color to brighten the color according to the HSB color space. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `brighterBy(double)` which will brighten the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.brighterBy(factor) == brighter"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"brighter":["new Color(240,248,255)","new Color(255,255,229)","new Color(21,21,21)","new Color(0,143,0)","new Color(240,255,240)","new Color(255,114,114)","new Color(255,255,255)","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"brighterBy(double)\" on a SwingTree color to brighten the color according to the HSB color space. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `brighterBy(double)` which will brighten the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.brighterBy(factor) == brighter"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"brighter":["new Color(240,248,255)","new Color(255,255,229)","new Color(21,21,21)","new Color(0,143,0)","new Color(240,255,240)","new Color(255,114,114)","new Color(255,255,255)","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"brighterBy(double)\" on a SwingTree color to brighten the color according to the HSB color space. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `brighterBy(double)` which will brighten the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.brighterBy(factor) == brighter"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"brighter":["new Color(240,248,255)","new Color(255,255,229)","new Color(21,21,21)","new Color(0,143,0)","new Color(240,255,240)","new Color(255,114,114)","new Color(255,255,255)","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"brighterBy(double)\" on a SwingTree color to brighten the color according to the HSB color space. [5]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `brighterBy(double)` which will brighten the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.brighterBy(factor) == brighter"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"brighter":["new Color(240,248,255)","new Color(255,255,229)","new Color(21,21,21)","new Color(0,143,0)","new Color(240,255,240)","new Color(255,114,114)","new Color(255,255,255)","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"brighterBy(double)\" on a SwingTree color to brighten the color according to the HSB color space. [6]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `brighterBy(double)` which will brighten the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.brighterBy(factor) == brighter"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"brighter":["new Color(240,248,255)","new Color(255,255,229)","new Color(21,21,21)","new Color(0,143,0)","new Color(240,255,240)","new Color(255,114,114)","new Color(255,255,255)","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"brighterBy(double)\" on a SwingTree color to brighten the color according to the HSB color space. [7]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `brighterBy(double)` which will brighten the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.brighterBy(factor) == brighter"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"brighter":["new Color(240,248,255)","new Color(255,255,229)","new Color(21,21,21)","new Color(0,143,0)","new Color(240,255,240)","new Color(255,114,114)","new Color(255,255,255)","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"brighterBy(double)\" on a SwingTree color to brighten the color according to the HSB color space. [8]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `brighterBy(double)` which will brighten the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.brighterBy(factor) == brighter"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"brighter":["new Color(240,248,255)","new Color(255,255,229)","new Color(21,21,21)","new Color(0,143,0)","new Color(240,255,240)","new Color(255,114,114)","new Color(255,255,255)","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"brighterBy(double)\" on a SwingTree color to brighten the color according to the HSB color space. [9]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `brighterBy(double)` which will brighten the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.brighterBy(factor) == brighter"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"brighter":["new Color(240,248,255)","new Color(255,255,229)","new Color(21,21,21)","new Color(0,143,0)","new Color(240,255,240)","new Color(255,114,114)","new Color(255,255,255)","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"brighterBy(double)\" on a SwingTree color to brighten the color according to the HSB color space. [10]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `brighterBy(double)` which will brighten the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.brighterBy(factor) == brighter"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"brighter":["new Color(240,248,255)","new Color(255,255,229)","new Color(21,21,21)","new Color(0,143,0)","new Color(240,255,240)","new Color(255,114,114)","new Color(255,255,255)","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"brighterBy(double)\" on a SwingTree color to brighten the color according to the HSB color space. [11]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `brighterBy(double)` which will brighten the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.brighterBy(factor) == brighter"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"brighter":["new Color(240,248,255)","new Color(255,255,229)","new Color(21,21,21)","new Color(0,143,0)","new Color(240,255,240)","new Color(255,114,114)","new Color(255,255,255)","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"brighterBy(double)\" on a SwingTree color to brighten the color according to the HSB color space. [12]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `brighterBy(double)` which will brighten the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.brighterBy(factor) == brighter"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"brighter":["new Color(240,248,255)","new Color(255,255,229)","new Color(21,21,21)","new Color(0,143,0)","new Color(240,255,240)","new Color(255,114,114)","new Color(255,255,255)","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"brighterBy(double)\" on a SwingTree color to brighten the color according to the HSB color space. [13]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `brighterBy(double)` which will brighten the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.brighterBy(factor) == brighter"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"brighter":["new Color(240,248,255)","new Color(255,255,229)","new Color(21,21,21)","new Color(0,143,0)","new Color(240,255,240)","new Color(255,114,114)","new Color(255,255,255)","UI.Color.ALICEBLUE","UI.Color.BEIGE","UI.Color.BLACK","UI.Color.DARKGREEN","UI.Color.HONEYDEW","UI.Color.INDIANRED","UI.Color.WHITE"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"darkerBy(double)\" on a SwingTree color to darken the color according to the HSB color space. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `darkerBy(double)` which will darken the color according to the brightness in the \n            HSB color space (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.darkerBy(factor) == darker"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"darker":["new Color(0,134,179)","new Color(153,76,48)","new Color(102,96,98)","new Color(63,54,42)","new Color(200,192,184)","new Color(77,77,77)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"darkerBy(double)\" on a SwingTree color to darken the color according to the HSB color space. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `darkerBy(double)` which will darken the color according to the brightness in the \n            HSB color space (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.darkerBy(factor) == darker"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"darker":["new Color(0,134,179)","new Color(153,76,48)","new Color(102,96,98)","new Color(63,54,42)","new Color(200,192,184)","new Color(77,77,77)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"darkerBy(double)\" on a SwingTree color to darken the color according to the HSB color space. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `darkerBy(double)` which will darken the color according to the brightness in the \n            HSB color space (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.darkerBy(factor) == darker"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"darker":["new Color(0,134,179)","new Color(153,76,48)","new Color(102,96,98)","new Color(63,54,42)","new Color(200,192,184)","new Color(77,77,77)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"darkerBy(double)\" on a SwingTree color to darken the color according to the HSB color space. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `darkerBy(double)` which will darken the color according to the brightness in the \n            HSB color space (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.darkerBy(factor) == darker"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"darker":["new Color(0,134,179)","new Color(153,76,48)","new Color(102,96,98)","new Color(63,54,42)","new Color(200,192,184)","new Color(77,77,77)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"darkerBy(double)\" on a SwingTree color to darken the color according to the HSB color space. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `darkerBy(double)` which will darken the color according to the brightness in the \n            HSB color space (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.darkerBy(factor) == darker"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"darker":["new Color(0,134,179)","new Color(153,76,48)","new Color(102,96,98)","new Color(63,54,42)","new Color(200,192,184)","new Color(77,77,77)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"darkerBy(double)\" on a SwingTree color to darken the color according to the HSB color space. [5]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `darkerBy(double)` which will darken the color according to the brightness in the \n            HSB color space (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.darkerBy(factor) == darker"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"darker":["new Color(0,134,179)","new Color(153,76,48)","new Color(102,96,98)","new Color(63,54,42)","new Color(200,192,184)","new Color(77,77,77)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"darkerBy(double)\" on a SwingTree color to darken the color according to the HSB color space. [6]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `darkerBy(double)` which will darken the color according to the brightness in the \n            HSB color space (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.darkerBy(factor) == darker"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"darker":["new Color(0,134,179)","new Color(153,76,48)","new Color(102,96,98)","new Color(63,54,42)","new Color(200,192,184)","new Color(77,77,77)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"darkerBy(double)\" on a SwingTree color to darken the color according to the HSB color space. [7]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `darkerBy(double)` which will darken the color according to the brightness in the \n            HSB color space (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.darkerBy(factor) == darker"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"darker":["new Color(0,134,179)","new Color(153,76,48)","new Color(102,96,98)","new Color(63,54,42)","new Color(200,192,184)","new Color(77,77,77)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"darkerBy(double)\" on a SwingTree color to darken the color according to the HSB color space. [8]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `darkerBy(double)` which will darken the color according to the brightness in the \n            HSB color space (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.darkerBy(factor) == darker"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"darker":["new Color(0,134,179)","new Color(153,76,48)","new Color(102,96,98)","new Color(63,54,42)","new Color(200,192,184)","new Color(77,77,77)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"darkerBy(double)\" on a SwingTree color to darken the color according to the HSB color space. [9]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `darkerBy(double)` which will darken the color according to the brightness in the \n            HSB color space (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.darkerBy(factor) == darker"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"darker":["new Color(0,134,179)","new Color(153,76,48)","new Color(102,96,98)","new Color(63,54,42)","new Color(200,192,184)","new Color(77,77,77)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"darkerBy(double)\" on a SwingTree color to darken the color according to the HSB color space. [10]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `darkerBy(double)` which will darken the color according to the brightness in the \n            HSB color space (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.darkerBy(factor) == darker"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"darker":["new Color(0,134,179)","new Color(153,76,48)","new Color(102,96,98)","new Color(63,54,42)","new Color(200,192,184)","new Color(77,77,77)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"darkerBy(double)\" on a SwingTree color to darken the color according to the HSB color space. [11]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `darkerBy(double)` which will darken the color according to the brightness in the \n            HSB color space (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.darkerBy(factor) == darker"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"darker":["new Color(0,134,179)","new Color(153,76,48)","new Color(102,96,98)","new Color(63,54,42)","new Color(200,192,184)","new Color(77,77,77)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"darkerBy(double)\" on a SwingTree color to darken the color according to the HSB color space. [12]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `darkerBy(double)` which will darken the color according to the brightness in the \n            HSB color space (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.darkerBy(factor) == darker"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"darker":["new Color(0,134,179)","new Color(153,76,48)","new Color(102,96,98)","new Color(63,54,42)","new Color(200,192,184)","new Color(77,77,77)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the \"darkerBy(double)\" on a SwingTree color to darken the color according to the HSB color space. [13]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `darkerBy(double)` which will darken the color according to the brightness in the \n            HSB color space (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.darkerBy(factor) == darker"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"darker":["new Color(0,134,179)","new Color(153,76,48)","new Color(102,96,98)","new Color(63,54,42)","new Color(200,192,184)","new Color(77,77,77)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"saturateBy(double)\" on a SwingTree color to increase the saturation of the color according to the HSB color space. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `saturateBy(double)` which will increase the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.saturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(0,191,255)","new Color(255,68,0)","new Color(255,230,238)","new Color(210,167,110)","new Color(250,200,150)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"saturateBy(double)\" on a SwingTree color to increase the saturation of the color according to the HSB color space. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `saturateBy(double)` which will increase the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.saturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(0,191,255)","new Color(255,68,0)","new Color(255,230,238)","new Color(210,167,110)","new Color(250,200,150)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"saturateBy(double)\" on a SwingTree color to increase the saturation of the color according to the HSB color space. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `saturateBy(double)` which will increase the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.saturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(0,191,255)","new Color(255,68,0)","new Color(255,230,238)","new Color(210,167,110)","new Color(250,200,150)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"saturateBy(double)\" on a SwingTree color to increase the saturation of the color according to the HSB color space. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `saturateBy(double)` which will increase the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.saturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(0,191,255)","new Color(255,68,0)","new Color(255,230,238)","new Color(210,167,110)","new Color(250,200,150)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"saturateBy(double)\" on a SwingTree color to increase the saturation of the color according to the HSB color space. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `saturateBy(double)` which will increase the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.saturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(0,191,255)","new Color(255,68,0)","new Color(255,230,238)","new Color(210,167,110)","new Color(250,200,150)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"saturateBy(double)\" on a SwingTree color to increase the saturation of the color according to the HSB color space. [5]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `saturateBy(double)` which will increase the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.saturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(0,191,255)","new Color(255,68,0)","new Color(255,230,238)","new Color(210,167,110)","new Color(250,200,150)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"saturateBy(double)\" on a SwingTree color to increase the saturation of the color according to the HSB color space. [6]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `saturateBy(double)` which will increase the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.saturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(0,191,255)","new Color(255,68,0)","new Color(255,230,238)","new Color(210,167,110)","new Color(250,200,150)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"saturateBy(double)\" on a SwingTree color to increase the saturation of the color according to the HSB color space. [7]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `saturateBy(double)` which will increase the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.saturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(0,191,255)","new Color(255,68,0)","new Color(255,230,238)","new Color(210,167,110)","new Color(250,200,150)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"saturateBy(double)\" on a SwingTree color to increase the saturation of the color according to the HSB color space. [8]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `saturateBy(double)` which will increase the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.saturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(0,191,255)","new Color(255,68,0)","new Color(255,230,238)","new Color(210,167,110)","new Color(250,200,150)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"saturateBy(double)\" on a SwingTree color to increase the saturation of the color according to the HSB color space. [9]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `saturateBy(double)` which will increase the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.saturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(0,191,255)","new Color(255,68,0)","new Color(255,230,238)","new Color(210,167,110)","new Color(250,200,150)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"saturateBy(double)\" on a SwingTree color to increase the saturation of the color according to the HSB color space. [10]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `saturateBy(double)` which will increase the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.saturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(0,191,255)","new Color(255,68,0)","new Color(255,230,238)","new Color(210,167,110)","new Color(250,200,150)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"saturateBy(double)\" on a SwingTree color to increase the saturation of the color according to the HSB color space. [11]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `saturateBy(double)` which will increase the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.saturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(0,191,255)","new Color(255,68,0)","new Color(255,230,238)","new Color(210,167,110)","new Color(250,200,150)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"saturateBy(double)\" on a SwingTree color to increase the saturation of the color according to the HSB color space. [12]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `saturateBy(double)` which will increase the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.saturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(0,191,255)","new Color(255,68,0)","new Color(255,230,238)","new Color(210,167,110)","new Color(250,200,150)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"saturateBy(double)\" on a SwingTree color to increase the saturation of the color according to the HSB color space. [13]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `saturateBy(double)` which will increase the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.saturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.7","0.6","0.4","0.3","0.8","0.3","0.1","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(0,191,255)","new Color(255,68,0)","new Color(255,230,238)","new Color(210,167,110)","new Color(250,200,150)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"desaturateBy(double)\" on a SwingTree color to decrease the saturation of the color according to the HSB color space. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `desaturateBy(double)` which will decrease the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.desaturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(77,210,255)","new Color(255,178,150)","new Color(255,249,251)","new Color(210,201,189)","new Color(250,242,234)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"desaturateBy(double)\" on a SwingTree color to decrease the saturation of the color according to the HSB color space. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `desaturateBy(double)` which will decrease the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.desaturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(77,210,255)","new Color(255,178,150)","new Color(255,249,251)","new Color(210,201,189)","new Color(250,242,234)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"desaturateBy(double)\" on a SwingTree color to decrease the saturation of the color according to the HSB color space. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `desaturateBy(double)` which will decrease the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.desaturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(77,210,255)","new Color(255,178,150)","new Color(255,249,251)","new Color(210,201,189)","new Color(250,242,234)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"desaturateBy(double)\" on a SwingTree color to decrease the saturation of the color according to the HSB color space. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `desaturateBy(double)` which will decrease the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.desaturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(77,210,255)","new Color(255,178,150)","new Color(255,249,251)","new Color(210,201,189)","new Color(250,242,234)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"desaturateBy(double)\" on a SwingTree color to decrease the saturation of the color according to the HSB color space. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `desaturateBy(double)` which will decrease the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.desaturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(77,210,255)","new Color(255,178,150)","new Color(255,249,251)","new Color(210,201,189)","new Color(250,242,234)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"desaturateBy(double)\" on a SwingTree color to decrease the saturation of the color according to the HSB color space. [5]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `desaturateBy(double)` which will decrease the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.desaturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(77,210,255)","new Color(255,178,150)","new Color(255,249,251)","new Color(210,201,189)","new Color(250,242,234)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"desaturateBy(double)\" on a SwingTree color to decrease the saturation of the color according to the HSB color space. [6]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `desaturateBy(double)` which will decrease the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.desaturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(77,210,255)","new Color(255,178,150)","new Color(255,249,251)","new Color(210,201,189)","new Color(250,242,234)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"desaturateBy(double)\" on a SwingTree color to decrease the saturation of the color according to the HSB color space. [7]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `desaturateBy(double)` which will decrease the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.desaturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(77,210,255)","new Color(255,178,150)","new Color(255,249,251)","new Color(210,201,189)","new Color(250,242,234)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"desaturateBy(double)\" on a SwingTree color to decrease the saturation of the color according to the HSB color space. [8]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `desaturateBy(double)` which will decrease the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.desaturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(77,210,255)","new Color(255,178,150)","new Color(255,249,251)","new Color(210,201,189)","new Color(250,242,234)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"desaturateBy(double)\" on a SwingTree color to decrease the saturation of the color according to the HSB color space. [9]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `desaturateBy(double)` which will decrease the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.desaturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(77,210,255)","new Color(255,178,150)","new Color(255,249,251)","new Color(210,201,189)","new Color(250,242,234)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"desaturateBy(double)\" on a SwingTree color to decrease the saturation of the color according to the HSB color space. [10]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `desaturateBy(double)` which will decrease the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.desaturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(77,210,255)","new Color(255,178,150)","new Color(255,249,251)","new Color(210,201,189)","new Color(250,242,234)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"desaturateBy(double)\" on a SwingTree color to decrease the saturation of the color according to the HSB color space. [11]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `desaturateBy(double)` which will decrease the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.desaturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(77,210,255)","new Color(255,178,150)","new Color(255,249,251)","new Color(210,201,189)","new Color(250,242,234)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"desaturateBy(double)\" on a SwingTree color to decrease the saturation of the color according to the HSB color space. [12]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `desaturateBy(double)` which will decrease the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.desaturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(77,210,255)","new Color(255,178,150)","new Color(255,249,251)","new Color(210,201,189)","new Color(250,242,234)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use \"desaturateBy(double)\" on a SwingTree color to decrease the saturation of the color according to the HSB color space. [13]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The colors in SwingTree are modelled using a custom `Color` type which for \n            compatibility reasons is a subclass of java.awt.Color.\n            Among many other useful methods, the custom color type has a method called\n            `desaturateBy(double)` which will decrease the saturation of the color according to the HSB color space\n            (Hue, Saturation, Brightness).\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["colorIn.desaturateBy(factor) == saturated"]},

        {"kind":"where","text":"","code":{"colorIn":["UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"],"factor":["0.3","0.4","0.6","0.7","0.2","0.7","0.9","0.0","0.0","0.0","0.0","0.0","0.0","0.0"],"saturated":["new Color(77,210,255)","new Color(255,178,150)","new Color(255,249,251)","new Color(210,201,189)","new Color(250,242,234)","new Color(255,255,255)","new Color(0,0,0)","UI.Color.DEEPSKYBLUE","UI.Color.CORAL","UI.Color.LAVENDERBLUSH","UI.Color.TAN","UI.Color.LINEN","UI.Color.WHITE","UI.Color.BLACK"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
