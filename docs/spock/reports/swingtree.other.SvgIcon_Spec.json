{
  "className":"swingtree.other.SvgIcon_Spec",
  "title":"SVG Support through SvgIcon",
  "narrative":"Swing-Tree supports SVG icons through the `SvgIcon` class,\n    which is a subclass of `javax.swing.ImageIcon`.\n    This allows for smooth integration of SVG icons into regular\n    Swing components, like buttons, labels, etc.\n\n    In this specification we will see how to use the `SvgIcon` class.",
  "subjects":["swingtree.style.SvgIcon"],
  "statistics":{
    "runs":"6",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"A basic `SvgIcon` does not have a size.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The nature of SVG icons is that they are scalable,\n            which means that they do not have a fixed size.\n            The size is dependent on the component that uses the icon\n            or the specified size of the icon.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a basic `SvgIcon` of a funnel.","code":["var icon = new SvgIcon(\"/img/funnel.svg\")"]},

        {"kind":"expect","text":"The icon does not have a size.","code":["icon.getSvgDocument() != null","icon.getIconHeight() == -1","icon.getIconWidth()  == -1"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `SvgIcon` is immutable, and its size must be specified through wither methods.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The reason why the `SvgIcon` is immutable is because\n            it makes caching of the icon easier and safer.\n            So when you want to change the size of the icon,\n            you must use its various wither methods.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a basic `SvgIcon` of a funnel.","code":["var icon = new SvgIcon(\"/img/funnel.svg\")"]},

        {"kind":"when","text":"We use the various wither methods to create differently sized icons.","code":["var icon2 = icon.withIconWidth(12)","var icon1 = icon.withIconHeight(13)","var icon3 = icon.withIconSize(27, 16)","var icon5 = icon.withIconSizeFromWidth(31)","var icon4 = icon.withIconSizeFromHeight(24)"]},

        {"kind":"then","text":"These icons have different sizes.","code":["icon1.getIconWidth()  == -1","icon1.getIconHeight() == 13","icon2.getIconWidth()  == 12","icon2.getIconHeight() == -1","icon3.getIconWidth()  == 27","icon3.getIconHeight() == 16","icon4.getIconWidth()  == 24","icon4.getIconHeight() == 24","icon5.getIconWidth()  == 31","icon5.getIconHeight() == 31"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `String` representation of the `SvgIcon` shows its properties.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `SvgIcon` consists of various properties,\n            which are shown in the `String` representation of the icon.\n            This includes the size of the icon and how it is scaled\n            and preferably placed.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a set of various `SvgIcon`s.","code":["var icon  = new SvgIcon(\"/img/funnel.svg\")","var icon1 = icon.withIconHeight(13)","var icon2 = icon.withIconWidth(12).withFitComponent(UI.FitComponent.NO)","var icon3 = icon.withIconSize(27, 16)","var icon4 = icon.withIconSizeFromWidth(31).withPreferredPlacement(UI.Placement.BOTTOM_RIGHT)","var icon5 = icon.withIconSizeFromHeight(24)"]},

        {"kind":"and","text":"We turn each icon into its String representation:","code":["icon  = icon .toString()","icon1 = icon1.toString()","icon2 = icon2.toString()","icon3 = icon3.toString()","icon4 = icon4.toString()","icon5 = icon5.toString()"]},

        {"kind":"expect","text":"They all have the expected String representations:","code":["icon.matches( /SvgIcon\\[width=\\?, height=\\?, fitComponent=MIN_DIM, preferredPlacement=UNDEFINED, doc=.*\\]/ )","icon1.matches( /SvgIcon\\[width=\\?, height=13, fitComponent=MIN_DIM, preferredPlacement=UNDEFINED, doc=.*\\]/ )","icon2.matches( /SvgIcon\\[width=12, height=\\?, fitComponent=NO, preferredPlacement=UNDEFINED, doc=.*\\]/ )","icon3.matches( /SvgIcon\\[width=27, height=16, fitComponent=MIN_DIM, preferredPlacement=UNDEFINED, doc=.*\\]/ )","icon4.matches( /SvgIcon\\[width=31, height=31, fitComponent=MIN_DIM, preferredPlacement=BOTTOM_RIGHT, doc=.*\\]/ )","icon5.matches( /SvgIcon\\[width=24, height=24, fitComponent=MIN_DIM, preferredPlacement=UNDEFINED, doc=.*\\]/ )"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use `UI.findSvgIcon(IconDeclaration)` to load an SVG icon from a file.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `UI.findSvgIcon(IconDeclaration)` method is a convenience method\n            that allows you to load an icon from a file in the form of an `SvgIcon`.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We load an icon from a icon declaration.","code":["var declaration = IconDeclaration.of(\"/img/bubble-tree.svg\")","var icon = UI.findSvgIcon(declaration)"]},

        {"kind":"expect","text":"The icon is loaded correctly.","code":["icon.isPresent()"]},

        {"kind":"and","text":"The icon has the expected size.","code":["icon.get().getIconWidth()  == -1","icon.get().getIconHeight() == -1"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `UI.findSvgIcon(IconDeclaration)` method will not fail when the icon is not found.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `UI.findSvgIcon(IconDeclaration)` method is a convenience method\n            that allows you to load an icon from a file in the form of an `SvgIcon`.\n            When it fails to load the icon, it will return an empty `Optional`.\n            Any errors that occur during loading are logged.\n            This behaviour ensures that the frontend of the application\n            will not crash when an icon is not found.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We load an icon from a file.","code":["var declaration = IconDeclaration.of(\"/img/my-name-is-so-idiotic-that-it-will-probably-never-exist.svg\")","var icon = UI.findSvgIcon(declaration)"]},

        {"kind":"expect","text":"The icon is not loaded.","code":["icon.isEmpty()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `UI.findIcon(IconDeclaration)` method will not fail when the icon is not found.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `UI.findIcon(IconDeclaration)` method is a convenience method\n            that allows you to load an icon from a file in the form of an `SvgIcon`\n            if the file is an SVG file.\n            When it fails to load the icon, it will return an empty `Optional`.\n            Any errors that occur during loading are logged.\n            This behaviour ensures that the frontend of the application\n            will not crash when an icon is not found.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We load an icon from a file.","code":["var declaration = IconDeclaration.of(\"/img/my-name-is-so-idiotic-that-it-will-probably-never-exist.svg\")","var icon = UI.findIcon(declaration)"]},

        {"kind":"expect","text":"The icon is not loaded.","code":["icon.isEmpty()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
