{
  "className":"swingtree.Slider_Spec",
  "title":"Sliders",
  "narrative":"Sliders are a common way to allow the user to select a value\n    within a range. Swing-Tree provides a way to create sliders\n    in a declarative way, allowing you to configure the slider\n    and then show it to the user.\n\n    Sliders can be vertical or horizontal, and can have a\n    minimum and maximum value, as well as a current value.\n    You can bind any of these values to properties in your\n    application, so that the slider can update itself\n    automatically when your application state changes.",
  "subjects":["swingtree.UIForSlider","swingtree.UI"],
  "statistics":{
    "runs":"3",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Use the `slider(Align)` factory method to build a `JSlider`.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `slider(Align)` factory method returns a builder instance\n            which can be used to configure the JSlider instance\n            using method chaining.\n            Use the \"show()\" method at the end of your chain to\n            show the JSlider to the user.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var record = []"]},

        {"kind":"and","text":"Then we create UI declaration for the `JSlider` component.","code":["var slider =","        UI.slider(UI.Align.HORIZONTAL)","        .withMin(0)","        .withMax(100)","        .withValue(50)","        .onChange( it -> record << \"value changed to ${it.get().value}\" )","        .get(JSlider)"]},

        {"kind":"expect","text":"","code":["slider.minimum == 0","slider.maximum == 100","slider.value == 50"]},

        {"kind":"when","text":"","code":["UI.runNow({ slider.value = 75 })"]},

        {"kind":"then","text":"","code":["record == [\"value changed to 75\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Bind the current slider state to a double property through one of its factory methods.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can use the `slider(Align, N, N, Var<N>)` factory method\n            to bind a number based property to the slider's current value.\n            This includes floating point numbers, like `double` or `float`.\n\n            When the slider's value changes through user interaction,\n            the bound property will be updated\n            and conversely, when the property changes, the slider's \n            value will be updated.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a double based Sprouts property and a list for recording changes.","code":["var currentState = Var.of(0.42d)","var trace = []","currentState.onChange(From.ALL, it -> trace << \"property=${it.currentValue().orElseThrowUnchecked()}\" )"]},

        {"kind":"and","text":"Then we build a declarative JSlider.","code":["var slider =","        UI.slider(UI.Align.HORIZONTAL, -2d, 2d, currentState)","        .onChange( it -> trace << \"slider=${it.get().value}\" )","        .get(JSlider)"]},

        {"kind":"and","text":"We calculate the internal scale based on the min-max range","code":["var scale = UIForSlider.PREFERRED_STEPS / 4d"]},

        {"kind":"expect","text":"The slider has the correct initial state:","code":["slider.minimum == (int)(-2d * scale)","slider.maximum == (int)(2d * scale)","slider.value == (int)(0.42d * scale)"]},

        {"kind":"when","text":"We change the slider value","code":["UI.runNow({ slider.value = (int)(1.5d * scale) })"]},

        {"kind":"then","text":"The property is updated","code":["trace == [\"slider=96\", \"property=1.5\"]"]},

        {"kind":"when","text":"We change the property value","code":["UI.runNow({","    currentState.set(0.75d)","})"]},

        {"kind":"then","text":"The trace shows the property change.","code":["trace == [\"slider=96\", \"property=1.5\", \"property=0.75\"]"]},

        {"kind":"and","text":"The slider value is updated","code":["slider.value == (int)(0.75d * scale)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Bind the full slider state to a double property through one of its factory methods.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can use the `slider(Align, Val<N>, Val<N>, Var<N>)` factory method\n            to bind min, max and value properties to the slider's current state.\n            This works for any `Number` based property, including `double` or `float`.\n\n            When the slider's value changes through user interaction,\n            the bound property will be updated and conversely, when the property changes,\n            the slider's value will be updated.\n\n            The min and max range may not be updated by the user, but they can be\n            updated programmatically through the bound properties.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a double based Sprouts property and a list for recording changes.","code":["var currentState = Var.of(0.42d)","var trace = []","currentState.onChange(From.ALL, it -> trace << \"property=${it.currentValue().orElseThrowUnchecked()}\" )"]},

        {"kind":"and","text":"Two more properties for min and max","code":["var min = Var.of(-3d)","var max = Var.of(4d)","min.onChange(From.ALL, it -> trace << \"min=${it.currentValue().orElseThrowUnchecked()}\" )","max.onChange(From.ALL, it -> trace << \"max=${it.currentValue().orElseThrowUnchecked()}\" )"]},

        {"kind":"and","text":"Then we build a declarative JSlider.","code":["var slider =","        UI.slider(UI.Align.VERTICAL, min, max, currentState)","        .onChange( it -> trace << \"slider=${it.get().value}\" )","        .get(JSlider)"]},

        {"kind":"and","text":"We calculate the internal scale based on the min-max range","code":["var scale = UIForSlider.PREFERRED_STEPS / 7d"]},

        {"kind":"expect","text":"The slider has the correct initial state:","code":["slider.minimum == (int)(-3d * scale)","slider.maximum == (int)(4d * scale)","slider.value == (int)(0.42d * scale)"]},

        {"kind":"when","text":"We change the slider value","code":["UI.runNow({ slider.value = (int)(2.5d * scale) })"]},

        {"kind":"then","text":"The property is updated","code":["trace == [\"slider=91\", \"property=2.48828125\"]"]},

        {"kind":"when","text":"We change the property value","code":["UI.runNow({","    currentState.set(0.75d)","})"]},

        {"kind":"then","text":"The trace shows the property change.","code":["trace == [\"slider=91\", \"property=2.48828125\", \"property=0.75\"]"]},

        {"kind":"when","text":"We change the min value and recalculate the scale.","code":["UI.runNow({","    min.set(-1d)","})","scale = UIForSlider.PREFERRED_STEPS / 5d"]},

        {"kind":"then","text":"The trace shows the min change.","code":["trace == [\"slider=91\", \"property=2.48828125\", \"property=0.75\", \"min=-1.0\"]"]},

        {"kind":"and","text":"The sliders min value is updated","code":["slider.minimum == (int)(-1d * scale)"]},

        {"kind":"when","text":"We change the max value and recalculate the scale again.","code":["UI.runNow({","    max.set(2d)","})","scale = UIForSlider.PREFERRED_STEPS / 3d"]},

        {"kind":"then","text":"The trace shows the max change.","code":["trace == [\"slider=91\", \"property=2.48828125\", \"property=0.75\", \"min=-1.0\", \"max=2.0\"]"]},

        {"kind":"and","text":"The sliders max value is updated","code":["slider.maximum == (int)(2d * scale)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
