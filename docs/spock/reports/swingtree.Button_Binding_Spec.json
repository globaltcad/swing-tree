{
  "className":"swingtree.Button_Binding_Spec",
  "title":"Button Binding",
  "narrative":"As a developer, I want to bind a button to a property so\n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive.\n\n    A typical use case for button types is to bind\n    their selection state to a property in the view model.\n    This property may be boolean based, or something entirely\n    different.",
  "subjects":["swingtree.UIForAnyButton","swingtree.UIForToggleButton","swingtree.UIForRadioButton"],
  "statistics":{
    "runs":"9",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"We can bind to the text of a button.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Note that for a binding to work, the property must be a `Var` or `Val`\n            implementation. All you have to do to then change the state of the UI component\n            is changing the state of the property by calling its \"set\" method.\n            Internally it will then call the \"show()\" method for you \n            which triggers the observers registered by the UI.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple Sprouts property for modelling the text displaying a documentary link.","code":["Val<String> documentary = Var.of(\"dominionmovement.com\")"]},

        {"kind":"when","text":"We create and bind to a button UI node...","code":["var ui = UI.button(\"\").withText(documentary)"]},

        {"kind":"and","text":"Build the component:","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The button should be updated when the property is changed and shown.","code":["button.text == \"dominionmovement.com\""]},

        {"kind":"when","text":"We change the property value to another documentary domain...","code":["documentary.set(\"landofhopeandglory.org\")"]},

        {"kind":"and","text":"Then we wait for the EDT to complete the UI modifications...","code":["UI.sync()"]},

        {"kind":"then","text":"The button should be updated to show the new text.","code":["button.text == \"landofhopeandglory.org\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can bind to the selection state of a button.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Note that this works with all kinds of buttons, not just the JButton.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple swing-tree property for modelling the selection state.","code":["Val<Boolean> selected = Var.of(false)"]},

        {"kind":"when","text":"We create and bind to a button UI node...","code":["var ui = UI.button(\"\").isSelectedIf(selected)"]},

        {"kind":"and","text":"Build the component:","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The button should be updated when the property is changed and shown.","code":["button.selected == false"]},

        {"kind":"when","text":"We change the property value...","code":["selected.set(true)"]},

        {"kind":"and","text":"Then we wait for the EDT to complete the UI modifications...","code":["UI.sync()"]},

        {"kind":"then","text":"The button should be updated.","code":["button.selected == true"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can bind to the enabled state of a button.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["  \n            Note that this works with all kinds of buttons, not just the JButton.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple swing-tree property for modelling the selection state.","code":["Val<Boolean> enabled = Var.of(false)"]},

        {"kind":"when","text":"We create and bind to a button UI node...","code":["var ui = UI.button(\"\").isEnabledIf(enabled)"]},

        {"kind":"and","text":"Build the component:","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The button should be updated when the property is changed and shown.","code":["button.enabled == false"]},

        {"kind":"when","text":"We change the property value...","code":["enabled.set(true)"]},

        {"kind":"and","text":"Then we wait for the EDT to complete the UI modifications...","code":["UI.sync()"]},

        {"kind":"then","text":"The button should be updated.","code":["button.enabled == true"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A button group will not only synchronize the selection state of radio buttons, but also bound properties.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Using a button group is a convenient way to synchronize the selection state of radio buttons.\n            When one radio button is selected, all other radio buttons in the same group will be deselected.\n            This is a very common pattern in UIs, and swing-tree makes it easy to implement\n            along with the binding of properties.\n            So the selection states of a radio buttons will also\n            translate to the selection state of all bound properties.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"Three simple boolean properties:","code":["Val<Boolean> selected1 = Var.of(false)","Val<Boolean> selected2 = Var.of(false)","Val<Boolean> selected3 = Var.of(false)"]},

        {"kind":"and","text":"A button group for synchronizing the selection state of the radio buttons.","code":["ButtonGroup buttonGroup = new ButtonGroup()"]},

        {"kind":"and","text":"We create three radio buttons and bind them to the properties.","code":["var ui1 = UI.radioButton(\"1\").withButtonGroup(buttonGroup).isSelectedIf(selected1)","var ui2 = UI.radioButton(\"2\").withButtonGroup(buttonGroup).isSelectedIf(selected2)","var ui3 = UI.radioButton(\"3\").withButtonGroup(buttonGroup).isSelectedIf(selected3)"]},

        {"kind":"and","text":"We create the three buttons:","code":["var button1 = ui1.get(JRadioButton)","var button2 = ui2.get(JRadioButton)","var button3 = ui3.get(JRadioButton)"]},

        {"kind":"when","text":"We select the first radio button...","code":["button1.selected = true"]},

        {"kind":"and","text":"Then we wait for the EDT to complete the UI modifications...","code":["UI.sync()"]},

        {"kind":"then","text":"Both the buttons and the properties have the correct state:","code":["button1.selected == true","button2.selected == false","button3.selected == false","selected1.get() == true","selected2.get() == false","selected3.get() == false"]},

        {"kind":"when","text":"We select the second radio button...","code":["button2.selected = true"]},

        {"kind":"and","text":"Then we wait for the EDT to complete the UI modifications...","code":["UI.sync()"]},

        {"kind":"then","text":"Both the buttons and the properties have the correct state:","code":["button1.selected == false","button2.selected == true","button3.selected == false","selected1.get() == false","selected2.get() == true","selected3.get() == false"]},

        {"kind":"when","text":"We select the third radio button...","code":["button3.selected = true"]},

        {"kind":"and","text":"Then we wait for the EDT to complete the UI modifications...","code":["UI.sync()"]},

        {"kind":"then","text":"Both the buttons and the properties have the correct state:","code":["button1.selected == false","button2.selected == false","button3.selected == true","selected1.get() == false","selected2.get() == false","selected3.get() == true"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Bind the \"isSelected\" flag of a button to the equality between an enum and a enum property",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This feature makes it so that the provided property will cause the button\n            to be selected if its value is equal to the enum value passed to the method.\n\n            This feature is especially useful for radio buttons.\n            Here we are going to use the following enum:\n            ```\n            enum SelectionState { SELECTED, NOT_SELECTED }\n            ```\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple swing-tree property for modelling the selection state.","code":["Val<SelectionState> selectionState = Var.of(SelectionState.NOT_SELECTED)"]},

        {"kind":"when","text":"We create and bind to a button UI node...","code":["var ui = UI.button(\"test\").isSelectedIf(SelectionState.SELECTED, selectionState)"]},

        {"kind":"and","text":"Build the component:","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The button should be updated when the property is changed and shown.","code":["button.selected == false"]},

        {"kind":"and","text":"The button has the expected text.","code":["button.text == \"test\""]},

        {"kind":"when","text":"We change the property value...","code":["selectionState.set(SelectionState.SELECTED)"]},

        {"kind":"and","text":"Then we wait for the EDT to complete the UI modifications...","code":["UI.sync()"]},

        {"kind":"then","text":"The button should be updated.","code":["button.selected == true"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Bind the \"isSelected\" flag of a button to the inequality between an enum and a enum property",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This feature makes it so that the provided property will cause the button\n            to be selected if its value is NOT equal to the enum value passed to the method.\n\n            Here we are going to use the following enum:\n            ```\n            enum SelectionState { SELECTED, NOT_SELECTED }\n            ```\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple swing-tree property for modelling the selection state.","code":["Val<SelectionState> selectionState = Var.of(SelectionState.NOT_SELECTED)"]},

        {"kind":"when","text":"We create and bind to a button displaying a link to a website...","code":["var ui =","            UI.button(\"cowspiracy.com\")","            .isSelectedIfNot(SelectionState.SELECTED, selectionState)"]},

        {"kind":"and","text":"Build the component:","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The button should be updated when the property is changed and shown.","code":["button.selected == true"]},

        {"kind":"and","text":"The button has set the text with the link that we previously declared.","code":["button.text == \"cowspiracy.com\""]},

        {"kind":"when","text":"We change the property value...","code":["selectionState.set(SelectionState.SELECTED)","UI.sync()"]},

        {"kind":"then","text":"The button should be updated.","code":["button.selected == false"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Directly bind any property to the selection state of a radio button.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A typical use-case is for a radio button\n            to be selected in case of a property to\n            be equal to a certain value and deselected\n            otherwise.\n\n            In this example, the property is String based.\n            and the radio button is selected in case the\n            property is equal to a specific target value.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first create the variables which are typically \n            used in the view model.\n            A property and a target value.\n        ","code":["var food = Var.of(\"おにぎり\")","var target = \"ビーガン\""]},

        {"kind":"and","text":"\n            We then create a radio button and bind the selection\n            state of the radio button to the property.\n        ","code":["var radioButton =","        UI.radioButton(\"Is Vegan\", target, food)","        .get(JRadioButton.class)"]},

        {"kind":"expect","text":"\n            The radio button is deselected initially\n            because the property value is not equal to the target value.\n        ","code":["!radioButton.isSelected()"]},

        {"kind":"and","text":"The radio button has the expected text.","code":["radioButton.text == \"Is Vegan\""]},

        {"kind":"when","text":"We then change the property to the target value.","code":["food.set(target)","UI.sync()"]},

        {"kind":"then","text":"The radio button is selected as the property value is equal to the target value.","code":["radioButton.isSelected()"]},

        {"kind":"when","text":"We then change the property to a different value.","code":["food.set(\"カレー\")","UI.sync()"]},

        {"kind":"then","text":"The radio button is deselected again.","code":["!radioButton.isSelected()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Directly bind an enum based property to the selection state of a radio button.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A typical use-case is for a radio button\n            to be selected in case of an enum property to\n            be equal to a certain value and deselected\n            otherwise.\n\n            In this example, the property is based on the following enum:\n            ```\n            enum Size { SMALL, MEDIUM, LARGE }\n            ```\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first create the variables which are typically \n            used in the view model.\n            A property and a target value.\n        ","code":["var size = Var.of(Size.SMALL)","var target = Size.LARGE"]},

        {"kind":"and","text":"\n            We then create a radio button and bind the selection\n            state of the radio button to the property.\n        ","code":["var radioButton =","        UI.radioButton( target, size )","        .get(JRadioButton.class)"]},

        {"kind":"expect","text":"\n            The radio button is deselected initially\n            because the property value is not equal to the target value.\n        ","code":["!radioButton.isSelected()"]},

        {"kind":"and","text":"The radio button has the expected text.","code":["radioButton.text == \"LARGE\""]},

        {"kind":"when","text":"We then change the property to the target value.","code":["size.set(target)","UI.sync()"]},

        {"kind":"then","text":"The radio button is selected as the property value is equal to the target value.","code":["radioButton.isSelected()"]},

        {"kind":"when","text":"We then change the property to a different value.","code":["size.set(Size.MEDIUM)","UI.sync()"]},

        {"kind":"then","text":"The radio button is deselected again.","code":["!radioButton.isSelected()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can bind the icon as well as selection state of a toggle button to properties.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A typical use-case is for a toggle button\n            is to have both its selection flag as well as its icon\n            bound to properties.\n            One could for example make the icon change based on the selection state,\n            which is what we are testing here.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"Two icon declarations pointing to icons in the test suite resource directory.","code":["IconDeclaration ICON1 = IconDeclaration.of(\"img/swing.png\")","IconDeclaration ICON2 = IconDeclaration.of(\"img/funnel.svg\")"]},

        {"kind":"and","text":"\n            A boolean property together with an icon property that is \n            dynamically computed from the boolean property.\n            So when the boolean property is true, then we use\n            the first icon declaration.\n            And when it is false, we use the other one.\n        ","code":["Var<Boolean> isToggled = Var.of(true)","Val<IconDeclaration> icon = isToggled.viewAs(IconDeclaration.class, o -> o ? ICON1 : ICON2)"]},

        {"kind":"and","text":"","code":["var button =","                UI.toggleButtonWithIcon(icon, isToggled).id(\"my-button\")","                .withPrefHeight(15).withMinHeight(15)","                .withPrefWidth(45).withMinWidth(45)","                .get(JToggleButton.class)"]},

        {"kind":"expect","text":"The button was initialized from the state of the properties.","code":["button.selected == true","button.icon == ICON1.find().get()"]},

        {"kind":"when","text":"We invert the boolean property...","code":["isToggled.set(false)","UI.sync()"]},

        {"kind":"then","text":"The button has changed its selection and icon accordingly.","code":["button.selected == false","button.icon == ICON2.find().get()"]},

        {"kind":"when","text":"We set the property back to `true` again...","code":["isToggled.set(true)","UI.sync()"]},

        {"kind":"then","text":"We are back at the initial state. The binding worked!","code":["button.selected == true","button.icon == ICON1.find().get()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
