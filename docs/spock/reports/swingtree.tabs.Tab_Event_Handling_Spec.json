{
  "className":"swingtree.tabs.Tab_Event_Handling_Spec",
  "title":"Tab Event Handling",
  "narrative":"When building a tabbed pane using SwingTree, you often want to react to\n    events that occur on the tabs of a `JTabbedPane`. \n    For example, you may want trigger some action when a tab is selected.\n\n    In this specification, we will see how to handle events on tabs.",
  "subjects":["swingtree.UIForTabbedPane"],
  "statistics":{
    "runs":"6",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Use the \"onTabMouseClick\" to receive mouse click events on tabs.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This action event not only tells you when a user clicks on a tab,\n            the delegate received by the event handler also tells you which tab\n            was clicked and how many times it was clicked.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A list we use to record some event information.","code":["var trace = []"]},

        {"kind":"and","text":"A tabbed pane with 3 tabs.","code":["JTabbedPane ui =","                UI.tabbedPane().withSize(280,120)","                .onTabMouseClick( it -> trace << \"T${it.tabIndex()+1}, clicked ${it.clickCount()} times\" )","                .add(UI.tab(\"T1\"))","                .add(UI.tab(\"T2\"))","                .add(UI.tab(\"T3\"))","                .get(JTabbedPane)"]},

        {"kind":"and","text":"We get the bounding boxes of the 3 tab buttons.","code":["Rectangle tab1Bounds = ui.getBoundsAt(0)","Rectangle tab2Bounds = ui.getBoundsAt(1)","Rectangle tab3Bounds = ui.getBoundsAt(2)"]},

        {"kind":"when","text":"We simulate a mouse click in the middle of the second tab.","code":["int x = tab2Bounds.x + tab2Bounds.width / 2","int y = tab2Bounds.y + tab2Bounds.height / 2","var event = new MouseEvent(ui, MouseEvent.MOUSE_CLICKED, 0, 0, x, y, 1, false)","ui.dispatchEvent(event)"]},

        {"kind":"and","text":"We wait for the AWT thread to do its thing.","code":["UI.sync()"]},

        {"kind":"then","text":"The event handler is called.","code":["trace == [\"T2, clicked 1 times\"]"]},

        {"kind":"when","text":"We do the same with the other 2 tabs.","code":["x = tab1Bounds.x + tab1Bounds.width / 2","y = tab1Bounds.y + tab1Bounds.height / 2","event = new MouseEvent(ui, MouseEvent.MOUSE_CLICKED, 0, 0, x, y, 2, false)","ui.dispatchEvent(event)","x = tab3Bounds.x + tab3Bounds.width / 2","y = tab3Bounds.y + tab3Bounds.height / 2","event = new MouseEvent(ui, MouseEvent.MOUSE_CLICKED, 0, 0, x, y, 42, false)","ui.dispatchEvent(event)","UI.sync()"]},

        {"kind":"then","text":"The event handler is called for each tab.","code":["trace == [\"T2, clicked 1 times\", \"T1, clicked 2 times\", \"T3, clicked 42 times\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"onTabMousePress\" event handler is called when the mouse is pressed on a tab.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This action event is essentially the first part of a mouse click event.\n            It tells you when a user presses the mouse button on a tab.\n            So this will be called before the \"onTabMouseClick\" event handler\n            and the \"onTabMouseRelease\" event handler.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A list we use to record some event information.","code":["var trace = []"]},

        {"kind":"and","text":"A tabbed pane with 2 tabs.","code":["JTabbedPane ui =","                UI.tabbedPane().withSize(280,120)","                .onTabMousePress( it -> trace << \"T${it.tabIndex()+1}, pressed\" )","                .add(UI.tab(\"T1\"))","                .add(UI.tab(\"T2\"))","                .get(JTabbedPane)"]},

        {"kind":"and","text":"We get the bounding boxes of the 2 tab buttons.","code":["Rectangle tab1Bounds = ui.getBoundsAt(0)","Rectangle tab2Bounds = ui.getBoundsAt(1)"]},

        {"kind":"when","text":"We simulate a mouse press in the middle of the second tab.","code":["int x = tab2Bounds.x + tab2Bounds.width / 2","int y = tab2Bounds.y + tab2Bounds.height / 2","var event = new MouseEvent(ui, MouseEvent.MOUSE_PRESSED, 0, 0, x, y, 1, false)","ui.dispatchEvent(event)"]},

        {"kind":"and","text":"We wait for the AWT thread to do its thing.","code":["UI.sync()"]},

        {"kind":"then","text":"The event handler is called.","code":["trace == [\"T2, pressed\"]"]},

        {"kind":"when","text":"We do the same with the other tab.","code":["x = tab1Bounds.x + tab1Bounds.width / 2","y = tab1Bounds.y + tab1Bounds.height / 2","event = new MouseEvent(ui, MouseEvent.MOUSE_PRESSED, 0, 0, x, y, 2, false)","ui.dispatchEvent(event)","UI.sync()"]},

        {"kind":"then","text":"The event handler is called for each tab.","code":["trace == [\"T2, pressed\", \"T1, pressed\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"onTabMouseRelease\" event handler can be used to notice when the mouse press is released on a tab.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This action event is essentially the last part of a whole mouse click event.\n            It tells you when a user releases the mouse button on a tab (after pressing it).\n            So this will be called after the \"onTabMousePress\" event handler.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A list we use to record some event information.","code":["var trace = []"]},

        {"kind":"and","text":"A tabbed pane with 2 tabs.","code":["JTabbedPane ui =","                UI.tabbedPane().withSize(280,120)","                .onTabMouseRelease( it -> trace << \"T${it.tabIndex()+1}, released\" )","                .add(UI.tab(\"T1\"))","                .add(UI.tab(\"T2\"))","                .get(JTabbedPane)"]},

        {"kind":"and","text":"We get the bounding boxes of the 2 tab buttons.","code":["Rectangle tab1Bounds = ui.getBoundsAt(0)","Rectangle tab2Bounds = ui.getBoundsAt(1)"]},

        {"kind":"when","text":"We simulate a mouse release in the middle of the second tab.","code":["int x = tab2Bounds.x + tab2Bounds.width / 2","int y = tab2Bounds.y + tab2Bounds.height / 2","var event = new MouseEvent(ui, MouseEvent.MOUSE_RELEASED, 0, 0, x, y, 1, false)","ui.dispatchEvent(event)"]},

        {"kind":"and","text":"We wait for the AWT thread to do its thing.","code":["UI.sync()"]},

        {"kind":"then","text":"The event handler is called.","code":["trace == [\"T2, released\"]"]},

        {"kind":"when","text":"We do the same with the other tab.","code":["x = tab1Bounds.x + tab1Bounds.width / 2","y = tab1Bounds.y + tab1Bounds.height / 2","event = new MouseEvent(ui, MouseEvent.MOUSE_RELEASED, 0, 0, x, y, 2, false)","ui.dispatchEvent(event)","UI.sync()"]},

        {"kind":"then","text":"The event handler is called for each tab.","code":["trace == [\"T2, released\", \"T1, released\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"TabMouse-Events\" will not receive events if the mouse is outside of the tab bounds!",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The \"TabMouse-Events\" will not receive events if the mouse is outside of the tab bounds!\n            This includes the \"onTabMouseClick\", \"onTabMousePress\" and \"onTabMouseRelease\" event handlers.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A list we use to record some event information.","code":["var trace = []"]},

        {"kind":"and","text":"A tabbed pane with 2 tabs and the 3 event listeners:","code":["JTabbedPane ui =","                UI.tabbedPane().withSize(280,120)","                .onTabMouseClick( it -> trace << \"T${it.tabIndex()+1}, clicked ${it.clickCount()} times\" )","                .onTabMouseRelease( it -> trace << \"T${it.tabIndex()+1}, released\" )","                .onTabMousePress( it -> trace << \"T${it.tabIndex()+1}, pressed\" )","                .add(UI.tab(\"T1\"))","                .add(UI.tab(\"T2\"))","                .add(UI.tab(\"T3\"))","                .get(JTabbedPane)"]},

        {"kind":"when","text":"\n            We now dispatch a whole lot of mouse events to the tabbed pane\n            with nonsense coordinates that are outside of the tab bounds.\n        ","code":["ui.dispatchEvent(new MouseEvent(ui, MouseEvent.MOUSE_CLICKED, 0, 0, -10, -1, 1, false))","ui.dispatchEvent(new MouseEvent(ui, MouseEvent.MOUSE_CLICKED, 0, 0, -33, 42, 1, false))","ui.dispatchEvent(new MouseEvent(ui, MouseEvent.MOUSE_PRESSED, 0, 0, -1, -10, 1, false))","ui.dispatchEvent(new MouseEvent(ui, MouseEvent.MOUSE_PRESSED, 0, 0, 9000, -400, 1, false))","ui.dispatchEvent(new MouseEvent(ui, MouseEvent.MOUSE_RELEASED, 0, 0, -12, 0, 1, false))","ui.dispatchEvent(new MouseEvent(ui, MouseEvent.MOUSE_RELEASED, 0, 0, 666, 999, 1, false))"]},

        {"kind":"and","text":"We wait for the AWT thread to do its thing.","code":["UI.sync()"]},

        {"kind":"then","text":"The event handlers are not called.","code":["trace == []"]},

        {"kind":"when","text":"\n            We now get the bounding boxes of the 3 tab buttons\n            and simulate valid mouse events in the middle of each tab...\n        ","code":["Rectangle tab1Bounds = ui.getBoundsAt(0)","Rectangle tab2Bounds = ui.getBoundsAt(1)","Rectangle tab3Bounds = ui.getBoundsAt(2)","int x = tab1Bounds.x + tab1Bounds.width / 2","int y = tab1Bounds.y + tab1Bounds.height / 2","ui.dispatchEvent(new MouseEvent(ui, MouseEvent.MOUSE_CLICKED, 0, 0, x, y, 1, false))","ui.dispatchEvent(new MouseEvent(ui, MouseEvent.MOUSE_PRESSED, 0, 0, x, y, 1, false))","ui.dispatchEvent(new MouseEvent(ui, MouseEvent.MOUSE_RELEASED, 0, 0, x, y, 1, false))","x = tab2Bounds.x + tab2Bounds.width / 2","y = tab2Bounds.y + tab2Bounds.height / 2","ui.dispatchEvent(new MouseEvent(ui, MouseEvent.MOUSE_CLICKED, 0, 0, x, y, 1, false))","ui.dispatchEvent(new MouseEvent(ui, MouseEvent.MOUSE_PRESSED, 0, 0, x, y, 1, false))","ui.dispatchEvent(new MouseEvent(ui, MouseEvent.MOUSE_RELEASED, 0, 0, x, y, 1, false))","x = tab3Bounds.x + tab3Bounds.width / 2","y = tab3Bounds.y + tab3Bounds.height / 2","ui.dispatchEvent(new MouseEvent(ui, MouseEvent.MOUSE_CLICKED, 0, 0, x, y, 1, false))","ui.dispatchEvent(new MouseEvent(ui, MouseEvent.MOUSE_PRESSED, 0, 0, x, y, 1, false))","ui.dispatchEvent(new MouseEvent(ui, MouseEvent.MOUSE_RELEASED, 0, 0, x, y, 1, false))","UI.sync() // Note that all of this has to be done on the AWT thread!"]},

        {"kind":"then","text":"The event handlers are called.","code":["trace == [","    \"T1, clicked 1 times\", \"T1, pressed\", \"T1, released\",","    \"T2, clicked 1 times\", \"T2, pressed\", \"T2, released\",","    \"T3, clicked 1 times\", \"T3, pressed\", \"T3, released\"","]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Notice when the mouse enters a tab using the \"onTabMouseEnter\" event handler.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This action event is called when the mouse enters a tab.\n            It is called before the \"onTabMouseExit\" event handler.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A list we use to record some event information.","code":["var trace = []"]},

        {"kind":"and","text":"A tabbed pane with 2 tabs.","code":["JTabbedPane ui =","                UI.tabbedPane().withSize(280,120)","                .onTabMouseEnter( it -> trace << \"T${it.tabIndex()+1}, entered\" )","                .add(UI.tab(\"T1\"))","                .add(UI.tab(\"T2\"))","                .get(JTabbedPane)"]},

        {"kind":"and","text":"We get the bounding boxes of the 2 tab buttons.","code":["Rectangle tab1Bounds = ui.getBoundsAt(0)","Rectangle tab2Bounds = ui.getBoundsAt(1)"]},

        {"kind":"when","text":"We simulate a mouse enter in the middle of the second tab.","code":["int x = tab2Bounds.x + tab2Bounds.width / 2","int y = tab2Bounds.y + tab2Bounds.height / 2","var event = new MouseEvent(ui, MouseEvent.MOUSE_ENTERED, 0, 0, x, y, 1, false)","ui.dispatchEvent(event)"]},

        {"kind":"and","text":"We wait for the AWT thread to do its thing.","code":["UI.sync()"]},

        {"kind":"then","text":"The event handler is called.","code":["trace == [\"T2, entered\"]"]},

        {"kind":"when","text":"We do the same with the other tab.","code":["x = tab1Bounds.x + tab1Bounds.width / 2","y = tab1Bounds.y + tab1Bounds.height / 2","event = new MouseEvent(ui, MouseEvent.MOUSE_ENTERED, 0, 0, x, y, 2, false)","ui.dispatchEvent(event)","UI.sync()"]},

        {"kind":"then","text":"The event handler is called for each tab.","code":["trace == [\"T2, entered\", \"T1, entered\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Notice when the mouse exits a tab using the \"onTabMouseExit\" event handler.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This action event is called when the mouse exits a tab.\n            It is called after the \"onTabMouseEnter\" event handler.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A list we use to record some event information.","code":["var trace = []"]},

        {"kind":"and","text":"A tabbed pane with 2 tabs.","code":["JTabbedPane ui =","                UI.tabbedPane().withSize(280,120)","                .onTabMouseExit( it -> trace << \"T${it.tabIndex()+1}, exited\" )","                .add(UI.tab(\"T1\"))","                .add(UI.tab(\"T2\"))","                .get(JTabbedPane)"]},

        {"kind":"and","text":"We get the bounding boxes of the 2 tab buttons.","code":["Rectangle tab1Bounds = ui.getBoundsAt(0)","Rectangle tab2Bounds = ui.getBoundsAt(1)"]},

        {"kind":"when","text":"We simulate a mouse exit in the middle of the second tab.","code":["int x = tab2Bounds.x + tab2Bounds.width / 2","int y = tab2Bounds.y + tab2Bounds.height / 2","var event = new MouseEvent(ui, MouseEvent.MOUSE_EXITED, 0, 0, x, y, 1, false)","ui.dispatchEvent(event)"]},

        {"kind":"and","text":"We wait for the AWT thread to do its thing.","code":["UI.sync()"]},

        {"kind":"then","text":"The event handler is called.","code":["trace == [\"T2, exited\"]"]},

        {"kind":"when","text":"We do the same with the other tab.","code":["x = tab1Bounds.x + tab1Bounds.width / 2","y = tab1Bounds.y + tab1Bounds.height / 2","event = new MouseEvent(ui, MouseEvent.MOUSE_EXITED, 0, 0, x, y, 2, false)","ui.dispatchEvent(event)","UI.sync()"]},

        {"kind":"then","text":"The event handler is called for each tab.","code":["trace == [\"T2, exited\", \"T1, exited\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
