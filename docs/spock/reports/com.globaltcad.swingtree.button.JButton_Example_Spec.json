{
  "className":"com.globaltcad.swingtree.button.JButton_Example_Spec",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"3",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.799 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"We can easily create a button with an associated action:",
      "result":"PASS",
      "duration":"0.412 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a basic button which will a simple \"onClick\".","code":["var ui =","    UI.button(\"I am displayed on the button!\")","    .onClick( it -> it.component.setEnabled(false) )"]},

        {"kind":"expect","text":"The component wrapped by the UI builder is in fact a simple button:","code":["ui.component instanceof JButton"]},

        {"kind":"and","text":"The button is enabled by default!","code":["ui.component.isEnabled()"]},

        {"kind":"when","text":"We simulate a user click...","code":["UI.runNow( ()-> ui.component.doClick() )"]},

        {"kind":"then","text":"The button will be disabled because of the click action we specified!","code":["!ui.component.isEnabled()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A button will delegate its siblings within actions:",
      "result":"PASS",
      "duration":"0.152 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a panel with a label and a button!","code":["var ui =","    UI.panel()","        .add(UI.label(\"Button:\"))","        .add(","            UI.button(\"Click me!\")","            .onClick( it -> it.siblings.each {s -> s.setEnabled(false)} )","        )"]},

        {"kind":"expect","text":"The components wrapped by the UI builder are as expected:","code":["ui.component.getComponent(0) instanceof JLabel","ui.component.getComponent(1) instanceof JButton"]},

        {"kind":"and","text":"They are enabled by default!","code":["ui.component.getComponent(0).isEnabled()","ui.component.getComponent(1).isEnabled()"]},

        {"kind":"when","text":"We simulate a user click...","code":["UI.runNow( () -> ui.component.getComponent(1).doClick() )"]},

        {"kind":"then","text":"They are enabled by default!","code":["!ui.component.getComponent(0).isEnabled()","ui.component.getComponent(1).isEnabled()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can go through the entire siblinghood, including the current button!",
      "result":"PASS",
      "duration":"0.189 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a panel with some random components and a fancy click action","code":["var ui =","    UI.panel()","    .add(UI.textField(\"text field\"))","    .add(UI.label(\"innocent label\"))","    .add(","        UI.button(\"Click me!\")","        .onClick(it ->","            it.siblinghood.each {s -> { if ( s instanceof JLabel ) s.setText(\"I got hacked!\") }}","        )","    )","    .add(UI.spinner())"]},

        {"kind":"when","text":"We simulate a user click...","code":["UI.runNow( () -> ui.component.getComponent(2).doClick() )"]},

        {"kind":"then","text":"The label text changed!","code":["ui.component.getComponent(1).getText() == \"I got hacked!\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}