{
  "className":"swingtree.examples.Examples_Spec",
  "title":"Examples UIs",
  "narrative":"This is an overview of the various example UIs\n    in the test suite.\n\n    This specification also ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected state and appearance.",
  "subjects":[],
  "statistics":{
    "runs":"1",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"The advanced UI define in the examples has the expected state.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create the UI.","code":["var ui = AdvancedUI.of(null)"]},

        {"kind":"expect","text":"","code":["new Utility.Query(ui).find(JLabel, \"APIC-label\").isPresent()","new Utility.Query(ui).find(JLabel, \"APIC-label\").get().text == \"6.0\""]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JTabbedPane, \"APIC-Tabs\").isPresent()","new Utility.Query(ui).find(JTabbedPane, \"APIC-Tabs\").get().getTabCount() == 9"]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JSpinner, \"Light-Spinner\").isPresent()","new Utility.Query(ui).find(JSpinner, \"Light-Spinner\").get().getValue() == 0"]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JSplitButton, \"con-split-button\").isPresent()","new Utility.Query(ui).find(JSplitButton, \"con-split-button\").get().popupMenu.components.length == 4"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The form UI defined in the examples has the expected state.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We get the UI.","code":["var ui = new Form()"]},

        {"kind":"expect","text":"\n            We should be able to find the hover icon button and it should have the expected state.\n        ","code":["new Utility.Query(ui).find(JButton, \"hover-icon-button\").isPresent()","new Utility.Query(ui).find(JButton, \"hover-icon-button\").get().text == \"\"","new Utility.Query(ui).find(JButton, \"hover-icon-button\").get().icon != null","new Utility.Query(ui).find(JButton, \"hover-icon-button\").get().pressedIcon != null","new Utility.Query(ui).find(JButton, \"hover-icon-button\").get().rolloverIcon != null"]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JButton, \"hover-icon-button\").get().cursor.type == Cursor.HAND_CURSOR"]},

        {"kind":"and","text":"","code":["Utility.similarityBetween(ui, \"views/simple-form-UI.png\", 99.9) > 99.9"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The login example UI defined in the examples, a good MVVM demonstration.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new LoginView(new LoginViewModel())"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The user registration example UI defined in the examples, a good MVVM demonstration.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new UserRegistrationView(new UserRegistrationViewModel())"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The list examples UI defined in the examples can be created.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new ListSearchView(new ListSearchViewModel())"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The box shadow picker example UI defined in the examples can be created.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new BoxShadowPickerView(new BoxShadowPickerViewModel())"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The note guesser example UI defined in the examples can be created.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create an instance of the UI.","code":["var ui = new NoteGuesserView(new NoteGuesserViewModel())"]},

        {"kind":"expect","text":"It is rendered as shown in the image.","code":["Utility.similarityBetween(ui, \"views/note-guesser-UI.png\", 93) > 93"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The symbol guesser example UI defined in the examples can be created.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new SymbolGuesserView(new SymbolGuesserViewModel())"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"Well rounded\" style example UI defined in the examples can be created.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create the UI.","code":["var ui = new WellRoundedView()"]},

        {"kind":"expect","text":"It is rendered as shown in the image.","code":["Utility.similarityBetween(ui, \"views/well-rounded-UI.png\", 98.1) > 98.1"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The soft example UI is rendered as expected.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The soft example UI looks like this:\n            <img src=\"https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/views/soft-example-UI.png\" alt=\"views/soft-example-UI.png\" style=\"max-width: 50%;\" />\n\n            This is the most advanced example of how to use the SwingTree style API to\n            customize the look and feel of your entire application.\n            You can turn a plain old metal look and feel into a modern \n            soft UI with just a few lines of code.\n\n            Here we will only test looks of the UI, if you want to see the code,\n            <a href=\"https://github.com/globaltcad/swing-tree/blob/main/src/test/java/examples/stylish/SoftUIView.java\" target=\"_blank\">click here</a> to visit the class.\n            And also feel free to run\n            it yourself, it has a main method for that purpose already.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create the UI.","code":["var ui = new SoftUIView()"]},

        {"kind":"expect","text":"It is rendered as shown in the image.","code":["Utility.similarityBetween(ui, \"views/soft-example-UI.png\", 99) > 99"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The animated buttons view examples UI defined in the examples looks as expected.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create the UI.","code":["var ui = new AnimatedButtonsView()","ui.setBackground(new Color(242, 242, 242))"]},

        {"kind":"expect","text":"It is rendered as shown in the image.","code":["Utility.similarityBetween(ui, \"views/animated-buttons-UI.png\", 98.3) > 98.3"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The animation example view can be created.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new AnimatedView(Mock(JFrame))"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The settings example UI defined in the examples looks as expected.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing(SwingTreeTestConfigurator.get())","var view = new SomeSettingsView(new SomeSettingsViewModel())","var speedTextField = new Utility.Query(view).find(JTextField, \"speed-text-field\").orElse(null)"]},

        {"kind":"expect","text":"","code":["view != null","speedTextField != null"]},

        {"kind":"and","text":"","code":["speedTextField.text == \"42.0\"","speedTextField.background == Color.WHITE"]},

        {"kind":"when","text":"We rerender the view offscreen...","code":["var similarity1 = Utility.similarityBetween(view, \"views/vertical-settings-UI.png\", 95)"]},

        {"kind":"then","text":"...it looks as expected.","code":["similarity1 > 95"]},

        {"kind":"when","text":"We simulate the user entering an invalid number:","code":["speedTextField.text = \"ยง\"","UI.sync()"]},

        {"kind":"then","text":"The UI is updated to reflect the invalid value.","code":["speedTextField.text == \"ยง\"","speedTextField.background == Color.RED"]},

        {"kind":"when","text":"We rerender the view offscreen again because the background color changed...","code":["var similarity2 = Utility.similarityBetween(view, \"views/vertical-settings-UI.png\")"]},

        {"kind":"then","text":"The UI is no longer rendered as expected.","code":["similarity2 < similarity1"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The spinners example UI defined in the examples can be created.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new SomeComponentsView(new SomeComponentsViewModel())"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The list rendering example UI defined in the examples can be created.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new ListRendering()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"MadeWithSwingTree\" example UI defined in the examples can be created.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new MadeWithSwingTree()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The calculator UI defined in the examples has the expected state and looks.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create the UI.","code":["var ui = new Calculator()","ui.setBackground(new Color(242, 242, 242))"]},

        {"kind":"expect","text":"","code":["new Utility.Query(ui).find(JTextField, \"input-text-area\").isPresent()","new Utility.Query(ui).find(JTextField, \"input-text-area\").get().horizontalAlignment == JTextField.RIGHT"]},

        {"kind":"and","text":"Its render state is as expected.","code":["Utility.similarityBetween(ui, \"views/calculator-UI.png\", 97.5) > 97.5"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Declare table components using a list of list as data source.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We declare the UI.","code":["var data = [[\"X\", \"Y\"], [\"1\", \"2\"], [\"3\", \"4\"]]","def ui =","    UI.panel(\"fill\")","    .add(\"grow\",","        UI.panel(\"fill\")","        .add(\"grow, span\", UI.label(\"Row Major\"))","        .add(\"grow, span\", UI.table(UI.ListData.ROW_MAJOR, ()->[[\"A\", \"B\", \"C\"], [\"a\", \"b\", \"c\"]]).id(\"RM\"))","        .add(\"grow, span\", UI.separator())","        .add(\"grow, span\", UI.label(\"Column Major\"))","        .add(\"grow, span\", UI.table(UI.ListData.COLUMN_MAJOR, ()->[[\"A\", \"B\", \"C\"], [\"a\", \"b\", \"c\"]]).id(\"CM\"))","    )","    .add(\"grow\", UI.separator(UI.Align.VERTICAL))","    .add(\"grow\",","        UI.panel(\"fill\")","        .add(\"grow, span\", UI.label(\"Row Major 2\"))","        .add(\"grow, span\",","            UI.table(","               UI.tableModel()","               .colCount( () -> data[0].size() ).rowCount( () -> data.size() )","               .getsEntryAt((col, row) -> data[col][row] )","            )","            .id(\"RM2\")","        )","        .add(\"grow, span\", UI.separator())","        .add(\"grow, span\", UI.label(\"Column Major 2\"))","        .add(\"grow, span\",","            UI.table(","               UI.tableModel()","               .colCount( () -> data.size() )","               .rowCount( () -> data[0].size() )","               .getsEntryAt((col, row) -> data[row][col] )","            )","            .id(\"CM2\")","        )","    )","    .get(JPanel)"]},

        {"kind":"expect","text":"The UI contains 2 different JTables.","code":["new Utility.Query(ui).find(JTable, \"RM\").isPresent()","new Utility.Query(ui).find(JTable, \"CM\").isPresent()"]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JTable, \"RM\").get().getRowCount() == 2","new Utility.Query(ui).find(JTable, \"RM\").get().getColumnCount() == 3","new Utility.Query(ui).find(JTable, \"RM\").get().getValueAt(0, 0) == \"A\"","new Utility.Query(ui).find(JTable, \"RM\").get().getValueAt(0, 1) == \"B\"","new Utility.Query(ui).find(JTable, \"RM\").get().getValueAt(0, 2) == \"C\"","new Utility.Query(ui).find(JTable, \"RM\").get().getValueAt(1, 0) == \"a\"","new Utility.Query(ui).find(JTable, \"RM\").get().getValueAt(1, 1) == \"b\"","new Utility.Query(ui).find(JTable, \"RM\").get().getValueAt(1, 2) == \"c\""]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JTable, \"CM\").get().getRowCount() == 3","new Utility.Query(ui).find(JTable, \"CM\").get().getColumnCount() == 2","new Utility.Query(ui).find(JTable, \"CM\").get().getValueAt(0, 0) == \"A\"","new Utility.Query(ui).find(JTable, \"CM\").get().getValueAt(1, 0) == \"B\"","new Utility.Query(ui).find(JTable, \"CM\").get().getValueAt(2, 0) == \"C\"","new Utility.Query(ui).find(JTable, \"CM\").get().getValueAt(0, 1) == \"a\"","new Utility.Query(ui).find(JTable, \"CM\").get().getValueAt(1, 1) == \"b\"","new Utility.Query(ui).find(JTable, \"CM\").get().getValueAt(2, 1) == \"c\""]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JTable, \"RM2\").isPresent()","new Utility.Query(ui).find(JTable, \"CM2\").isPresent()"]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JTable, \"RM2\").get().getRowCount() == 3","new Utility.Query(ui).find(JTable, \"RM2\").get().getColumnCount() == 2","new Utility.Query(ui).find(JTable, \"RM2\").get().getValueAt(0, 0) == \"X\"","new Utility.Query(ui).find(JTable, \"RM2\").get().getValueAt(1, 0) == \"1\"","new Utility.Query(ui).find(JTable, \"RM2\").get().getValueAt(2, 0) == \"3\"","new Utility.Query(ui).find(JTable, \"RM2\").get().getValueAt(0, 1) == \"Y\"","new Utility.Query(ui).find(JTable, \"RM2\").get().getValueAt(1, 1) == \"2\"","new Utility.Query(ui).find(JTable, \"RM2\").get().getValueAt(2, 1) == \"4\""]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JTable, \"CM2\").get().getRowCount() == 2","new Utility.Query(ui).find(JTable, \"CM2\").get().getColumnCount() == 3","new Utility.Query(ui).find(JTable, \"CM2\").get().getValueAt(0,0) == \"X\"","new Utility.Query(ui).find(JTable, \"CM2\").get().getValueAt(0,1) == \"1\"","new Utility.Query(ui).find(JTable, \"CM2\").get().getValueAt(0,2) == \"3\"","new Utility.Query(ui).find(JTable, \"CM2\").get().getValueAt(1,0) == \"Y\"","new Utility.Query(ui).find(JTable, \"CM2\").get().getValueAt(1,1) == \"2\"","new Utility.Query(ui).find(JTable, \"CM2\").get().getValueAt(1,2) == \"4\""]},

        {"kind":"and","text":"It is rendered as expected.","code":["Utility.similarityBetween(ui, \"views/tables-example-view.png\", 97.5) > 97.5"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The todo app UI defined in the examples has the expected state.",
      "result":"IGNORED",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We get the UI.","code":["var ui = new TodoApp()"]},

        {"kind":"expect","text":"","code":["new Utility.Query(ui).find(JPanel, \"task-1\").isPresent()","new Utility.Query(ui).find(JPanel, \"task-2\").isPresent()","new Utility.Query(ui).find(JPanel, \"task-3\").isPresent()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
