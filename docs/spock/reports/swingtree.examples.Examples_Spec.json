{
  "className":"swingtree.examples.Examples_Spec",
  "title":"Examples UIs",
  "narrative":"This is an overview of the various example UIs\n    in the test suite.\n\n    This specification also ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected state and appearance.",
  "subjects":[],
  "statistics":{
    "runs":"19",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"The advanced UI define in the examples has the expected state.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The <a href=\"https://github.com/globaltcad/swing-tree/blob/main/src/test/java/swingtree/examples/advanced/AdvancedUI.java\" target=\"_blank\">advanced UI  example</a> is absolutely packed with things to see.\n            Yet, at the same time, it is not too much code\n            and also not too complicated. \n            It really shows you\n            how boilerplate code can be reduced to a minimum\n            when using SwingTree.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create the UI.","code":["var ui = AdvancedUI.of(null)"]},

        {"kind":"expect","text":"","code":["new Utility.Query(ui).find(JLabel, \"APIC-label\").isPresent()","new Utility.Query(ui).find(JLabel, \"APIC-label\").get().text == \"6.0\""]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JTabbedPane, \"APIC-Tabs\").isPresent()","new Utility.Query(ui).find(JTabbedPane, \"APIC-Tabs\").get().getTabCount() == 9"]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JSpinner, \"Light-Spinner\").isPresent()","new Utility.Query(ui).find(JSpinner, \"Light-Spinner\").get().getValue() == 0"]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JSplitButton, \"con-split-button\").isPresent()","Utility.getSplitButtonPopup(new Utility.Query(ui).find(JSplitButton, \"con-split-button\").get()).components.length == 4"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The form UI defined in the examples has the expected state.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The form UI looks like this:\n            ![simple-form-UI.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/simple-form-UI.png)\n\n            This is the <a href=\"https://github.com/globaltcad/swing-tree/blob/main/src/test/java/examples/simple/Form.java\" target=\"_blank\">oldest example in the test suite</a> and also a great\n            first example of how to write declarative UI code with SwingTree.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We get the UI.","code":["var ui = new Form()"]},

        {"kind":"expect","text":"\n            We should be able to find the hover icon button and it should have the expected state.\n        ","code":["new Utility.Query(ui).find(JButton, \"hover-icon-button\").isPresent()","new Utility.Query(ui).find(JButton, \"hover-icon-button\").get().text == \"\"","new Utility.Query(ui).find(JButton, \"hover-icon-button\").get().icon != null","new Utility.Query(ui).find(JButton, \"hover-icon-button\").get().pressedIcon != null","new Utility.Query(ui).find(JButton, \"hover-icon-button\").get().rolloverIcon != null"]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JButton, \"hover-icon-button\").get().cursor.type == Cursor.HAND_CURSOR"]},

        {"kind":"and","text":"","code":["Utility.similarityBetween(ui, \"/snapshots/simple-form-UI.png\", 99.9) > 99.9"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The login example UI defined in the examples, a good MVVM demonstration.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The <a href=\"https://github.com/globaltcad/swing-tree/blob/main/src/test/java/examples/mvvm/LoginView.java\" target=\"_blank\">login example view</a>, together\n            with the <a href=\"https://github.com/globaltcad/swing-tree/blob/main/src/test/java/examples/mvvm/LoginViewModel.java\" target=\"_blank\">login example view model</a>, is\n            a really basic example of how to do MVVM with SwingTree.\n            For a more advanced example, see the <a href=\"https://github.com/globaltcad/swing-tree/blob/main/src/test/java/examples/mvvm/UserRegistrationView.java\" target=\"_blank\">user registration example</a>.\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new LoginView(new LoginViewModel())"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The user registration example UI defined in the examples, a good MVVM demonstration.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The <a href=\"https://github.com/globaltcad/swing-tree/blob/main/src/test/java/examples/mvvm/UserRegistrationView.java\" target=\"_blank\">user registration example</a>, together\n            with the <a href=\"https://github.com/globaltcad/swing-tree/blob/main/src/test/java/examples/mvvm/UserRegistrationViewModel.java\" target=\"_blank\">user registration example view model</a>, is\n            a more advanced example of how to do the MVVM design pattern with SwingTree.\n            It involves a lot of input validation that is done in the view model.\n            For a more basic example, see the <a href=\"https://github.com/globaltcad/swing-tree/blob/main/src/test/java/examples/mvvm/LoginView.java\" target=\"_blank\">login example view</a>.\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new UserRegistrationView(new UserRegistrationViewModel())"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The list examples UI defined in the examples can be created.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new ListSearchView(new ListSearchViewModel())"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The box shadow picker example UI defined in the examples can be created.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Not only is the <a href=\"https://github.com/globaltcad/swing-tree/blob/main/src/test/java/examples/stylish/BoxShadowPickerView.java\" target=\"_blank\">box shadow picker example</a> \n            an advanced example of how to write MVVM applications with SwingTree,\n            it is also a nice little tool that shows you how to use the \n            SwingTree style API to override the default look and feel of Swing components.\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new BoxShadowPickerView(new BoxShadowPickerViewModel())"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The note guesser example UI defined in the examples can be created.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The guesser example view looks like this:\n            ![note-guesser-UI.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/note-guesser-UI.png)\n            This not only demonstrates how to do some custom 2D rendering on a JPanel,\n            it is also a nice little game you can play to test your knowledge of music theory.\n\n            Just <a href=\"https://github.com/globaltcad/swing-tree/blob/main/src/test/java/examples/games/NoteGuesserView.java\" target=\"_blank\">navigate to the class</a> and run\n            it yourself and play around with it.\n            The <a href=\"https://github.com/globaltcad/swing-tree/blob/main/src/test/java/examples/games/NoteGuesserViewModel.java\" target=\"_blank\">view model</a> is also a nice example of how to\n            do MVVM with SwingTree.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create an instance of the UI.","code":["var ui = new NoteGuesserView(new NoteGuesserViewModel())"]},

        {"kind":"expect","text":"It is rendered as shown in the image.","code":["Utility.similarityBetween(ui, \"/snapshots/note-guesser-UI.png\", 99.9) > 99.9"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The symbol guesser example UI defined in the examples can be created.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new SymbolGuesserView(new SymbolGuesserViewModel())"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"Well rounded\" style example UI defined in the examples can be created.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The well rounded UI looks like this:\n            ![well-rounded-UI.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/well-rounded-UI.png)\n\n            This is the most basic example of how to use the SwingTree style API to\n            override the default look and feel of Swing components.\n            As you can see, the style engine of SwingTree supports shadows, rounded corners,\n            gradients and much much more out of the box.\n\n            Here we will only test looks of the UI, if you want to see the code, \n            <a href=\"https://github.com/globaltcad/swing-tree/blob/main/src/test/java/examples/stylish/WellRoundedView.java\" target=\"_blank\">click here</a> to jump to the class.\n            And also feel free to run \n            it yourself, it has a main method for that purpose already.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create the UI.","code":["var ui = new WellRoundedView()"]},

        {"kind":"expect","text":"It is rendered as shown in the image.","code":["Utility.similarityBetween(ui, \"/snapshots/well-rounded-UI.png\", 99.9) > 99.9"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The soft example UI is rendered as expected.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The soft example UI looks like this:\n            ![soft-example-UI.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/soft-example-UI.png)\n\n            This is the most advanced example of how to use the SwingTree style API to\n            customize the look and feel of your entire application.\n            You can turn a plain old metal look and feel into a modern \n            soft UI with just a few lines of code.\n\n            Here we will only test looks of the UI, if you want to see the code,\n            <a href=\"https://github.com/globaltcad/swing-tree/blob/main/src/test/java/examples/stylish/SoftUIView.java\" target=\"_blank\">click here</a> to visit the class.\n            And also feel free to run\n            it yourself, it has a main method for that purpose already.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create the UI.","code":["var ui = new SoftUIView()"]},

        {"kind":"expect","text":"It is rendered as shown in the image.","code":["Utility.similarityBetween(ui, \"/snapshots/soft-example-UI.png\", 99.9) > 99.9"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The animated buttons view examples UI defined in the examples looks as expected.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The animated buttons view looks like this:\n            ![animated-buttons-UI.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/animated-buttons-UI.png)\n\n            Unfortunately this is just a snapshot of the UI, so you can't play with \n            the animations right here. But you can run the \n            <a href=\"https://github.com/globaltcad/swing-tree/blob/main/src/test/java/examples/animated/AnimatedButtonsView.java\" target=\"_blank\">example found in the test suite</a>\n            of SwingTree and try it out yourself.\n            There is a main method in the class, so you can just run it.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create the UI.","code":["var ui = new AnimatedButtonsView()","ui.setBackground(new Color(242, 242, 242))"]},

        {"kind":"expect","text":"It is rendered as shown in the image.","code":["Utility.similarityBetween(ui, \"/snapshots/animated-buttons-UI.png\", 99) > 99"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The animation example view can be created.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new AnimatedView(Mock(JFrame))"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The settings example UI defined in the examples looks as expected.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The vertical settings view from the examples looks like this:\n            ![vertical-settings-UI.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/vertical-settings-UI.png)\n\n            It demonstrates how UI components can easily be placed vertically\n            and with some slight indentation, to indicate a certain grouping\n            which is especially useful for settings dialogs.\n\n            If you want to see the code, just\n            <a href=\"https://github.com/globaltcad/swing-tree/blob/main/src/test/java/examples/mvvm/SomeSettingsView.java\" target=\"_blank\">navigate to the class</a> and run it yourself, \n            it has a main method for that purpose already.\n\n            Here we will only test the UI.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var view = new SomeSettingsView(new SomeSettingsViewModel())","var speedTextField = new Utility.Query(view).find(JTextField, \"speed-text-field\").orElse(null)"]},

        {"kind":"expect","text":"","code":["view != null","speedTextField != null"]},

        {"kind":"and","text":"","code":["speedTextField.text == \"42.0\"","speedTextField.background == Color.WHITE"]},

        {"kind":"when","text":"We rerender the view offscreen...","code":["var similarity = Utility.similarityBetween(view, \"/snapshots/vertical-settings-UI.png\", 99.7)"]},

        {"kind":"then","text":"...it looks as expected.","code":["similarity > 99.7"]},

        {"kind":"when","text":"We simulate the user entering an invalid number:","code":["speedTextField.text = \"§\"","UI.sync()"]},

        {"kind":"then","text":"The UI is updated to reflect the invalid value.","code":["speedTextField.text == \"§\"","speedTextField.background == Color.RED"]},

        {"kind":"when","text":"We rerender the view offscreen again because the background color changed...","code":["similarity = Utility.similarityBetween(view, \"/snapshots/vertical-settings-UI.png\")"]},

        {"kind":"then","text":"The UI is no longer rendered as expected.","code":["similarity < 99.7"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The spinners example UI defined in the examples can be created.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new SomeComponentsView(new SomeComponentsViewModel())"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The list rendering example UI defined in the examples can be created.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new ListRendering()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"MadeWithSwingTree\" example UI defined in the examples can be created.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["expect : new MadeWithSwingTree()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The calculator UI defined in the examples has the expected state and looks.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The calculator view looks like this:\n            ![calculator-UI.png](https://raw.githubusercontent.com/globaltcad/swing-tree/main/src/test/resources/snapshots/calculator-UI.png)\n\n            Here we only check that it is rendered as expected and we will not go further into detail \n            with respect to its code, if you want to see the code, just \n            <a href=\"https://github.com/globaltcad/swing-tree/blob/main/src/test/java/examples/Calculator.java\" target=\"_blank\">navigate to the class</a> \n            and run it yourself, it has \n            a main method for that purpose already.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create the UI.","code":["var ui = new Calculator()","ui.setBackground(new Color(242, 242, 242))"]},

        {"kind":"expect","text":"","code":["new Utility.Query(ui).find(JTextArea, \"input-text-area\").isPresent()","new Utility.Query(ui).find(JTextArea, \"input-text-area\").get().componentOrientation == ComponentOrientation.RIGHT_TO_LEFT"]},

        {"kind":"and","text":"Its render state is as expected.","code":["Utility.similarityBetween(ui, \"/snapshots/calculator-UI.png\", 99) > 99"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The simple Table-UI example has the expected state.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We get the UI.","code":["var ui = TableUI.create()"]},

        {"kind":"expect","text":"The UI contains 2 different JTables.","code":["new Utility.Query(ui).find(JTable, \"RM\").isPresent()","new Utility.Query(ui).find(JTable, \"CM\").isPresent()"]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JTable, \"RM\").get().getRowCount() == 2","new Utility.Query(ui).find(JTable, \"RM\").get().getColumnCount() == 3","new Utility.Query(ui).find(JTable, \"RM\").get().getValueAt(0, 0) == \"A\"","new Utility.Query(ui).find(JTable, \"RM\").get().getValueAt(0, 1) == \"B\"","new Utility.Query(ui).find(JTable, \"RM\").get().getValueAt(0, 2) == \"C\"","new Utility.Query(ui).find(JTable, \"RM\").get().getValueAt(1, 0) == \"a\"","new Utility.Query(ui).find(JTable, \"RM\").get().getValueAt(1, 1) == \"b\"","new Utility.Query(ui).find(JTable, \"RM\").get().getValueAt(1, 2) == \"c\""]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JTable, \"CM\").get().getRowCount() == 3","new Utility.Query(ui).find(JTable, \"CM\").get().getColumnCount() == 2","new Utility.Query(ui).find(JTable, \"CM\").get().getValueAt(0, 0) == \"A\"","new Utility.Query(ui).find(JTable, \"CM\").get().getValueAt(1, 0) == \"B\"","new Utility.Query(ui).find(JTable, \"CM\").get().getValueAt(2, 0) == \"C\"","new Utility.Query(ui).find(JTable, \"CM\").get().getValueAt(0, 1) == \"a\"","new Utility.Query(ui).find(JTable, \"CM\").get().getValueAt(1, 1) == \"b\"","new Utility.Query(ui).find(JTable, \"CM\").get().getValueAt(2, 1) == \"c\""]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JTable, \"RM2\").isPresent()","new Utility.Query(ui).find(JTable, \"CM2\").isPresent()"]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JTable, \"RM2\").get().getRowCount() == 3","new Utility.Query(ui).find(JTable, \"RM2\").get().getColumnCount() == 2","new Utility.Query(ui).find(JTable, \"RM2\").get().getValueAt(0, 0) == \"X\"","new Utility.Query(ui).find(JTable, \"RM2\").get().getValueAt(1, 0) == \"1\"","new Utility.Query(ui).find(JTable, \"RM2\").get().getValueAt(2, 0) == \"3\"","new Utility.Query(ui).find(JTable, \"RM2\").get().getValueAt(0, 1) == \"Y\"","new Utility.Query(ui).find(JTable, \"RM2\").get().getValueAt(1, 1) == \"2\"","new Utility.Query(ui).find(JTable, \"RM2\").get().getValueAt(2, 1) == \"4\""]},

        {"kind":"and","text":"","code":["new Utility.Query(ui).find(JTable, \"CM2\").get().getRowCount() == 2","new Utility.Query(ui).find(JTable, \"CM2\").get().getColumnCount() == 3","new Utility.Query(ui).find(JTable, \"CM2\").get().getValueAt(0,0) == \"X\"","new Utility.Query(ui).find(JTable, \"CM2\").get().getValueAt(0,1) == \"1\"","new Utility.Query(ui).find(JTable, \"CM2\").get().getValueAt(0,2) == \"3\"","new Utility.Query(ui).find(JTable, \"CM2\").get().getValueAt(1,0) == \"Y\"","new Utility.Query(ui).find(JTable, \"CM2\").get().getValueAt(1,1) == \"2\"","new Utility.Query(ui).find(JTable, \"CM2\").get().getValueAt(1,2) == \"4\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The todo app UI defined in the examples has the expected state.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We get the UI.","code":["var ui = new TodoApp()"]},

        {"kind":"expect","text":"","code":["new Utility.Query(ui).find(JPanel, \"task-1\").isPresent()","new Utility.Query(ui).find(JPanel, \"task-2\").isPresent()","new Utility.Query(ui).find(JPanel, \"task-3\").isPresent()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
