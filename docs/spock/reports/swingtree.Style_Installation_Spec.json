{
  "className":"swingtree.Style_Installation_Spec",
  "title":"Style Installation",
  "narrative":"**This specification covers the behaviour of the style installation process!**\n    Which means that the contents of this may not be relevant to you.\n    Keep reading however if you are interested in some of the obscure details\n    of the SwingTree library internals.\n\n    SwingTree offers advanced styling options as part of **the style API**,\n    which is most commonly used through the `withStyle(Styler)` method\n    on any declarative builder node.\n\n   The installation of styles is a complex process that involves\n   the partial override of the component's UI delegate, the application of\n   the style's properties to the component and the installation of\n   a custom border, all depending on the style configuration.\n\n   This is a very finicky process that requires a lot of\n   testing to ensure that the styles are applied correctly.\n   Here you will find most of the tests that ensure that after the\n   installation of a style, the component has the expected plugin installed.",
  "subjects":["swingtree.UI","swingtree.api.Styler"],
  "statistics":{
    "runs":"108",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [5]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [6]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [7]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [8]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [9]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [10]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [11]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [12]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [13]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [14]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [15]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [16]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [17]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [18]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [19]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [20]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [21]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [22]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [23]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [24]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [25]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [26]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [27]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [28]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [29]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [30]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [31]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [32]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [33]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [34]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [35]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [36]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [37]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [38]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [39]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [40]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [41]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [42]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [43]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [44]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [45]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [46]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [47]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [48]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [49]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [50]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [51]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [52]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom UI. [53]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if the custom UI was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and should give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom UI may or may not be installed:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            We re-install the component UI, to check that if \n            SwingTree style is robust enough to survive look and feel switches.\n        ","code":["button.updateUI()"]},

        {"kind":"then","text":"The condition remains unchanged, the style survived:","code":["!(button.getUI() instanceof MetalButtonUI) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former UI to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"The original UI should be installed because the component is no longer styled","code":["button.getUI() instanceof MetalButtonUI"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","false","true","true","false","false","false","true","false","false","false","false","false","false","true","true","false","false","false","false","false","false","true","false","false","false","false","false","true","false","false","false","false","false","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [5]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [6]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [7]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [8]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [9]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [10]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [11]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [12]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [13]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [14]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [15]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [16]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [17]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [18]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [19]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [20]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [21]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [22]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [23]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [24]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [25]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [26]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [27]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [28]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [29]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [30]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [31]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [32]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [33]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [34]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [35]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [36]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [37]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [38]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [39]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [40]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [41]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [42]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [43]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [44]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [45]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [46]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [47]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [48]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [49]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [50]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [51]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [52]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Different `Styler`s may or may not lead to the installation of a custom Border. [53]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is a data driven test that takes a `Styler` \n            which will be applied to a `JButton` by passing it to the\n            `withStyle(Styler)` method.\n            Then we build the component and check if a custom border was installed.\n\n            This specification may not be relevant to you if you are not interested\n            in the details of the SwingTree library internals.\n            But it demonstrates the complexity of the style installation process\n            and can give you a good idea of what it took to build the SwingTree library.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a button UI with the given styler","code":["var applyStyle = true","var ui =","        UI.button()","        .withSize(80,50)","        .withStyle( it -> applyStyle ? styler(it) : it )"]},

        {"kind":"when","text":"We build the button","code":["var button = ui.get(JButton)"]},

        {"kind":"then","text":"The custom `Border` may or may not be installed:","code":["(button.getBorder() instanceof swingtree.style.StyleAndAnimationBorder) == isCustom"]},

        {"kind":"when","text":"\n            The style is deactivated and updated, then we expect the\n            former border to be reinstalled.\n            We test this by deactivating the style\n            and then simulating a repaint of the button.\n        ","code":["applyStyle = false","BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)","button.paint(image.createGraphics())"]},

        {"kind":"then","text":"\n            The standard look and feel border based border should be installed\n            because the component is no longer styled.\n            We test this by comparing the border of the button with the border\n            of a new button.\n        ","code":["button.getBorder() == new JButton().getBorder()"]},

        {"kind":"where","text":"","code":{"isCustom":["false","false","false","false","false","true","true","true","true","true","true","true","true","true","true","true","true","true","false","false","false","false","false","false","false","false","true","true","true","true","false","false","false","false","true","true","true","true","false","false","true","true","true","true","false","false","true","true","true","true","false","false","false","false"],"styler":["{ it }","{ it.backgroundColor(Color.BLACK) }","{ it.foregroundColor(Color.BLUE) }","{ it.foundationColor(Color.GREEN) }","{ it.cursor(UI.Cursor.HAND) }","{ it.margin(5) }","{ it.padding(5).margin(5) }","{ it.border(2, \"black\") }","{ it.margin(5).border(3, \"red\").cursor(UI.Cursor.CROSS) }","{ it.shadowColor(\"green\") }","{ it.shadowColor(\"blue\").shadowBlurRadius(5) }","{ it.shadowColor(\"pink\").shadowBlurRadius(2).shadowSpreadRadius(7) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.CONTENT, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BORDER, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"black\").offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).offset(1,2).blurRadius(5)) }","{ it.shadow(UI.Layer.BACKGROUND, \"myShadow\", conf->conf.color(UI.Color.UNDEFINED).spreadRadius(7).isOutset(true)) }","{ it.shadow(UI.Layer.FOREGROUND, \"myShadow\", conf->conf.color(\"red\").spreadRadius(1).blurRadius(5)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BACKGROUND, \"myGradient\", conf->conf.colors([] as Color[])) }","{ it.gradient(UI.Layer.FOREGROUND, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.CONTENT, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.gradient(UI.Layer.BORDER, \"myGradient\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.scale(1,2).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors(Color.GREEN, Color.RED)) }","{ it.noise(UI.Layer.BACKGROUND, \"myNoise\", conf->conf.colors([] as Color[])) }","{ it.noise(UI.Layer.FOREGROUND, \"myNoise\", conf->conf.rotation(102).colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.CONTENT, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.noise(UI.Layer.BORDER, \"myNoise\", conf->conf.colors(Color.RED, Color.BLUE)) }","{ it.painter(UI.Layer.BACKGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BACKGROUND, UI.ComponentArea.EXTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.FOREGROUND, UI.ComponentArea.INTERIOR, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.CONTENT, UI.ComponentArea.ALL, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BODY, \"myPainter\", g2d -> {}) }","{ it.painter(UI.Layer.BORDER, UI.ComponentArea.BORDER, \"myPainter\", g2d -> {}) }","{ it.parentFilter( conf -> conf.blur(1) ) }","{ it.parentFilter( conf -> conf.blur(0.75) ) }","{ it.parentFilter( conf -> conf.blur(0.0) ) }","{ it.parentFilter( conf -> conf.kernel(Size.of(2, 1), 1,0) ) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
