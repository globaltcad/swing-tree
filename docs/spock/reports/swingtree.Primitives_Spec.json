{
  "className":"swingtree.Primitives_Spec",
  "title":"Utility Primitives",
  "narrative":"The SwingTree library contains a set of simple value objects\n    that are used as basic building blocks for your UI declarations.\n    These are primitive utility classes for modelling simple things\n    like size, position and bounds of UI components.\n\n    In this specification we will explore the basic primitives\n    and ensure that they behave as expected.",
  "subjects":["swingtree.layout.Bounds","swingtree.layout.Size","swingtree.layout.Position"],
  "statistics":{
    "runs":"25",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"You can merge two bounds together to form one encompassing bounds.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var bounds1 = Bounds.of(10, 10, 100, 100)","var bounds2 = Bounds.of(110, 110, 100, 100)"]},

        {"kind":"when","text":"","code":["var merged = bounds1.merge(bounds2)"]},

        {"kind":"then","text":"","code":["merged.location().x() == 10","merged.location().y() == 10","merged.size().width().get() == 200","merged.size().height().get() == 200"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use `hasSize(int,int)` to check if a `Bounds` object has the given size.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var bounds = Bounds.of(10, 10, 100, 100)"]},

        {"kind":"expect","text":"","code":["bounds.hasSize(100, 100)","!bounds.hasSize(101, 100)","!bounds.hasSize(100, 101)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `hasWidth()` and `hasHeight()` methods can be used to check the width and height of a `Bounds` object.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Note that a `Bounds` object may be incomplete, i.e. it may not\n            necessarily have both width and height. This is because the `Size`\n            of a `Bounds` object may not have both dimensions set to a positive\n            or zero value.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a hand full of different `Bound` objects:","code":["var bounds1 = Bounds.of(10, 10, 100, 0)","var bounds2 = Bounds.of(5, 80, 0, 200)","var bounds3 = Bounds.of(0, 10, 200, 80)","var bounds4 = Bounds.of(20, 90, 400, 200)"]},

        {"kind":"expect","text":"","code":["bounds1.hasWidth() && !bounds1.hasHeight()","!bounds2.hasWidth() && bounds2.hasHeight()","bounds3.hasWidth() && bounds3.hasHeight()","bounds4.hasWidth() && bounds4.hasHeight()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `withSize(int,int)` method returns a new `Bounds` object with the given size.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var bounds = Bounds.of(10, 10, 100, 100)"]},

        {"kind":"when","text":"","code":["var newBounds = bounds.withSize(200, 200)"]},

        {"kind":"then","text":"","code":["newBounds.size().width().get() == 200","newBounds.size().height().get() == 200"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use `withX(int)` and `withY(int)` to change the location of a `Bounds` object.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var bounds = Bounds.of(10, 10, 100, 100)"]},

        {"kind":"when","text":"","code":["var newBounds = bounds.withX(24).withY(13)"]},

        {"kind":"then","text":"","code":["newBounds.location().x() == 24","newBounds.location().y() == 13"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use `withWidth(int)` and `withHeight(int)` to change the size of a `Bounds` object.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var bounds = Bounds.of(10, 10, 100, 100)"]},

        {"kind":"when","text":"","code":["var newBounds = bounds.withWidth(200).withHeight(200)"]},

        {"kind":"then","text":"","code":["newBounds.size().width().get() == 200","newBounds.size().height().get() == 200"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A `Size` object can be created with a width and height.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var size = Size.of(100, 200)"]},

        {"kind":"expect","text":"","code":["size.width().get() == 100","size.height().get() == 200"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A `Size` with a negative width and height produces an `unknown` size.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["Size.of(-1, -1) == Size.unknown()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `Size` object exposes its width and height as `Optional` float.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `Optional` type is used to represent the possibility of a value\n            being present or absent. This is useful when a value may not be\n            available or may be unknown. In the case of a `Size` object, the\n            width and height may be unknown if the values are negative.\n            So to represent this, the `Size` object returns an `Optional` float\n            for both width and height values.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var size1 = Size.of(42, 189)","var size2 = Size.of(-1, -1)"]},

        {"kind":"expect","text":"","code":["size1.width().get() == 42","size1.height().get() == 189"]},

        {"kind":"and","text":"","code":["!size2.width().isPresent()","!size2.height().isPresent()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can use `scale(float)` to scale a `Size` object by a given factor.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var size = Size.of(100, 200)"]},

        {"kind":"when","text":"","code":["var scaled = size.scale(2.5f)"]},

        {"kind":"then","text":"","code":["scaled.width().get() == 250","scaled.height().get() == 500"]},

        {"kind":"when","text":"Scaling by a negative factor will produce an unknown size.","code":["var scaled2 = size.scale(-1.5f)"]},

        {"kind":"then","text":"","code":["scaled2 == Size.unknown()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use `hasPositiveWidth()` and `hasPositiveHeight()` to check if a `Size` object has positive width and height.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var size1 = Size.of(42, 278)","var size2 = Size.of(-21, 189)","var size3 = Size.of(79, -19)","var size4 = Size.unknown()","var size5 = Size.of(0, 12)","var size6 = Size.of(24, 0)"]},

        {"kind":"expect","text":"","code":["size1.hasPositiveWidth() && size1.hasPositiveHeight()","!size2.hasPositiveWidth() && size2.hasPositiveHeight()","size3.hasPositiveWidth() && !size3.hasPositiveHeight()","!size4.hasPositiveWidth() && !size4.hasPositiveHeight()","!size5.hasPositiveWidth() && size5.hasPositiveHeight()","size6.hasPositiveWidth() && !size6.hasPositiveHeight()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A `Location` object can be created with an x and y coordinate.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var location = Position.of(128, 62)"]},

        {"kind":"expect","text":"","code":["location.x() == 128","location.y() == 62"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A `Location` can have negative x and y coordinates.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var location = Position.of(-1, -7)"]},

        {"kind":"expect","text":"","code":["location.x() == -1","location.y() == -7"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Two `Bounds` objects are equal if they have the same location and size.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var bounds1 = Bounds.of(1, 2, 10, 20)","var bounds2 = Bounds.of(1, 2, 10, 20)","var bounds3 = Bounds.of(5, 2, 12, 5)","var bounds4 = Bounds.of(5, 2, 12, 5)"]},

        {"kind":"expect","text":"","code":["bounds1 == bounds2","bounds3 == bounds4","bounds1 != bounds3"]},

        {"kind":"and","text":"The `hashCode()` method is consistent with the `equals()` method.","code":["bounds1.hashCode() == bounds2.hashCode()","bounds3.hashCode() == bounds4.hashCode()","bounds1.hashCode() != bounds3.hashCode()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can check if a location is inside a `Bounds` object.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var bounds1 = Bounds.of(1,  2, 15, 20)","var bounds2 = Bounds.of(1,  2, 0, 20)","var bounds3 = Bounds.of(1,  2, 15, 0)"]},

        {"kind":"expect","text":"","code":["bounds1.contains(1, 2)","!bounds1.contains(0.99, 2)","!bounds1.contains(1, 1.999)","bounds1.contains(15.999, 21.999)","!bounds1.contains(16, 21.999)","!bounds1.contains(15.999, 22)"]},

        {"kind":"and","text":"","code":["!bounds2.contains(1, 2)","!bounds2.contains(0.99, 2)","!bounds2.contains(1, 1.999)","!bounds2.contains(1, 21.999)","!bounds2.contains(16, 21.999)","!bounds2.contains(1, 22)"]},

        {"kind":"and","text":"","code":["!bounds3.contains(1, 2)","!bounds3.contains(0.99, 2)","!bounds3.contains(1, 1.999)","!bounds3.contains(15.999, 2)","!bounds3.contains(16, 2)","!bounds3.contains(15.999, 2)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use `equal(double,double,double,double)` to check if a bounds instance is equal to the supplied arguments.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var bounds = Bounds.of(3, -6, 70, 7)"]},

        {"kind":"expect","text":"","code":["bounds.equals(3, -6, 70, 7)","!bounds.equals(4, -6, 70, 7)","!bounds.equals(3.003, -6, 70, 7)","!bounds.equals(3, -5.99, 70, 7)","!bounds.equals(3, -6, 70.023, 7)","!bounds.equals(3, -6, 70, 6.999)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Two `Size` objects can be added together using the `plus(Size)` method. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var size1 = Size.of(width, height)","var size2 = Size.of(width2, height2)"]},

        {"kind":"when","text":"","code":["var sum = size1.plus(size2)"]},

        {"kind":"then","text":"","code":["sumWidth  < 0 ? !sum.width().isPresent()  : sum.width().get()  == sumWidth","sumHeight < 0 ? !sum.height().isPresent() : sum.height().get() == sumHeight"]},

        {"kind":"where","text":"","code":{"width":["10","10","10","10"],"height":["20","20","20","20"],"width2":["30","30","-1","-1"],"height2":["40","-40","40","-1"],"sumWidth":["40","40","10","10"],"sumHeight":["60","20","60","20"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Two `Size` objects can be added together using the `plus(Size)` method. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var size1 = Size.of(width, height)","var size2 = Size.of(width2, height2)"]},

        {"kind":"when","text":"","code":["var sum = size1.plus(size2)"]},

        {"kind":"then","text":"","code":["sumWidth  < 0 ? !sum.width().isPresent()  : sum.width().get()  == sumWidth","sumHeight < 0 ? !sum.height().isPresent() : sum.height().get() == sumHeight"]},

        {"kind":"where","text":"","code":{"width":["10","10","10","10"],"height":["20","20","20","20"],"width2":["30","30","-1","-1"],"height2":["40","-40","40","-1"],"sumWidth":["40","40","10","10"],"sumHeight":["60","20","60","20"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Two `Size` objects can be added together using the `plus(Size)` method. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var size1 = Size.of(width, height)","var size2 = Size.of(width2, height2)"]},

        {"kind":"when","text":"","code":["var sum = size1.plus(size2)"]},

        {"kind":"then","text":"","code":["sumWidth  < 0 ? !sum.width().isPresent()  : sum.width().get()  == sumWidth","sumHeight < 0 ? !sum.height().isPresent() : sum.height().get() == sumHeight"]},

        {"kind":"where","text":"","code":{"width":["10","10","10","10"],"height":["20","20","20","20"],"width2":["30","30","-1","-1"],"height2":["40","-40","40","-1"],"sumWidth":["40","40","10","10"],"sumHeight":["60","20","60","20"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Two `Size` objects can be added together using the `plus(Size)` method. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var size1 = Size.of(width, height)","var size2 = Size.of(width2, height2)"]},

        {"kind":"when","text":"","code":["var sum = size1.plus(size2)"]},

        {"kind":"then","text":"","code":["sumWidth  < 0 ? !sum.width().isPresent()  : sum.width().get()  == sumWidth","sumHeight < 0 ? !sum.height().isPresent() : sum.height().get() == sumHeight"]},

        {"kind":"where","text":"","code":{"width":["10","10","10","10"],"height":["20","20","20","20"],"width2":["30","30","-1","-1"],"height2":["40","-40","40","-1"],"sumWidth":["40","40","10","10"],"sumHeight":["60","20","60","20"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Two `Size` objects can be added together using the `plus(double, double)` method. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var size1 = Size.of(width, height)"]},

        {"kind":"when","text":"","code":["var sum = size1.plus(width2, height2)"]},

        {"kind":"then","text":"","code":["sumWidth  < 0 ? !sum.width().isPresent()  : sum.width().get()  == sumWidth","sumHeight < 0 ? !sum.height().isPresent() : sum.height().get() == sumHeight"]},

        {"kind":"where","text":"","code":{"width":["10","10","10","10"],"height":["20","20","20","20"],"width2":["30","30","-5","-5"],"height2":["40","-40","40","-5"],"sumWidth":["40","40","5","5"],"sumHeight":["60","-1","60","15"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Two `Size` objects can be added together using the `plus(double, double)` method. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var size1 = Size.of(width, height)"]},

        {"kind":"when","text":"","code":["var sum = size1.plus(width2, height2)"]},

        {"kind":"then","text":"","code":["sumWidth  < 0 ? !sum.width().isPresent()  : sum.width().get()  == sumWidth","sumHeight < 0 ? !sum.height().isPresent() : sum.height().get() == sumHeight"]},

        {"kind":"where","text":"","code":{"width":["10","10","10","10"],"height":["20","20","20","20"],"width2":["30","30","-5","-5"],"height2":["40","-40","40","-5"],"sumWidth":["40","40","5","5"],"sumHeight":["60","-1","60","15"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Two `Size` objects can be added together using the `plus(double, double)` method. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var size1 = Size.of(width, height)"]},

        {"kind":"when","text":"","code":["var sum = size1.plus(width2, height2)"]},

        {"kind":"then","text":"","code":["sumWidth  < 0 ? !sum.width().isPresent()  : sum.width().get()  == sumWidth","sumHeight < 0 ? !sum.height().isPresent() : sum.height().get() == sumHeight"]},

        {"kind":"where","text":"","code":{"width":["10","10","10","10"],"height":["20","20","20","20"],"width2":["30","30","-5","-5"],"height2":["40","-40","40","-5"],"sumWidth":["40","40","5","5"],"sumHeight":["60","-1","60","15"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Two `Size` objects can be added together using the `plus(double, double)` method. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var size1 = Size.of(width, height)"]},

        {"kind":"when","text":"","code":["var sum = size1.plus(width2, height2)"]},

        {"kind":"then","text":"","code":["sumWidth  < 0 ? !sum.width().isPresent()  : sum.width().get()  == sumWidth","sumHeight < 0 ? !sum.height().isPresent() : sum.height().get() == sumHeight"]},

        {"kind":"where","text":"","code":{"width":["10","10","10","10"],"height":["20","20","20","20"],"width2":["30","30","-5","-5"],"height2":["40","-40","40","-5"],"sumWidth":["40","40","5","5"],"sumHeight":["60","-1","60","15"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Two `Size` objects can be subtracted using the `minus(Size)` method.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var size1 = Size.of(50, 20)","var size2 = Size.of(30, 40)"]},

        {"kind":"when","text":"","code":["var diff = size1.minus(size2)"]},

        {"kind":"then","text":"","code":["diff.width().get() == 20","!diff.height().isPresent()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
