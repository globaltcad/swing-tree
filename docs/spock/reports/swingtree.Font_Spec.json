{
  "className":"swingtree.Font_Spec",
  "title":"Fonts",
  "narrative":"As part of the `UI` namespace, SwingTree ships with a custom `Font`\n    sub-type that exposes a set of additional convenience methods for\n    working with fonts in Swing applications.",
  "subjects":["swingtree.UI$Font","swingtree.UI","swingtree.UIFactoryMethods"],
  "statistics":{
    "runs":"7",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Use the `UI.font(String)` method to parse a font string.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `UI.font(String)` decodes a font string based on the following\n            format: `family-style-size`. The `style` part is optional and can\n            be one of the following: PLAIN, BOLD, ITALIC, or BOLD_ITALIC.\n            You can also omit the size, in which case the default size of 12\n            multiplied by the current look and feel's scaling factor is used.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var font1 = UI.font('Ubuntu-PLAIN-14')","var font2 = UI.font('Dancing Script-ITALIC-24')"]},

        {"kind":"expect","text":"","code":["font1.family == 'Ubuntu'","font1.style == Font.PLAIN","font1.size == 14"]},

        {"kind":"and","text":"","code":["font2.family == 'Dancing Script'","font2.style == Font.ITALIC","font2.size == 24"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `UI.font(String)` method allows you to access fonts from a system property.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"First we setup a system property","code":["System.setProperty('my.fonts.AlloyInk', 'Alloy Ink-ITALIC-42')"]},

        {"kind":"when","text":"We use the `UI.font(String)` method to access the font","code":["var font = UI.font('my.fonts.AlloyInk')"]},

        {"kind":"then","text":"The font is correctly parsed","code":["font.family == 'a Alloy Ink'","font.style == Font.ITALIC","font.size == 42"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Simply pass the desired font name to the `UI.font(String)` to get a properly sized font object. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `UI.font(String)` method allows you to quickly instantiate a `Font` object\n            with the given font family name that has a default size of 12 multiplied by the\n            current look and feel's scaling factor.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We first initialise SwingTree suing the given scaling factor","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(scalingFactor))"]},

        {"kind":"and","text":"A new font object based on the Buggie font family.","code":["var font = UI.font('Buggie')"]},

        {"kind":"expect","text":"The font object has the correct family and size.","code":["font.family == 'Buggie'","font.size == (int)(12 * scalingFactor)","font.style == Font.PLAIN"]},

        {"kind":"where","text":"","code":{"scalingFactor":["1f","1.25f","1.5f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Simply pass the desired font name to the `UI.font(String)` to get a properly sized font object. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `UI.font(String)` method allows you to quickly instantiate a `Font` object\n            with the given font family name that has a default size of 12 multiplied by the\n            current look and feel's scaling factor.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We first initialise SwingTree suing the given scaling factor","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(scalingFactor))"]},

        {"kind":"and","text":"A new font object based on the Buggie font family.","code":["var font = UI.font('Buggie')"]},

        {"kind":"expect","text":"The font object has the correct family and size.","code":["font.family == 'Buggie'","font.size == (int)(12 * scalingFactor)","font.style == Font.PLAIN"]},

        {"kind":"where","text":"","code":{"scalingFactor":["1f","1.25f","1.5f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Simply pass the desired font name to the `UI.font(String)` to get a properly sized font object. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `UI.font(String)` method allows you to quickly instantiate a `Font` object\n            with the given font family name that has a default size of 12 multiplied by the\n            current look and feel's scaling factor.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We first initialise SwingTree suing the given scaling factor","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(scalingFactor))"]},

        {"kind":"and","text":"A new font object based on the Buggie font family.","code":["var font = UI.font('Buggie')"]},

        {"kind":"expect","text":"The font object has the correct family and size.","code":["font.family == 'Buggie'","font.size == (int)(12 * scalingFactor)","font.style == Font.PLAIN"]},

        {"kind":"where","text":"","code":{"scalingFactor":["1f","1.25f","1.5f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Simply pass the desired font name to the `UI.font(String)` to get a properly sized font object. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `UI.font(String)` method allows you to quickly instantiate a `Font` object\n            with the given font family name that has a default size of 12 multiplied by the\n            current look and feel's scaling factor.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We first initialise SwingTree suing the given scaling factor","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(scalingFactor))"]},

        {"kind":"and","text":"A new font object based on the Buggie font family.","code":["var font = UI.font('Buggie')"]},

        {"kind":"expect","text":"The font object has the correct family and size.","code":["font.family == 'Buggie'","font.size == (int)(12 * scalingFactor)","font.style == Font.PLAIN"]},

        {"kind":"where","text":"","code":{"scalingFactor":["1f","1.25f","1.5f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Simply pass the desired font name to the `UI.font(String)` to get a properly sized font object. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `UI.font(String)` method allows you to quickly instantiate a `Font` object\n            with the given font family name that has a default size of 12 multiplied by the\n            current look and feel's scaling factor.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We first initialise SwingTree suing the given scaling factor","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(scalingFactor))"]},

        {"kind":"and","text":"A new font object based on the Buggie font family.","code":["var font = UI.font('Buggie')"]},

        {"kind":"expect","text":"The font object has the correct family and size.","code":["font.family == 'Buggie'","font.size == (int)(12 * scalingFactor)","font.style == Font.PLAIN"]},

        {"kind":"where","text":"","code":{"scalingFactor":["1f","1.25f","1.5f","1.75f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
