{
  "className":"swingtree.Styles_Spec",
  "title":"The Style Configuration",
  "narrative":"This specification demonstrates what kind of style configuration is\n    created by various usage patterns of the style API.\n    The style configuration defines how Swing components ought to be\n    placed and rendered.",
  "subjects":["swingtree.style.StyleConf"],
  "statistics":{
    "runs":"64",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [5]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [6]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [7]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [8]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [9]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [10]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [11]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [12]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [13]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [14]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [15]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [16]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [17]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [18]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [19]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [20]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [21]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [22]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [23]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [24]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [25]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [26]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [27]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [28]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [29]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [30]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [31]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [32]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [33]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [34]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [35]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [36]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various kinds of String expressions can be parsed as colors by various style properties. [37]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use method chaining within the style API to build a colorful style:","code":["var style =","                ComponentExtension.from(","                    UI.of(new JComponent(){})","                    .withStyle(conf -> conf","                        .foundationColor(colorString)","                        .backgroundColor(colorString)","                        .foregroundColor(colorString)","                        .border(1, colorString)","                        .shadowColor(colorString)","                        .fontSelectionColor(colorString)","                        .fontColor(colorString)","                    )","                    .get(JComponent)","                )","                .getStyle()"]},

        {"kind":"and","text":"We unpack everything:","code":["var foundationColor = style.base().foundationColor()","var backgroundColor = style.base().backgroundColor()","var foregroundColor = style.base().foregroundColor()","var borderColor = style.border().colors()","var shadowColor = style.shadow().color()","var fontSelectionColor = style.font().selectionColor()","var fontColor = style.font().paint()"]},

        {"kind":"expect","text":"","code":["backgroundColor.get() == expectedColor","foregroundColor.get() == expectedColor"]},

        {"kind":"and","text":"","code":["!foundationColor.isPresent() && expectedColor == UI.Color.UNDEFINED || foundationColor.get() == expectedColor","!borderColor.every( c -> c == UI.Color.UNDEFINED ) && expectedColor == UI.Color.UNDEFINED || borderColor.everyColor( c -> c == expectedColor )","!shadowColor.isPresent() && expectedColor == UI.Color.UNDEFINED || shadowColor.get() == expectedColor","!fontSelectionColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontSelectionColor.get() == expectedColor","!fontColor.isPresent() && expectedColor == UI.Color.UNDEFINED || fontColor.get() == expectedColor"]},

        {"kind":"where","text":"","code":{"colorString":["\"red\"","\"#ff0000\"","\"0xff0000\"","\"rgb(255,0,0)\"","\"rgba(1.0,0,0,1.0)\"","\"rgba(100%,0,0, 1.0)\"","\"rgba(255,0,0,255)\"","\"rgba(100%,0,0,100%)\"","\"hsb(0,100%,100%)\"","\"hsb(0,1.0,1f)\"","\"magenta\"","\"#ff00ff\"","\"0xff00ff\"","\"rgb(255,0,255)\"","\"rgba(1.0,0,1.0,1.0)\"","\"rgba(100%,0,100%,1f)\"","\"rgba(255,0,255,255)\"","\"rgba(100%,0,100%,100%)\"","\"hsb(0.8333333,100%,100%)\"","\"hsb(300°,100%,100%)\"","\"rgb(255,22,0)\"","\"rgba(255,22,0, 0.5)\"","\"hsb(0.014379084,1f,1f)\"","\"hsba(0.014379084,1f,1f,0.5)\"","\"transparent\"","\"yellow\"","\"black\"","\"indigo\"","\"transparent purple\"","\"transparent red\"","\"transparent green\"","\"transparent blue\"","\"light indigo\"","\"dark navy\"","\"\"","\"I make no sense!\"","\"I make no sense! at all!\"","\"Hold my b(0/&/§H%,1fu3s98s\""],"expectedColor":["Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.RED","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","Color.MAGENTA","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(255, 22, 0)","new Color(255, 22, 0, 127)","new Color(0, 0, 0, 0)","Color.YELLOW","Color.BLACK","new Color(75, 0, 130)","new Color(128, 0, 128, 127)","new Color(255, 0, 0, 127)","new Color(0, 128, 0, 127)","new Color(0, 0, 255, 127)","new Color(107, 0, 186)","new Color(0, 0, 90)","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED","UI.Color.UNDEFINED"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The String representation of a style config will tell you everything about it! [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing { it.uiScaleFactor(uiScale) }","var scale = { it * uiScale }","var scaledToString = { String.valueOf(scale(it)).replace(\".0\", \"\") }","var roundScaledToString = { String.valueOf(Math.round(scale(it))).replace(\".0\", \"\") }"]},

        {"kind":"and","text":"\n            We create a simple Swing component, a JSpinner, and\n            send it through the SwingTree builder API where\n            we apply a style to it by updating its style configuration.\n        ","code":["var style =","                ComponentExtension.from(","                    UI.of(new JSpinner()).withStyle(conf->conf","                        .foundationColor(\"red\")","                        .backgroundColor(\"green\")","                        .borderColor(\"blue\")","                        .borderWidths(1, 2, 3, 4)","                        .borderRadius(12, 18)","                        .shadowColor(\"yellow\")","                        .fontSelectionColor(\"cyan\")","                        .fontColor(\"magenta\")","                        .fontFamily(\"Times New Roman\")","                        .fontSize(12)","                        .fontBold(true)","                        .fontUnderline(true)","                        .fontStrikeThrough(true)","                    )","                    .get(JSpinner)","                )","                .getStyle()"]},

        {"kind":"expect","text":"","code":["style.toString() == \"StyleConf[\" +","                        \"LayoutConf[NONE], \" +","                        \"BorderConf[\" +","                            \"arcWidth=\" + scaledToString(12) + \", \" +","                            \"arcHeight=\" + scaledToString(18) + \", \" +","                            \"topWidth=\" + scaledToString(1) + \", \" +","                            \"rightWidth=\" + scaledToString(2) + \", \" +","                            \"bottomWidth=\" + scaledToString(3) + \", \" +","                            \"leftWidth=\" + scaledToString(4) + \", \" +","                            \"margin=Outline[\" +","                                \"top=${(scale(1) % 1 == 0 ? \"?\" : 1 - scale(1) % 1 )}, \" +","                                \"right=${(scale(2) % 1 == 0 ? \"?\" : 1 - scale(2) % 1 )}, \" +","                                \"bottom=${(scale(3) % 1 == 0 ? \"?\" : 1 - scale(3) % 1 )}, \" +","                                \"left=${(scale(4) % 1 == 0 ? \"?\" : 1 - scale(4) % 1 )}\" +","                            \"], \" +","                            \"padding=Outline[top=?, right=?, bottom=?, left=?], \" +","                            \"color=rgba(0,0,255,255)\" +","                        \"], \" +","                        \"BaseConf[\" +","                            \"icon=?, \" +","                            \"fitComponent=NO, \" +","                            \"backgroundColor=rgba(0,128,0,255), \" +","                            \"foundationColor=rgba(255,0,0,255), \" +","                            \"foregroundColor=?, \" +","                            \"cursor=?, \" +","                            \"orientation=UNKNOWN\" +","                        \"], \" +","                        \"FontConf[\" +","                            \"family=Times New Roman, \" +","                            \"size=\" + Math.round(12*uiScale) + \", \" +","                            \"posture=0.0, \" +","                            \"weight=2.0, \" +","                            \"spacing=0.0, \" +","                            \"underlined=true, \" +","                            \"strikeThrough=true, \" +","                            \"selectionColor=rgba(0,255,255,255), \" +","                            \"transform=?, \" +","                            \"paint=FontPaintConf[rgba(255,0,255,255)], \" +","                            \"backgroundPaint=FontPaintConf[NONE], \" +","                            \"horizontalAlignment=?, \" +","                            \"verticalAlignment=?\" +","                        \"], \" +","                        \"DimensionalityConf[NONE], \" +","                        \"StyleConfLayers[\" +","                            \"filter=FilterConf[NONE], \" +","                            \"background=StyleConfLayer[EMPTY], \" +","                            \"content=StyleConfLayer[\" +","                                \"shadows=ShadowConf[\" +","                                    \"horizontalOffset=0, \" +","                                    \"verticalOffset=0, \" +","                                    \"blurRadius=0, \" +","                                    \"spreadRadius=0, \" +","                                    \"color=rgba(255,255,0,255), \" +","                                    \"isInset=false\" +","                                \"], \" +","                                \"painters=PainterConf[NONE], \" +","                                \"gradients=GradientConf[NONE], \" +","                                \"noises=NoiseConf[NONE], \" +","                                \"images=ImageConf[NONE], \" +","                                \"texts=TextConf[NONE]\" +","                            \"], \" +","                            \"border=StyleConfLayer[EMPTY], \" +","                            \"foreground=StyleConfLayer[EMPTY]\" +","                        \"], \" +","                        \"properties=[]\" +","                    \"]\""]},

        {"kind":"when","text":"We create another style with some other properties:","code":["var paint1 = new GradientPaint(0, 0, Color.RED, 100, 100, Color.BLUE)","var paint2 = new GradientPaint(0, 0, Color.BLACK, 100, 100, Color.GREEN)","var transform = AffineTransform.getRotateInstance(0.5)","style = ComponentExtension.from(","                    UI.of(new JSpinner()).withStyle(conf->conf","                        .fontAlignment(UI.Alignment.CENTER)","                        .fontBackgroundColor(\"cyan\")","                        .fontBackgroundColor(new Color(0, 42, 42, 42))","                        .fontBackgroundPaint(paint1)","                        .fontPaint(paint2)","                        .fontTransform(transform)","                        .image(UI.Layer.FOREGROUND, \"bubbles\", imgConf -> imgConf","                            .fitMode(UI.FitComponent.WIDTH)","                            .repeat(true)","                            .image(\"/img/bubble-tree.svg\")","                        )","                    )","                    .get(JSpinner)","                )","                .getStyle()"]},

        {"kind":"then","text":"The style config has the expected string representation.","code":["style.toString() == \"StyleConf[\" +","                        \"LayoutConf[NONE], \" +","                        \"BorderConf[NONE], \" +","                        \"BaseConf[NONE], \" +","                        \"FontConf[\" +","                            \"family=, \" +","                            \"size=0, \" +","                            \"posture=0.0, \" +","                            \"weight=0.0, \" +","                            \"spacing=0.0, \" +","                            \"underlined=?, \" +","                            \"strikeThrough=?, \" +","                            \"selectionColor=?, \" +","                            \"transform=$transform, \" +","                            \"paint=FontPaintConf[$paint2], \" +","                            \"backgroundPaint=FontPaintConf[$paint1], \" +","                            \"horizontalAlignment=CENTER, \" +","                            \"verticalAlignment=CENTER\" +","                        \"], \" +","                        \"DimensionalityConf[NONE], \" +","                        \"StyleConfLayers[\" +","                            \"filter=FilterConf[NONE], \" +","                            \"background=StyleConfLayer[EMPTY], \" +","                            \"content=StyleConfLayer[EMPTY], \" +","                            \"border=StyleConfLayer[EMPTY], \" +","                            \"foreground=StyleConfLayer[\" +","                                \"shadows=ShadowConf[NONE], \" +","                                \"painters=PainterConf[NONE], \" +","                                \"gradients=GradientConf[NONE], \" +","                                \"noises=NoiseConf[NONE], \" +","                                \"images=NamedConfigs[\" +","                                    \"default=ImageConf[NONE], \" +","                                    \"bubbles=ImageConf[\" +","                                        \"primer=?, \" +","                                        \"image=${style.images(UI.Layer.FOREGROUND).get(0).image().get()}, \" +","                                        \"placement=UNDEFINED, \" +","                                        \"repeat=true, \" +","                                        \"fitComponent=WIDTH, \" +","                                        \"width=?, height=?, \" +","                                        \"opacity=1.0, \" +","                                        \"padding=Outline[top=?, right=?, bottom=?, left=?], \" +","                                        \"offset=Offset[x=0, y=0], \" +","                                        \"clipArea=BODY\" +","                                    \"]\" +","                                \"], \" +","                                \"texts=TextConf[NONE]\" +","                            \"]\" +","                        \"], \" +","                        \"properties=[]\" +","                    \"]\""]},

        {"kind":"when","text":"We create another style with some other properties:","code":["style = ComponentExtension.from(","                    UI.of(new JPanel()).withStyle(conf->conf","                        .layout(Layout.border(2, 4))","                        .size(100, 200)","                        .minSize(50, 100)","                        .maxHeight(300)","                        .prefWidth(400)","                        .gradient(UI.Layer.BORDER, \"gradient\", imgConf -> imgConf","                            .colors(Color.RED, Color.GREEN, Color.BLUE)","                            .span(UI.Span.BOTTOM_TO_TOP)","                            .type(UI.GradientType.RADIAL)","                        )","                    )","                    .get(JPanel)","                )","                .getStyle()"]},

        {"kind":"then","text":"","code":["style.toString() == \"StyleConf[\" +","                        \"LayoutConf[\" +","                            \"layout=BorderLayoutInstaller[hgap=2, vgap=4], \" +","                            \"constraint=?, \" +","                            \"alignmentX=?, \" +","                            \"alignmentY=?\" +","                        \"], \" +","                        \"BorderConf[NONE], \" +","                        \"BaseConf[NONE], \" +","                        \"FontConf[NONE], \" +","                        \"DimensionalityConf[\" +","                            \"minWidth=\" + roundScaledToString(50) + \", \" +","                            \"minHeight=\" + roundScaledToString(100) + \", \" +","                            \"maxWidth=\" + roundScaledToString(300) + \", \" +","                            \"maxHeight=?, \" +","                            \"preferredWidth=\" + roundScaledToString(400) + \", \" +","                            \"preferredHeight=?, \" +","                            \"width=\" + roundScaledToString(100) + \", \" +","                            \"height=\" + roundScaledToString(200) +","                        \"], \" +","                        \"StyleConfLayers[\" +","                            \"filter=FilterConf[NONE], \" +","                            \"background=StyleConfLayer[EMPTY], \" +","                            \"content=StyleConfLayer[EMPTY], \" +","                            \"border=StyleConfLayer[\" +","                                \"shadows=ShadowConf[NONE], \" +","                                \"painters=PainterConf[NONE], \" +","                                \"gradients=NamedConfigs[\" +","                                    \"default=GradientConf[NONE], \" +","                                    \"gradient=GradientConf[\" +","                                        \"transition=BOTTOM_TO_TOP, \" +","                                        \"type=RADIAL, \" +","                                        \"colors=[java.awt.Color[r=255,g=0,b=0], \" +","                                        \"java.awt.Color[r=0,g=255,b=0], \" +","                                        \"java.awt.Color[r=0,g=0,b=255]], \" +","                                        \"offset=Offset[x=0, y=0], \" +","                                        \"size=-1.0, \" +","                                        \"area=BODY, \" +","                                        \"boundary=EXTERIOR_TO_BORDER, \" +","                                        \"focus=Offset[x=0, y=0], \" +","                                        \"rotation=0.0, \" +","                                        \"fractions=[], \" +","                                        \"cycle=NONE\" +","                                    \"]\" +","                                \"], \" +","                                \"noises=NoiseConf[NONE], \" +","                                \"images=ImageConf[NONE], \" +","                                \"texts=TextConf[NONE]\" +","                            \"], \" +","                            \"foreground=StyleConfLayer[EMPTY]\" +","                        \"], \" +","                        \"properties=[]\" +","                    \"]\""]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","1.5f","2.0f","2.25f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The String representation of a style config will tell you everything about it! [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing { it.uiScaleFactor(uiScale) }","var scale = { it * uiScale }","var scaledToString = { String.valueOf(scale(it)).replace(\".0\", \"\") }","var roundScaledToString = { String.valueOf(Math.round(scale(it))).replace(\".0\", \"\") }"]},

        {"kind":"and","text":"\n            We create a simple Swing component, a JSpinner, and\n            send it through the SwingTree builder API where\n            we apply a style to it by updating its style configuration.\n        ","code":["var style =","                ComponentExtension.from(","                    UI.of(new JSpinner()).withStyle(conf->conf","                        .foundationColor(\"red\")","                        .backgroundColor(\"green\")","                        .borderColor(\"blue\")","                        .borderWidths(1, 2, 3, 4)","                        .borderRadius(12, 18)","                        .shadowColor(\"yellow\")","                        .fontSelectionColor(\"cyan\")","                        .fontColor(\"magenta\")","                        .fontFamily(\"Times New Roman\")","                        .fontSize(12)","                        .fontBold(true)","                        .fontUnderline(true)","                        .fontStrikeThrough(true)","                    )","                    .get(JSpinner)","                )","                .getStyle()"]},

        {"kind":"expect","text":"","code":["style.toString() == \"StyleConf[\" +","                        \"LayoutConf[NONE], \" +","                        \"BorderConf[\" +","                            \"arcWidth=\" + scaledToString(12) + \", \" +","                            \"arcHeight=\" + scaledToString(18) + \", \" +","                            \"topWidth=\" + scaledToString(1) + \", \" +","                            \"rightWidth=\" + scaledToString(2) + \", \" +","                            \"bottomWidth=\" + scaledToString(3) + \", \" +","                            \"leftWidth=\" + scaledToString(4) + \", \" +","                            \"margin=Outline[\" +","                                \"top=${(scale(1) % 1 == 0 ? \"?\" : 1 - scale(1) % 1 )}, \" +","                                \"right=${(scale(2) % 1 == 0 ? \"?\" : 1 - scale(2) % 1 )}, \" +","                                \"bottom=${(scale(3) % 1 == 0 ? \"?\" : 1 - scale(3) % 1 )}, \" +","                                \"left=${(scale(4) % 1 == 0 ? \"?\" : 1 - scale(4) % 1 )}\" +","                            \"], \" +","                            \"padding=Outline[top=?, right=?, bottom=?, left=?], \" +","                            \"color=rgba(0,0,255,255)\" +","                        \"], \" +","                        \"BaseConf[\" +","                            \"icon=?, \" +","                            \"fitComponent=NO, \" +","                            \"backgroundColor=rgba(0,128,0,255), \" +","                            \"foundationColor=rgba(255,0,0,255), \" +","                            \"foregroundColor=?, \" +","                            \"cursor=?, \" +","                            \"orientation=UNKNOWN\" +","                        \"], \" +","                        \"FontConf[\" +","                            \"family=Times New Roman, \" +","                            \"size=\" + Math.round(12*uiScale) + \", \" +","                            \"posture=0.0, \" +","                            \"weight=2.0, \" +","                            \"spacing=0.0, \" +","                            \"underlined=true, \" +","                            \"strikeThrough=true, \" +","                            \"selectionColor=rgba(0,255,255,255), \" +","                            \"transform=?, \" +","                            \"paint=FontPaintConf[rgba(255,0,255,255)], \" +","                            \"backgroundPaint=FontPaintConf[NONE], \" +","                            \"horizontalAlignment=?, \" +","                            \"verticalAlignment=?\" +","                        \"], \" +","                        \"DimensionalityConf[NONE], \" +","                        \"StyleConfLayers[\" +","                            \"filter=FilterConf[NONE], \" +","                            \"background=StyleConfLayer[EMPTY], \" +","                            \"content=StyleConfLayer[\" +","                                \"shadows=ShadowConf[\" +","                                    \"horizontalOffset=0, \" +","                                    \"verticalOffset=0, \" +","                                    \"blurRadius=0, \" +","                                    \"spreadRadius=0, \" +","                                    \"color=rgba(255,255,0,255), \" +","                                    \"isInset=false\" +","                                \"], \" +","                                \"painters=PainterConf[NONE], \" +","                                \"gradients=GradientConf[NONE], \" +","                                \"noises=NoiseConf[NONE], \" +","                                \"images=ImageConf[NONE], \" +","                                \"texts=TextConf[NONE]\" +","                            \"], \" +","                            \"border=StyleConfLayer[EMPTY], \" +","                            \"foreground=StyleConfLayer[EMPTY]\" +","                        \"], \" +","                        \"properties=[]\" +","                    \"]\""]},

        {"kind":"when","text":"We create another style with some other properties:","code":["var paint1 = new GradientPaint(0, 0, Color.RED, 100, 100, Color.BLUE)","var paint2 = new GradientPaint(0, 0, Color.BLACK, 100, 100, Color.GREEN)","var transform = AffineTransform.getRotateInstance(0.5)","style = ComponentExtension.from(","                    UI.of(new JSpinner()).withStyle(conf->conf","                        .fontAlignment(UI.Alignment.CENTER)","                        .fontBackgroundColor(\"cyan\")","                        .fontBackgroundColor(new Color(0, 42, 42, 42))","                        .fontBackgroundPaint(paint1)","                        .fontPaint(paint2)","                        .fontTransform(transform)","                        .image(UI.Layer.FOREGROUND, \"bubbles\", imgConf -> imgConf","                            .fitMode(UI.FitComponent.WIDTH)","                            .repeat(true)","                            .image(\"/img/bubble-tree.svg\")","                        )","                    )","                    .get(JSpinner)","                )","                .getStyle()"]},

        {"kind":"then","text":"The style config has the expected string representation.","code":["style.toString() == \"StyleConf[\" +","                        \"LayoutConf[NONE], \" +","                        \"BorderConf[NONE], \" +","                        \"BaseConf[NONE], \" +","                        \"FontConf[\" +","                            \"family=, \" +","                            \"size=0, \" +","                            \"posture=0.0, \" +","                            \"weight=0.0, \" +","                            \"spacing=0.0, \" +","                            \"underlined=?, \" +","                            \"strikeThrough=?, \" +","                            \"selectionColor=?, \" +","                            \"transform=$transform, \" +","                            \"paint=FontPaintConf[$paint2], \" +","                            \"backgroundPaint=FontPaintConf[$paint1], \" +","                            \"horizontalAlignment=CENTER, \" +","                            \"verticalAlignment=CENTER\" +","                        \"], \" +","                        \"DimensionalityConf[NONE], \" +","                        \"StyleConfLayers[\" +","                            \"filter=FilterConf[NONE], \" +","                            \"background=StyleConfLayer[EMPTY], \" +","                            \"content=StyleConfLayer[EMPTY], \" +","                            \"border=StyleConfLayer[EMPTY], \" +","                            \"foreground=StyleConfLayer[\" +","                                \"shadows=ShadowConf[NONE], \" +","                                \"painters=PainterConf[NONE], \" +","                                \"gradients=GradientConf[NONE], \" +","                                \"noises=NoiseConf[NONE], \" +","                                \"images=NamedConfigs[\" +","                                    \"default=ImageConf[NONE], \" +","                                    \"bubbles=ImageConf[\" +","                                        \"primer=?, \" +","                                        \"image=${style.images(UI.Layer.FOREGROUND).get(0).image().get()}, \" +","                                        \"placement=UNDEFINED, \" +","                                        \"repeat=true, \" +","                                        \"fitComponent=WIDTH, \" +","                                        \"width=?, height=?, \" +","                                        \"opacity=1.0, \" +","                                        \"padding=Outline[top=?, right=?, bottom=?, left=?], \" +","                                        \"offset=Offset[x=0, y=0], \" +","                                        \"clipArea=BODY\" +","                                    \"]\" +","                                \"], \" +","                                \"texts=TextConf[NONE]\" +","                            \"]\" +","                        \"], \" +","                        \"properties=[]\" +","                    \"]\""]},

        {"kind":"when","text":"We create another style with some other properties:","code":["style = ComponentExtension.from(","                    UI.of(new JPanel()).withStyle(conf->conf","                        .layout(Layout.border(2, 4))","                        .size(100, 200)","                        .minSize(50, 100)","                        .maxHeight(300)","                        .prefWidth(400)","                        .gradient(UI.Layer.BORDER, \"gradient\", imgConf -> imgConf","                            .colors(Color.RED, Color.GREEN, Color.BLUE)","                            .span(UI.Span.BOTTOM_TO_TOP)","                            .type(UI.GradientType.RADIAL)","                        )","                    )","                    .get(JPanel)","                )","                .getStyle()"]},

        {"kind":"then","text":"","code":["style.toString() == \"StyleConf[\" +","                        \"LayoutConf[\" +","                            \"layout=BorderLayoutInstaller[hgap=2, vgap=4], \" +","                            \"constraint=?, \" +","                            \"alignmentX=?, \" +","                            \"alignmentY=?\" +","                        \"], \" +","                        \"BorderConf[NONE], \" +","                        \"BaseConf[NONE], \" +","                        \"FontConf[NONE], \" +","                        \"DimensionalityConf[\" +","                            \"minWidth=\" + roundScaledToString(50) + \", \" +","                            \"minHeight=\" + roundScaledToString(100) + \", \" +","                            \"maxWidth=\" + roundScaledToString(300) + \", \" +","                            \"maxHeight=?, \" +","                            \"preferredWidth=\" + roundScaledToString(400) + \", \" +","                            \"preferredHeight=?, \" +","                            \"width=\" + roundScaledToString(100) + \", \" +","                            \"height=\" + roundScaledToString(200) +","                        \"], \" +","                        \"StyleConfLayers[\" +","                            \"filter=FilterConf[NONE], \" +","                            \"background=StyleConfLayer[EMPTY], \" +","                            \"content=StyleConfLayer[EMPTY], \" +","                            \"border=StyleConfLayer[\" +","                                \"shadows=ShadowConf[NONE], \" +","                                \"painters=PainterConf[NONE], \" +","                                \"gradients=NamedConfigs[\" +","                                    \"default=GradientConf[NONE], \" +","                                    \"gradient=GradientConf[\" +","                                        \"transition=BOTTOM_TO_TOP, \" +","                                        \"type=RADIAL, \" +","                                        \"colors=[java.awt.Color[r=255,g=0,b=0], \" +","                                        \"java.awt.Color[r=0,g=255,b=0], \" +","                                        \"java.awt.Color[r=0,g=0,b=255]], \" +","                                        \"offset=Offset[x=0, y=0], \" +","                                        \"size=-1.0, \" +","                                        \"area=BODY, \" +","                                        \"boundary=EXTERIOR_TO_BORDER, \" +","                                        \"focus=Offset[x=0, y=0], \" +","                                        \"rotation=0.0, \" +","                                        \"fractions=[], \" +","                                        \"cycle=NONE\" +","                                    \"]\" +","                                \"], \" +","                                \"noises=NoiseConf[NONE], \" +","                                \"images=ImageConf[NONE], \" +","                                \"texts=TextConf[NONE]\" +","                            \"], \" +","                            \"foreground=StyleConfLayer[EMPTY]\" +","                        \"], \" +","                        \"properties=[]\" +","                    \"]\""]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","1.5f","2.0f","2.25f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The String representation of a style config will tell you everything about it! [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing { it.uiScaleFactor(uiScale) }","var scale = { it * uiScale }","var scaledToString = { String.valueOf(scale(it)).replace(\".0\", \"\") }","var roundScaledToString = { String.valueOf(Math.round(scale(it))).replace(\".0\", \"\") }"]},

        {"kind":"and","text":"\n            We create a simple Swing component, a JSpinner, and\n            send it through the SwingTree builder API where\n            we apply a style to it by updating its style configuration.\n        ","code":["var style =","                ComponentExtension.from(","                    UI.of(new JSpinner()).withStyle(conf->conf","                        .foundationColor(\"red\")","                        .backgroundColor(\"green\")","                        .borderColor(\"blue\")","                        .borderWidths(1, 2, 3, 4)","                        .borderRadius(12, 18)","                        .shadowColor(\"yellow\")","                        .fontSelectionColor(\"cyan\")","                        .fontColor(\"magenta\")","                        .fontFamily(\"Times New Roman\")","                        .fontSize(12)","                        .fontBold(true)","                        .fontUnderline(true)","                        .fontStrikeThrough(true)","                    )","                    .get(JSpinner)","                )","                .getStyle()"]},

        {"kind":"expect","text":"","code":["style.toString() == \"StyleConf[\" +","                        \"LayoutConf[NONE], \" +","                        \"BorderConf[\" +","                            \"arcWidth=\" + scaledToString(12) + \", \" +","                            \"arcHeight=\" + scaledToString(18) + \", \" +","                            \"topWidth=\" + scaledToString(1) + \", \" +","                            \"rightWidth=\" + scaledToString(2) + \", \" +","                            \"bottomWidth=\" + scaledToString(3) + \", \" +","                            \"leftWidth=\" + scaledToString(4) + \", \" +","                            \"margin=Outline[\" +","                                \"top=${(scale(1) % 1 == 0 ? \"?\" : 1 - scale(1) % 1 )}, \" +","                                \"right=${(scale(2) % 1 == 0 ? \"?\" : 1 - scale(2) % 1 )}, \" +","                                \"bottom=${(scale(3) % 1 == 0 ? \"?\" : 1 - scale(3) % 1 )}, \" +","                                \"left=${(scale(4) % 1 == 0 ? \"?\" : 1 - scale(4) % 1 )}\" +","                            \"], \" +","                            \"padding=Outline[top=?, right=?, bottom=?, left=?], \" +","                            \"color=rgba(0,0,255,255)\" +","                        \"], \" +","                        \"BaseConf[\" +","                            \"icon=?, \" +","                            \"fitComponent=NO, \" +","                            \"backgroundColor=rgba(0,128,0,255), \" +","                            \"foundationColor=rgba(255,0,0,255), \" +","                            \"foregroundColor=?, \" +","                            \"cursor=?, \" +","                            \"orientation=UNKNOWN\" +","                        \"], \" +","                        \"FontConf[\" +","                            \"family=Times New Roman, \" +","                            \"size=\" + Math.round(12*uiScale) + \", \" +","                            \"posture=0.0, \" +","                            \"weight=2.0, \" +","                            \"spacing=0.0, \" +","                            \"underlined=true, \" +","                            \"strikeThrough=true, \" +","                            \"selectionColor=rgba(0,255,255,255), \" +","                            \"transform=?, \" +","                            \"paint=FontPaintConf[rgba(255,0,255,255)], \" +","                            \"backgroundPaint=FontPaintConf[NONE], \" +","                            \"horizontalAlignment=?, \" +","                            \"verticalAlignment=?\" +","                        \"], \" +","                        \"DimensionalityConf[NONE], \" +","                        \"StyleConfLayers[\" +","                            \"filter=FilterConf[NONE], \" +","                            \"background=StyleConfLayer[EMPTY], \" +","                            \"content=StyleConfLayer[\" +","                                \"shadows=ShadowConf[\" +","                                    \"horizontalOffset=0, \" +","                                    \"verticalOffset=0, \" +","                                    \"blurRadius=0, \" +","                                    \"spreadRadius=0, \" +","                                    \"color=rgba(255,255,0,255), \" +","                                    \"isInset=false\" +","                                \"], \" +","                                \"painters=PainterConf[NONE], \" +","                                \"gradients=GradientConf[NONE], \" +","                                \"noises=NoiseConf[NONE], \" +","                                \"images=ImageConf[NONE], \" +","                                \"texts=TextConf[NONE]\" +","                            \"], \" +","                            \"border=StyleConfLayer[EMPTY], \" +","                            \"foreground=StyleConfLayer[EMPTY]\" +","                        \"], \" +","                        \"properties=[]\" +","                    \"]\""]},

        {"kind":"when","text":"We create another style with some other properties:","code":["var paint1 = new GradientPaint(0, 0, Color.RED, 100, 100, Color.BLUE)","var paint2 = new GradientPaint(0, 0, Color.BLACK, 100, 100, Color.GREEN)","var transform = AffineTransform.getRotateInstance(0.5)","style = ComponentExtension.from(","                    UI.of(new JSpinner()).withStyle(conf->conf","                        .fontAlignment(UI.Alignment.CENTER)","                        .fontBackgroundColor(\"cyan\")","                        .fontBackgroundColor(new Color(0, 42, 42, 42))","                        .fontBackgroundPaint(paint1)","                        .fontPaint(paint2)","                        .fontTransform(transform)","                        .image(UI.Layer.FOREGROUND, \"bubbles\", imgConf -> imgConf","                            .fitMode(UI.FitComponent.WIDTH)","                            .repeat(true)","                            .image(\"/img/bubble-tree.svg\")","                        )","                    )","                    .get(JSpinner)","                )","                .getStyle()"]},

        {"kind":"then","text":"The style config has the expected string representation.","code":["style.toString() == \"StyleConf[\" +","                        \"LayoutConf[NONE], \" +","                        \"BorderConf[NONE], \" +","                        \"BaseConf[NONE], \" +","                        \"FontConf[\" +","                            \"family=, \" +","                            \"size=0, \" +","                            \"posture=0.0, \" +","                            \"weight=0.0, \" +","                            \"spacing=0.0, \" +","                            \"underlined=?, \" +","                            \"strikeThrough=?, \" +","                            \"selectionColor=?, \" +","                            \"transform=$transform, \" +","                            \"paint=FontPaintConf[$paint2], \" +","                            \"backgroundPaint=FontPaintConf[$paint1], \" +","                            \"horizontalAlignment=CENTER, \" +","                            \"verticalAlignment=CENTER\" +","                        \"], \" +","                        \"DimensionalityConf[NONE], \" +","                        \"StyleConfLayers[\" +","                            \"filter=FilterConf[NONE], \" +","                            \"background=StyleConfLayer[EMPTY], \" +","                            \"content=StyleConfLayer[EMPTY], \" +","                            \"border=StyleConfLayer[EMPTY], \" +","                            \"foreground=StyleConfLayer[\" +","                                \"shadows=ShadowConf[NONE], \" +","                                \"painters=PainterConf[NONE], \" +","                                \"gradients=GradientConf[NONE], \" +","                                \"noises=NoiseConf[NONE], \" +","                                \"images=NamedConfigs[\" +","                                    \"default=ImageConf[NONE], \" +","                                    \"bubbles=ImageConf[\" +","                                        \"primer=?, \" +","                                        \"image=${style.images(UI.Layer.FOREGROUND).get(0).image().get()}, \" +","                                        \"placement=UNDEFINED, \" +","                                        \"repeat=true, \" +","                                        \"fitComponent=WIDTH, \" +","                                        \"width=?, height=?, \" +","                                        \"opacity=1.0, \" +","                                        \"padding=Outline[top=?, right=?, bottom=?, left=?], \" +","                                        \"offset=Offset[x=0, y=0], \" +","                                        \"clipArea=BODY\" +","                                    \"]\" +","                                \"], \" +","                                \"texts=TextConf[NONE]\" +","                            \"]\" +","                        \"], \" +","                        \"properties=[]\" +","                    \"]\""]},

        {"kind":"when","text":"We create another style with some other properties:","code":["style = ComponentExtension.from(","                    UI.of(new JPanel()).withStyle(conf->conf","                        .layout(Layout.border(2, 4))","                        .size(100, 200)","                        .minSize(50, 100)","                        .maxHeight(300)","                        .prefWidth(400)","                        .gradient(UI.Layer.BORDER, \"gradient\", imgConf -> imgConf","                            .colors(Color.RED, Color.GREEN, Color.BLUE)","                            .span(UI.Span.BOTTOM_TO_TOP)","                            .type(UI.GradientType.RADIAL)","                        )","                    )","                    .get(JPanel)","                )","                .getStyle()"]},

        {"kind":"then","text":"","code":["style.toString() == \"StyleConf[\" +","                        \"LayoutConf[\" +","                            \"layout=BorderLayoutInstaller[hgap=2, vgap=4], \" +","                            \"constraint=?, \" +","                            \"alignmentX=?, \" +","                            \"alignmentY=?\" +","                        \"], \" +","                        \"BorderConf[NONE], \" +","                        \"BaseConf[NONE], \" +","                        \"FontConf[NONE], \" +","                        \"DimensionalityConf[\" +","                            \"minWidth=\" + roundScaledToString(50) + \", \" +","                            \"minHeight=\" + roundScaledToString(100) + \", \" +","                            \"maxWidth=\" + roundScaledToString(300) + \", \" +","                            \"maxHeight=?, \" +","                            \"preferredWidth=\" + roundScaledToString(400) + \", \" +","                            \"preferredHeight=?, \" +","                            \"width=\" + roundScaledToString(100) + \", \" +","                            \"height=\" + roundScaledToString(200) +","                        \"], \" +","                        \"StyleConfLayers[\" +","                            \"filter=FilterConf[NONE], \" +","                            \"background=StyleConfLayer[EMPTY], \" +","                            \"content=StyleConfLayer[EMPTY], \" +","                            \"border=StyleConfLayer[\" +","                                \"shadows=ShadowConf[NONE], \" +","                                \"painters=PainterConf[NONE], \" +","                                \"gradients=NamedConfigs[\" +","                                    \"default=GradientConf[NONE], \" +","                                    \"gradient=GradientConf[\" +","                                        \"transition=BOTTOM_TO_TOP, \" +","                                        \"type=RADIAL, \" +","                                        \"colors=[java.awt.Color[r=255,g=0,b=0], \" +","                                        \"java.awt.Color[r=0,g=255,b=0], \" +","                                        \"java.awt.Color[r=0,g=0,b=255]], \" +","                                        \"offset=Offset[x=0, y=0], \" +","                                        \"size=-1.0, \" +","                                        \"area=BODY, \" +","                                        \"boundary=EXTERIOR_TO_BORDER, \" +","                                        \"focus=Offset[x=0, y=0], \" +","                                        \"rotation=0.0, \" +","                                        \"fractions=[], \" +","                                        \"cycle=NONE\" +","                                    \"]\" +","                                \"], \" +","                                \"noises=NoiseConf[NONE], \" +","                                \"images=ImageConf[NONE], \" +","                                \"texts=TextConf[NONE]\" +","                            \"], \" +","                            \"foreground=StyleConfLayer[EMPTY]\" +","                        \"], \" +","                        \"properties=[]\" +","                    \"]\""]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","1.5f","2.0f","2.25f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The String representation of a style config will tell you everything about it! [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing { it.uiScaleFactor(uiScale) }","var scale = { it * uiScale }","var scaledToString = { String.valueOf(scale(it)).replace(\".0\", \"\") }","var roundScaledToString = { String.valueOf(Math.round(scale(it))).replace(\".0\", \"\") }"]},

        {"kind":"and","text":"\n            We create a simple Swing component, a JSpinner, and\n            send it through the SwingTree builder API where\n            we apply a style to it by updating its style configuration.\n        ","code":["var style =","                ComponentExtension.from(","                    UI.of(new JSpinner()).withStyle(conf->conf","                        .foundationColor(\"red\")","                        .backgroundColor(\"green\")","                        .borderColor(\"blue\")","                        .borderWidths(1, 2, 3, 4)","                        .borderRadius(12, 18)","                        .shadowColor(\"yellow\")","                        .fontSelectionColor(\"cyan\")","                        .fontColor(\"magenta\")","                        .fontFamily(\"Times New Roman\")","                        .fontSize(12)","                        .fontBold(true)","                        .fontUnderline(true)","                        .fontStrikeThrough(true)","                    )","                    .get(JSpinner)","                )","                .getStyle()"]},

        {"kind":"expect","text":"","code":["style.toString() == \"StyleConf[\" +","                        \"LayoutConf[NONE], \" +","                        \"BorderConf[\" +","                            \"arcWidth=\" + scaledToString(12) + \", \" +","                            \"arcHeight=\" + scaledToString(18) + \", \" +","                            \"topWidth=\" + scaledToString(1) + \", \" +","                            \"rightWidth=\" + scaledToString(2) + \", \" +","                            \"bottomWidth=\" + scaledToString(3) + \", \" +","                            \"leftWidth=\" + scaledToString(4) + \", \" +","                            \"margin=Outline[\" +","                                \"top=${(scale(1) % 1 == 0 ? \"?\" : 1 - scale(1) % 1 )}, \" +","                                \"right=${(scale(2) % 1 == 0 ? \"?\" : 1 - scale(2) % 1 )}, \" +","                                \"bottom=${(scale(3) % 1 == 0 ? \"?\" : 1 - scale(3) % 1 )}, \" +","                                \"left=${(scale(4) % 1 == 0 ? \"?\" : 1 - scale(4) % 1 )}\" +","                            \"], \" +","                            \"padding=Outline[top=?, right=?, bottom=?, left=?], \" +","                            \"color=rgba(0,0,255,255)\" +","                        \"], \" +","                        \"BaseConf[\" +","                            \"icon=?, \" +","                            \"fitComponent=NO, \" +","                            \"backgroundColor=rgba(0,128,0,255), \" +","                            \"foundationColor=rgba(255,0,0,255), \" +","                            \"foregroundColor=?, \" +","                            \"cursor=?, \" +","                            \"orientation=UNKNOWN\" +","                        \"], \" +","                        \"FontConf[\" +","                            \"family=Times New Roman, \" +","                            \"size=\" + Math.round(12*uiScale) + \", \" +","                            \"posture=0.0, \" +","                            \"weight=2.0, \" +","                            \"spacing=0.0, \" +","                            \"underlined=true, \" +","                            \"strikeThrough=true, \" +","                            \"selectionColor=rgba(0,255,255,255), \" +","                            \"transform=?, \" +","                            \"paint=FontPaintConf[rgba(255,0,255,255)], \" +","                            \"backgroundPaint=FontPaintConf[NONE], \" +","                            \"horizontalAlignment=?, \" +","                            \"verticalAlignment=?\" +","                        \"], \" +","                        \"DimensionalityConf[NONE], \" +","                        \"StyleConfLayers[\" +","                            \"filter=FilterConf[NONE], \" +","                            \"background=StyleConfLayer[EMPTY], \" +","                            \"content=StyleConfLayer[\" +","                                \"shadows=ShadowConf[\" +","                                    \"horizontalOffset=0, \" +","                                    \"verticalOffset=0, \" +","                                    \"blurRadius=0, \" +","                                    \"spreadRadius=0, \" +","                                    \"color=rgba(255,255,0,255), \" +","                                    \"isInset=false\" +","                                \"], \" +","                                \"painters=PainterConf[NONE], \" +","                                \"gradients=GradientConf[NONE], \" +","                                \"noises=NoiseConf[NONE], \" +","                                \"images=ImageConf[NONE], \" +","                                \"texts=TextConf[NONE]\" +","                            \"], \" +","                            \"border=StyleConfLayer[EMPTY], \" +","                            \"foreground=StyleConfLayer[EMPTY]\" +","                        \"], \" +","                        \"properties=[]\" +","                    \"]\""]},

        {"kind":"when","text":"We create another style with some other properties:","code":["var paint1 = new GradientPaint(0, 0, Color.RED, 100, 100, Color.BLUE)","var paint2 = new GradientPaint(0, 0, Color.BLACK, 100, 100, Color.GREEN)","var transform = AffineTransform.getRotateInstance(0.5)","style = ComponentExtension.from(","                    UI.of(new JSpinner()).withStyle(conf->conf","                        .fontAlignment(UI.Alignment.CENTER)","                        .fontBackgroundColor(\"cyan\")","                        .fontBackgroundColor(new Color(0, 42, 42, 42))","                        .fontBackgroundPaint(paint1)","                        .fontPaint(paint2)","                        .fontTransform(transform)","                        .image(UI.Layer.FOREGROUND, \"bubbles\", imgConf -> imgConf","                            .fitMode(UI.FitComponent.WIDTH)","                            .repeat(true)","                            .image(\"/img/bubble-tree.svg\")","                        )","                    )","                    .get(JSpinner)","                )","                .getStyle()"]},

        {"kind":"then","text":"The style config has the expected string representation.","code":["style.toString() == \"StyleConf[\" +","                        \"LayoutConf[NONE], \" +","                        \"BorderConf[NONE], \" +","                        \"BaseConf[NONE], \" +","                        \"FontConf[\" +","                            \"family=, \" +","                            \"size=0, \" +","                            \"posture=0.0, \" +","                            \"weight=0.0, \" +","                            \"spacing=0.0, \" +","                            \"underlined=?, \" +","                            \"strikeThrough=?, \" +","                            \"selectionColor=?, \" +","                            \"transform=$transform, \" +","                            \"paint=FontPaintConf[$paint2], \" +","                            \"backgroundPaint=FontPaintConf[$paint1], \" +","                            \"horizontalAlignment=CENTER, \" +","                            \"verticalAlignment=CENTER\" +","                        \"], \" +","                        \"DimensionalityConf[NONE], \" +","                        \"StyleConfLayers[\" +","                            \"filter=FilterConf[NONE], \" +","                            \"background=StyleConfLayer[EMPTY], \" +","                            \"content=StyleConfLayer[EMPTY], \" +","                            \"border=StyleConfLayer[EMPTY], \" +","                            \"foreground=StyleConfLayer[\" +","                                \"shadows=ShadowConf[NONE], \" +","                                \"painters=PainterConf[NONE], \" +","                                \"gradients=GradientConf[NONE], \" +","                                \"noises=NoiseConf[NONE], \" +","                                \"images=NamedConfigs[\" +","                                    \"default=ImageConf[NONE], \" +","                                    \"bubbles=ImageConf[\" +","                                        \"primer=?, \" +","                                        \"image=${style.images(UI.Layer.FOREGROUND).get(0).image().get()}, \" +","                                        \"placement=UNDEFINED, \" +","                                        \"repeat=true, \" +","                                        \"fitComponent=WIDTH, \" +","                                        \"width=?, height=?, \" +","                                        \"opacity=1.0, \" +","                                        \"padding=Outline[top=?, right=?, bottom=?, left=?], \" +","                                        \"offset=Offset[x=0, y=0], \" +","                                        \"clipArea=BODY\" +","                                    \"]\" +","                                \"], \" +","                                \"texts=TextConf[NONE]\" +","                            \"]\" +","                        \"], \" +","                        \"properties=[]\" +","                    \"]\""]},

        {"kind":"when","text":"We create another style with some other properties:","code":["style = ComponentExtension.from(","                    UI.of(new JPanel()).withStyle(conf->conf","                        .layout(Layout.border(2, 4))","                        .size(100, 200)","                        .minSize(50, 100)","                        .maxHeight(300)","                        .prefWidth(400)","                        .gradient(UI.Layer.BORDER, \"gradient\", imgConf -> imgConf","                            .colors(Color.RED, Color.GREEN, Color.BLUE)","                            .span(UI.Span.BOTTOM_TO_TOP)","                            .type(UI.GradientType.RADIAL)","                        )","                    )","                    .get(JPanel)","                )","                .getStyle()"]},

        {"kind":"then","text":"","code":["style.toString() == \"StyleConf[\" +","                        \"LayoutConf[\" +","                            \"layout=BorderLayoutInstaller[hgap=2, vgap=4], \" +","                            \"constraint=?, \" +","                            \"alignmentX=?, \" +","                            \"alignmentY=?\" +","                        \"], \" +","                        \"BorderConf[NONE], \" +","                        \"BaseConf[NONE], \" +","                        \"FontConf[NONE], \" +","                        \"DimensionalityConf[\" +","                            \"minWidth=\" + roundScaledToString(50) + \", \" +","                            \"minHeight=\" + roundScaledToString(100) + \", \" +","                            \"maxWidth=\" + roundScaledToString(300) + \", \" +","                            \"maxHeight=?, \" +","                            \"preferredWidth=\" + roundScaledToString(400) + \", \" +","                            \"preferredHeight=?, \" +","                            \"width=\" + roundScaledToString(100) + \", \" +","                            \"height=\" + roundScaledToString(200) +","                        \"], \" +","                        \"StyleConfLayers[\" +","                            \"filter=FilterConf[NONE], \" +","                            \"background=StyleConfLayer[EMPTY], \" +","                            \"content=StyleConfLayer[EMPTY], \" +","                            \"border=StyleConfLayer[\" +","                                \"shadows=ShadowConf[NONE], \" +","                                \"painters=PainterConf[NONE], \" +","                                \"gradients=NamedConfigs[\" +","                                    \"default=GradientConf[NONE], \" +","                                    \"gradient=GradientConf[\" +","                                        \"transition=BOTTOM_TO_TOP, \" +","                                        \"type=RADIAL, \" +","                                        \"colors=[java.awt.Color[r=255,g=0,b=0], \" +","                                        \"java.awt.Color[r=0,g=255,b=0], \" +","                                        \"java.awt.Color[r=0,g=0,b=255]], \" +","                                        \"offset=Offset[x=0, y=0], \" +","                                        \"size=-1.0, \" +","                                        \"area=BODY, \" +","                                        \"boundary=EXTERIOR_TO_BORDER, \" +","                                        \"focus=Offset[x=0, y=0], \" +","                                        \"rotation=0.0, \" +","                                        \"fractions=[], \" +","                                        \"cycle=NONE\" +","                                    \"]\" +","                                \"], \" +","                                \"noises=NoiseConf[NONE], \" +","                                \"images=ImageConf[NONE], \" +","                                \"texts=TextConf[NONE]\" +","                            \"], \" +","                            \"foreground=StyleConfLayer[EMPTY]\" +","                        \"], \" +","                        \"properties=[]\" +","                    \"]\""]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","1.5f","2.0f","2.25f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The String representation of a style config will tell you everything about it! [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing { it.uiScaleFactor(uiScale) }","var scale = { it * uiScale }","var scaledToString = { String.valueOf(scale(it)).replace(\".0\", \"\") }","var roundScaledToString = { String.valueOf(Math.round(scale(it))).replace(\".0\", \"\") }"]},

        {"kind":"and","text":"\n            We create a simple Swing component, a JSpinner, and\n            send it through the SwingTree builder API where\n            we apply a style to it by updating its style configuration.\n        ","code":["var style =","                ComponentExtension.from(","                    UI.of(new JSpinner()).withStyle(conf->conf","                        .foundationColor(\"red\")","                        .backgroundColor(\"green\")","                        .borderColor(\"blue\")","                        .borderWidths(1, 2, 3, 4)","                        .borderRadius(12, 18)","                        .shadowColor(\"yellow\")","                        .fontSelectionColor(\"cyan\")","                        .fontColor(\"magenta\")","                        .fontFamily(\"Times New Roman\")","                        .fontSize(12)","                        .fontBold(true)","                        .fontUnderline(true)","                        .fontStrikeThrough(true)","                    )","                    .get(JSpinner)","                )","                .getStyle()"]},

        {"kind":"expect","text":"","code":["style.toString() == \"StyleConf[\" +","                        \"LayoutConf[NONE], \" +","                        \"BorderConf[\" +","                            \"arcWidth=\" + scaledToString(12) + \", \" +","                            \"arcHeight=\" + scaledToString(18) + \", \" +","                            \"topWidth=\" + scaledToString(1) + \", \" +","                            \"rightWidth=\" + scaledToString(2) + \", \" +","                            \"bottomWidth=\" + scaledToString(3) + \", \" +","                            \"leftWidth=\" + scaledToString(4) + \", \" +","                            \"margin=Outline[\" +","                                \"top=${(scale(1) % 1 == 0 ? \"?\" : 1 - scale(1) % 1 )}, \" +","                                \"right=${(scale(2) % 1 == 0 ? \"?\" : 1 - scale(2) % 1 )}, \" +","                                \"bottom=${(scale(3) % 1 == 0 ? \"?\" : 1 - scale(3) % 1 )}, \" +","                                \"left=${(scale(4) % 1 == 0 ? \"?\" : 1 - scale(4) % 1 )}\" +","                            \"], \" +","                            \"padding=Outline[top=?, right=?, bottom=?, left=?], \" +","                            \"color=rgba(0,0,255,255)\" +","                        \"], \" +","                        \"BaseConf[\" +","                            \"icon=?, \" +","                            \"fitComponent=NO, \" +","                            \"backgroundColor=rgba(0,128,0,255), \" +","                            \"foundationColor=rgba(255,0,0,255), \" +","                            \"foregroundColor=?, \" +","                            \"cursor=?, \" +","                            \"orientation=UNKNOWN\" +","                        \"], \" +","                        \"FontConf[\" +","                            \"family=Times New Roman, \" +","                            \"size=\" + Math.round(12*uiScale) + \", \" +","                            \"posture=0.0, \" +","                            \"weight=2.0, \" +","                            \"spacing=0.0, \" +","                            \"underlined=true, \" +","                            \"strikeThrough=true, \" +","                            \"selectionColor=rgba(0,255,255,255), \" +","                            \"transform=?, \" +","                            \"paint=FontPaintConf[rgba(255,0,255,255)], \" +","                            \"backgroundPaint=FontPaintConf[NONE], \" +","                            \"horizontalAlignment=?, \" +","                            \"verticalAlignment=?\" +","                        \"], \" +","                        \"DimensionalityConf[NONE], \" +","                        \"StyleConfLayers[\" +","                            \"filter=FilterConf[NONE], \" +","                            \"background=StyleConfLayer[EMPTY], \" +","                            \"content=StyleConfLayer[\" +","                                \"shadows=ShadowConf[\" +","                                    \"horizontalOffset=0, \" +","                                    \"verticalOffset=0, \" +","                                    \"blurRadius=0, \" +","                                    \"spreadRadius=0, \" +","                                    \"color=rgba(255,255,0,255), \" +","                                    \"isInset=false\" +","                                \"], \" +","                                \"painters=PainterConf[NONE], \" +","                                \"gradients=GradientConf[NONE], \" +","                                \"noises=NoiseConf[NONE], \" +","                                \"images=ImageConf[NONE], \" +","                                \"texts=TextConf[NONE]\" +","                            \"], \" +","                            \"border=StyleConfLayer[EMPTY], \" +","                            \"foreground=StyleConfLayer[EMPTY]\" +","                        \"], \" +","                        \"properties=[]\" +","                    \"]\""]},

        {"kind":"when","text":"We create another style with some other properties:","code":["var paint1 = new GradientPaint(0, 0, Color.RED, 100, 100, Color.BLUE)","var paint2 = new GradientPaint(0, 0, Color.BLACK, 100, 100, Color.GREEN)","var transform = AffineTransform.getRotateInstance(0.5)","style = ComponentExtension.from(","                    UI.of(new JSpinner()).withStyle(conf->conf","                        .fontAlignment(UI.Alignment.CENTER)","                        .fontBackgroundColor(\"cyan\")","                        .fontBackgroundColor(new Color(0, 42, 42, 42))","                        .fontBackgroundPaint(paint1)","                        .fontPaint(paint2)","                        .fontTransform(transform)","                        .image(UI.Layer.FOREGROUND, \"bubbles\", imgConf -> imgConf","                            .fitMode(UI.FitComponent.WIDTH)","                            .repeat(true)","                            .image(\"/img/bubble-tree.svg\")","                        )","                    )","                    .get(JSpinner)","                )","                .getStyle()"]},

        {"kind":"then","text":"The style config has the expected string representation.","code":["style.toString() == \"StyleConf[\" +","                        \"LayoutConf[NONE], \" +","                        \"BorderConf[NONE], \" +","                        \"BaseConf[NONE], \" +","                        \"FontConf[\" +","                            \"family=, \" +","                            \"size=0, \" +","                            \"posture=0.0, \" +","                            \"weight=0.0, \" +","                            \"spacing=0.0, \" +","                            \"underlined=?, \" +","                            \"strikeThrough=?, \" +","                            \"selectionColor=?, \" +","                            \"transform=$transform, \" +","                            \"paint=FontPaintConf[$paint2], \" +","                            \"backgroundPaint=FontPaintConf[$paint1], \" +","                            \"horizontalAlignment=CENTER, \" +","                            \"verticalAlignment=CENTER\" +","                        \"], \" +","                        \"DimensionalityConf[NONE], \" +","                        \"StyleConfLayers[\" +","                            \"filter=FilterConf[NONE], \" +","                            \"background=StyleConfLayer[EMPTY], \" +","                            \"content=StyleConfLayer[EMPTY], \" +","                            \"border=StyleConfLayer[EMPTY], \" +","                            \"foreground=StyleConfLayer[\" +","                                \"shadows=ShadowConf[NONE], \" +","                                \"painters=PainterConf[NONE], \" +","                                \"gradients=GradientConf[NONE], \" +","                                \"noises=NoiseConf[NONE], \" +","                                \"images=NamedConfigs[\" +","                                    \"default=ImageConf[NONE], \" +","                                    \"bubbles=ImageConf[\" +","                                        \"primer=?, \" +","                                        \"image=${style.images(UI.Layer.FOREGROUND).get(0).image().get()}, \" +","                                        \"placement=UNDEFINED, \" +","                                        \"repeat=true, \" +","                                        \"fitComponent=WIDTH, \" +","                                        \"width=?, height=?, \" +","                                        \"opacity=1.0, \" +","                                        \"padding=Outline[top=?, right=?, bottom=?, left=?], \" +","                                        \"offset=Offset[x=0, y=0], \" +","                                        \"clipArea=BODY\" +","                                    \"]\" +","                                \"], \" +","                                \"texts=TextConf[NONE]\" +","                            \"]\" +","                        \"], \" +","                        \"properties=[]\" +","                    \"]\""]},

        {"kind":"when","text":"We create another style with some other properties:","code":["style = ComponentExtension.from(","                    UI.of(new JPanel()).withStyle(conf->conf","                        .layout(Layout.border(2, 4))","                        .size(100, 200)","                        .minSize(50, 100)","                        .maxHeight(300)","                        .prefWidth(400)","                        .gradient(UI.Layer.BORDER, \"gradient\", imgConf -> imgConf","                            .colors(Color.RED, Color.GREEN, Color.BLUE)","                            .span(UI.Span.BOTTOM_TO_TOP)","                            .type(UI.GradientType.RADIAL)","                        )","                    )","                    .get(JPanel)","                )","                .getStyle()"]},

        {"kind":"then","text":"","code":["style.toString() == \"StyleConf[\" +","                        \"LayoutConf[\" +","                            \"layout=BorderLayoutInstaller[hgap=2, vgap=4], \" +","                            \"constraint=?, \" +","                            \"alignmentX=?, \" +","                            \"alignmentY=?\" +","                        \"], \" +","                        \"BorderConf[NONE], \" +","                        \"BaseConf[NONE], \" +","                        \"FontConf[NONE], \" +","                        \"DimensionalityConf[\" +","                            \"minWidth=\" + roundScaledToString(50) + \", \" +","                            \"minHeight=\" + roundScaledToString(100) + \", \" +","                            \"maxWidth=\" + roundScaledToString(300) + \", \" +","                            \"maxHeight=?, \" +","                            \"preferredWidth=\" + roundScaledToString(400) + \", \" +","                            \"preferredHeight=?, \" +","                            \"width=\" + roundScaledToString(100) + \", \" +","                            \"height=\" + roundScaledToString(200) +","                        \"], \" +","                        \"StyleConfLayers[\" +","                            \"filter=FilterConf[NONE], \" +","                            \"background=StyleConfLayer[EMPTY], \" +","                            \"content=StyleConfLayer[EMPTY], \" +","                            \"border=StyleConfLayer[\" +","                                \"shadows=ShadowConf[NONE], \" +","                                \"painters=PainterConf[NONE], \" +","                                \"gradients=NamedConfigs[\" +","                                    \"default=GradientConf[NONE], \" +","                                    \"gradient=GradientConf[\" +","                                        \"transition=BOTTOM_TO_TOP, \" +","                                        \"type=RADIAL, \" +","                                        \"colors=[java.awt.Color[r=255,g=0,b=0], \" +","                                        \"java.awt.Color[r=0,g=255,b=0], \" +","                                        \"java.awt.Color[r=0,g=0,b=255]], \" +","                                        \"offset=Offset[x=0, y=0], \" +","                                        \"size=-1.0, \" +","                                        \"area=BODY, \" +","                                        \"boundary=EXTERIOR_TO_BORDER, \" +","                                        \"focus=Offset[x=0, y=0], \" +","                                        \"rotation=0.0, \" +","                                        \"fractions=[], \" +","                                        \"cycle=NONE\" +","                                    \"]\" +","                                \"], \" +","                                \"noises=NoiseConf[NONE], \" +","                                \"images=ImageConf[NONE], \" +","                                \"texts=TextConf[NONE]\" +","                            \"], \" +","                            \"foreground=StyleConfLayer[EMPTY]\" +","                        \"], \" +","                        \"properties=[]\" +","                    \"]\""]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","1.5f","2.0f","2.25f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Style objects are value based (with respect to equality and hash code).",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Style objects are value based, meaning that if two style objects\n            have the same properties, then they are considered equal.\n            So their identity is considered to be their value.\n            This is important for caching purposes, as the style objects are\n            used as cache keys.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            First we need the component-style delegate styler, \n            which can update the style properties of the style configuration.\n        ","code":["var styler = s -> new ComponentStyleDelegate<>(new JPanel(), s)"]},

        {"kind":"and","text":"Then we create a starting style with various properties:","code":["var style1 =","                ComponentExtension.from(","                    UI.box().withStyle(conf->conf","                        .foundationColor(\"red\")","                        .backgroundColor(\"green\")","                        .borderColor(\"blue\")","                        .borderRadius(12, 18)","                        .shadowColor(\"yellow\")","                        .fontSelectionColor(\"cyan\")","                        .fontColor(\"magenta\")","                        .fontFamily(\"Times New Roman\")","                        .fontSize(12)","                        .fontBold(true)","                        .fontUnderline(true)","                        .fontStrikeThrough(true)","                        .shadowSpreadRadius(12)","                        .shadowBlurRadius(42)","                    )","                    .get(JBox)","                )","                .getStyle()"]},

        {"kind":"and","text":"We then create a second style with the same properties:","code":["var style2 =","                ComponentExtension.from(","                    UI.box().withStyle(conf->conf","                        .foundationColor(\"red\")","                        .backgroundColor(\"green\")","                        .borderColor(\"blue\")","                        .borderRadius(12, 18)","                        .shadowColor(\"yellow\")","                        .fontSelectionColor(\"cyan\")","                        .fontColor(\"magenta\")","                        .fontFamily(\"Times New Roman\")","                        .fontSize(12)","                        .fontBold(true)","                        .fontUnderline(true)","                        .fontStrikeThrough(true)","                        .shadowSpreadRadius(12)","                        .shadowBlurRadius(42)","                    )","                    .get(JBox)","                )","                .getStyle()"]},

        {"kind":"expect","text":"","code":["style1 == style2","style1.hashCode() == style2.hashCode()"]},

        {"kind":"and","text":"Changing a property and then comparing the styles should return false:","code":["style1 != styler(style2).fontBold(false).style()","style1.hashCode() != styler(style2).fontBold(false).style().hashCode()","style1 != styler(style2).shadowSpreadRadius(1).style()","style1.hashCode() != styler(style2).shadowSpreadRadius(1).style().hashCode()","style1 != styler(style2).shadowBlurRadius(1).style()","style1.hashCode() != styler(style2).shadowBlurRadius(1).style().hashCode()"]},

        {"kind":"and","text":"If we transform them both the same way then they will be equal:","code":["styler(style2).fontBold(false).style()                   == styler(style2).fontBold(false).style()","styler(style2).fontBold(false).style().hashCode()        == styler(style2).fontBold(false).style().hashCode()","styler(style2).shadowSpreadRadius(1).style()            == styler(style2).shadowSpreadRadius(1).style()","styler(style2).shadowSpreadRadius(1).style().hashCode() == styler(style2).shadowSpreadRadius(1).style().hashCode()","styler(style2).shadowBlurRadius(1).style()              == styler(style2).shadowBlurRadius(1).style()","styler(style2).shadowBlurRadius(1).style().hashCode()   == styler(style2).shadowBlurRadius(1).style().hashCode()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"SwingTree will simplify the style configuration of a component if possible. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Simplifying a style configuration means that if the properties of a style\n            a configured in such a way that they are effectively the same as the default\n            in terms of how they will be rendered, then the style configuration will be\n            simplified to the default style.\n\n            This optimization is important to improve cache hit rates, as the immutable\n            style configuration objects are used as cache keys.\n            Simplifying the style configurations will ensure that style configurations\n            which effectively render the same thing will also share the same cache buffer\n            for rendering.\n\n            It is also memory efficient, as the default style objects are global null objects.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing { it.uiScaleFactor(uiScale) }","var scale = { it * uiScale }","var scaledToString = { String.valueOf(scale(it)).replace(\".0\", \"\") }","var roundScaledToString = { String.valueOf(Math.round(scale(it))).replace(\".0\", \"\") }"]},

        {"kind":"and","text":"We create a highly simplifiable style through the style API.","code":["var button =","            UI.panel().withStyle(conf -> conf","                .borderColor(new Color(0,0,0,0))","                .borderRadius(0)","                .borderWidths(0,0,0,0)","                .shadowColor(new Color(50,150,200,0))","                .shadowBlurRadius(4)","                .shadowSpreadRadius(2)","                .image(UI.Layer.CONTENT, i -> i","                    .primer(new Color(100,100,100,0))","                    .size(100, 100)","                    .fitMode(UI.FitComponent.WIDTH)","                    .image(\"/images/bubbles.svg\")","                    .opacity(0.0f) // You can't see me!","                )","                .gradient(UI.Layer.BACKGROUND, g -> g","                    .colors(new Color(100, 50, 200, 0), new Color(255, 00, 250, 0))","                    .span(UI.Span.TOP_TO_BOTTOM)","                    .type(UI.GradientType.LINEAR)","                )","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"The style config has the expected string representation.","code":["ComponentExtension.from(button).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[NONE], \" +","        \"BaseConf[NONE], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"when","text":"We create a not so simplifiable style for a component through the style API...","code":["button = UI.button(\"Hello World\").withStyle(conf -> conf","             .backgroundColor(Color.BLACK)","             .foregroundColor(Color.WHITE)","             .size(120, 80)","             .borderRadius(40)","         )","         .get(JButton)"]},

        {"kind":"then","text":"The style config has the expected string representation.","code":["ComponentExtension.from(button).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[\" +","            \"radius=\" + scaledToString(40) + \", \" +","            \"width=?, \" +","            \"margin=Outline[top=?, right=?, bottom=?, left=?], \" +","            \"padding=Outline[top=?, right=?, bottom=?, left=?], \" +","            \"color=?\" +","        \"], \" +","        \"BaseConf[\" +","            \"icon=?, \" +","            \"fitComponent=NO, \" +","            \"backgroundColor=rgba(0,0,0,255), \" +","            \"foundationColor=?, \" +","            \"foregroundColor=rgba(255,255,255,255), \" +","            \"cursor=?, \" +","            \"orientation=UNKNOWN\" +","        \"], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[\" +","            \"minWidth=?, \" +","            \"minHeight=?, \" +","            \"maxWidth=?, \" +","            \"maxHeight=?, \" +","            \"preferredWidth=?, \" +","            \"preferredHeight=?, \" +","            \"width=\" + roundScaledToString(120) + \", \" +","            \"height=\" + roundScaledToString(80) +","        \"], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","1.5f","2.0f","2.25f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"SwingTree will simplify the style configuration of a component if possible. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Simplifying a style configuration means that if the properties of a style\n            a configured in such a way that they are effectively the same as the default\n            in terms of how they will be rendered, then the style configuration will be\n            simplified to the default style.\n\n            This optimization is important to improve cache hit rates, as the immutable\n            style configuration objects are used as cache keys.\n            Simplifying the style configurations will ensure that style configurations\n            which effectively render the same thing will also share the same cache buffer\n            for rendering.\n\n            It is also memory efficient, as the default style objects are global null objects.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing { it.uiScaleFactor(uiScale) }","var scale = { it * uiScale }","var scaledToString = { String.valueOf(scale(it)).replace(\".0\", \"\") }","var roundScaledToString = { String.valueOf(Math.round(scale(it))).replace(\".0\", \"\") }"]},

        {"kind":"and","text":"We create a highly simplifiable style through the style API.","code":["var button =","            UI.panel().withStyle(conf -> conf","                .borderColor(new Color(0,0,0,0))","                .borderRadius(0)","                .borderWidths(0,0,0,0)","                .shadowColor(new Color(50,150,200,0))","                .shadowBlurRadius(4)","                .shadowSpreadRadius(2)","                .image(UI.Layer.CONTENT, i -> i","                    .primer(new Color(100,100,100,0))","                    .size(100, 100)","                    .fitMode(UI.FitComponent.WIDTH)","                    .image(\"/images/bubbles.svg\")","                    .opacity(0.0f) // You can't see me!","                )","                .gradient(UI.Layer.BACKGROUND, g -> g","                    .colors(new Color(100, 50, 200, 0), new Color(255, 00, 250, 0))","                    .span(UI.Span.TOP_TO_BOTTOM)","                    .type(UI.GradientType.LINEAR)","                )","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"The style config has the expected string representation.","code":["ComponentExtension.from(button).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[NONE], \" +","        \"BaseConf[NONE], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"when","text":"We create a not so simplifiable style for a component through the style API...","code":["button = UI.button(\"Hello World\").withStyle(conf -> conf","             .backgroundColor(Color.BLACK)","             .foregroundColor(Color.WHITE)","             .size(120, 80)","             .borderRadius(40)","         )","         .get(JButton)"]},

        {"kind":"then","text":"The style config has the expected string representation.","code":["ComponentExtension.from(button).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[\" +","            \"radius=\" + scaledToString(40) + \", \" +","            \"width=?, \" +","            \"margin=Outline[top=?, right=?, bottom=?, left=?], \" +","            \"padding=Outline[top=?, right=?, bottom=?, left=?], \" +","            \"color=?\" +","        \"], \" +","        \"BaseConf[\" +","            \"icon=?, \" +","            \"fitComponent=NO, \" +","            \"backgroundColor=rgba(0,0,0,255), \" +","            \"foundationColor=?, \" +","            \"foregroundColor=rgba(255,255,255,255), \" +","            \"cursor=?, \" +","            \"orientation=UNKNOWN\" +","        \"], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[\" +","            \"minWidth=?, \" +","            \"minHeight=?, \" +","            \"maxWidth=?, \" +","            \"maxHeight=?, \" +","            \"preferredWidth=?, \" +","            \"preferredHeight=?, \" +","            \"width=\" + roundScaledToString(120) + \", \" +","            \"height=\" + roundScaledToString(80) +","        \"], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","1.5f","2.0f","2.25f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"SwingTree will simplify the style configuration of a component if possible. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Simplifying a style configuration means that if the properties of a style\n            a configured in such a way that they are effectively the same as the default\n            in terms of how they will be rendered, then the style configuration will be\n            simplified to the default style.\n\n            This optimization is important to improve cache hit rates, as the immutable\n            style configuration objects are used as cache keys.\n            Simplifying the style configurations will ensure that style configurations\n            which effectively render the same thing will also share the same cache buffer\n            for rendering.\n\n            It is also memory efficient, as the default style objects are global null objects.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing { it.uiScaleFactor(uiScale) }","var scale = { it * uiScale }","var scaledToString = { String.valueOf(scale(it)).replace(\".0\", \"\") }","var roundScaledToString = { String.valueOf(Math.round(scale(it))).replace(\".0\", \"\") }"]},

        {"kind":"and","text":"We create a highly simplifiable style through the style API.","code":["var button =","            UI.panel().withStyle(conf -> conf","                .borderColor(new Color(0,0,0,0))","                .borderRadius(0)","                .borderWidths(0,0,0,0)","                .shadowColor(new Color(50,150,200,0))","                .shadowBlurRadius(4)","                .shadowSpreadRadius(2)","                .image(UI.Layer.CONTENT, i -> i","                    .primer(new Color(100,100,100,0))","                    .size(100, 100)","                    .fitMode(UI.FitComponent.WIDTH)","                    .image(\"/images/bubbles.svg\")","                    .opacity(0.0f) // You can't see me!","                )","                .gradient(UI.Layer.BACKGROUND, g -> g","                    .colors(new Color(100, 50, 200, 0), new Color(255, 00, 250, 0))","                    .span(UI.Span.TOP_TO_BOTTOM)","                    .type(UI.GradientType.LINEAR)","                )","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"The style config has the expected string representation.","code":["ComponentExtension.from(button).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[NONE], \" +","        \"BaseConf[NONE], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"when","text":"We create a not so simplifiable style for a component through the style API...","code":["button = UI.button(\"Hello World\").withStyle(conf -> conf","             .backgroundColor(Color.BLACK)","             .foregroundColor(Color.WHITE)","             .size(120, 80)","             .borderRadius(40)","         )","         .get(JButton)"]},

        {"kind":"then","text":"The style config has the expected string representation.","code":["ComponentExtension.from(button).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[\" +","            \"radius=\" + scaledToString(40) + \", \" +","            \"width=?, \" +","            \"margin=Outline[top=?, right=?, bottom=?, left=?], \" +","            \"padding=Outline[top=?, right=?, bottom=?, left=?], \" +","            \"color=?\" +","        \"], \" +","        \"BaseConf[\" +","            \"icon=?, \" +","            \"fitComponent=NO, \" +","            \"backgroundColor=rgba(0,0,0,255), \" +","            \"foundationColor=?, \" +","            \"foregroundColor=rgba(255,255,255,255), \" +","            \"cursor=?, \" +","            \"orientation=UNKNOWN\" +","        \"], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[\" +","            \"minWidth=?, \" +","            \"minHeight=?, \" +","            \"maxWidth=?, \" +","            \"maxHeight=?, \" +","            \"preferredWidth=?, \" +","            \"preferredHeight=?, \" +","            \"width=\" + roundScaledToString(120) + \", \" +","            \"height=\" + roundScaledToString(80) +","        \"], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","1.5f","2.0f","2.25f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"SwingTree will simplify the style configuration of a component if possible. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Simplifying a style configuration means that if the properties of a style\n            a configured in such a way that they are effectively the same as the default\n            in terms of how they will be rendered, then the style configuration will be\n            simplified to the default style.\n\n            This optimization is important to improve cache hit rates, as the immutable\n            style configuration objects are used as cache keys.\n            Simplifying the style configurations will ensure that style configurations\n            which effectively render the same thing will also share the same cache buffer\n            for rendering.\n\n            It is also memory efficient, as the default style objects are global null objects.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing { it.uiScaleFactor(uiScale) }","var scale = { it * uiScale }","var scaledToString = { String.valueOf(scale(it)).replace(\".0\", \"\") }","var roundScaledToString = { String.valueOf(Math.round(scale(it))).replace(\".0\", \"\") }"]},

        {"kind":"and","text":"We create a highly simplifiable style through the style API.","code":["var button =","            UI.panel().withStyle(conf -> conf","                .borderColor(new Color(0,0,0,0))","                .borderRadius(0)","                .borderWidths(0,0,0,0)","                .shadowColor(new Color(50,150,200,0))","                .shadowBlurRadius(4)","                .shadowSpreadRadius(2)","                .image(UI.Layer.CONTENT, i -> i","                    .primer(new Color(100,100,100,0))","                    .size(100, 100)","                    .fitMode(UI.FitComponent.WIDTH)","                    .image(\"/images/bubbles.svg\")","                    .opacity(0.0f) // You can't see me!","                )","                .gradient(UI.Layer.BACKGROUND, g -> g","                    .colors(new Color(100, 50, 200, 0), new Color(255, 00, 250, 0))","                    .span(UI.Span.TOP_TO_BOTTOM)","                    .type(UI.GradientType.LINEAR)","                )","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"The style config has the expected string representation.","code":["ComponentExtension.from(button).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[NONE], \" +","        \"BaseConf[NONE], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"when","text":"We create a not so simplifiable style for a component through the style API...","code":["button = UI.button(\"Hello World\").withStyle(conf -> conf","             .backgroundColor(Color.BLACK)","             .foregroundColor(Color.WHITE)","             .size(120, 80)","             .borderRadius(40)","         )","         .get(JButton)"]},

        {"kind":"then","text":"The style config has the expected string representation.","code":["ComponentExtension.from(button).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[\" +","            \"radius=\" + scaledToString(40) + \", \" +","            \"width=?, \" +","            \"margin=Outline[top=?, right=?, bottom=?, left=?], \" +","            \"padding=Outline[top=?, right=?, bottom=?, left=?], \" +","            \"color=?\" +","        \"], \" +","        \"BaseConf[\" +","            \"icon=?, \" +","            \"fitComponent=NO, \" +","            \"backgroundColor=rgba(0,0,0,255), \" +","            \"foundationColor=?, \" +","            \"foregroundColor=rgba(255,255,255,255), \" +","            \"cursor=?, \" +","            \"orientation=UNKNOWN\" +","        \"], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[\" +","            \"minWidth=?, \" +","            \"minHeight=?, \" +","            \"maxWidth=?, \" +","            \"maxHeight=?, \" +","            \"preferredWidth=?, \" +","            \"preferredHeight=?, \" +","            \"width=\" + roundScaledToString(120) + \", \" +","            \"height=\" + roundScaledToString(80) +","        \"], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","1.5f","2.0f","2.25f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"SwingTree will simplify the style configuration of a component if possible. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Simplifying a style configuration means that if the properties of a style\n            a configured in such a way that they are effectively the same as the default\n            in terms of how they will be rendered, then the style configuration will be\n            simplified to the default style.\n\n            This optimization is important to improve cache hit rates, as the immutable\n            style configuration objects are used as cache keys.\n            Simplifying the style configurations will ensure that style configurations\n            which effectively render the same thing will also share the same cache buffer\n            for rendering.\n\n            It is also memory efficient, as the default style objects are global null objects.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing { it.uiScaleFactor(uiScale) }","var scale = { it * uiScale }","var scaledToString = { String.valueOf(scale(it)).replace(\".0\", \"\") }","var roundScaledToString = { String.valueOf(Math.round(scale(it))).replace(\".0\", \"\") }"]},

        {"kind":"and","text":"We create a highly simplifiable style through the style API.","code":["var button =","            UI.panel().withStyle(conf -> conf","                .borderColor(new Color(0,0,0,0))","                .borderRadius(0)","                .borderWidths(0,0,0,0)","                .shadowColor(new Color(50,150,200,0))","                .shadowBlurRadius(4)","                .shadowSpreadRadius(2)","                .image(UI.Layer.CONTENT, i -> i","                    .primer(new Color(100,100,100,0))","                    .size(100, 100)","                    .fitMode(UI.FitComponent.WIDTH)","                    .image(\"/images/bubbles.svg\")","                    .opacity(0.0f) // You can't see me!","                )","                .gradient(UI.Layer.BACKGROUND, g -> g","                    .colors(new Color(100, 50, 200, 0), new Color(255, 00, 250, 0))","                    .span(UI.Span.TOP_TO_BOTTOM)","                    .type(UI.GradientType.LINEAR)","                )","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"The style config has the expected string representation.","code":["ComponentExtension.from(button).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[NONE], \" +","        \"BaseConf[NONE], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"when","text":"We create a not so simplifiable style for a component through the style API...","code":["button = UI.button(\"Hello World\").withStyle(conf -> conf","             .backgroundColor(Color.BLACK)","             .foregroundColor(Color.WHITE)","             .size(120, 80)","             .borderRadius(40)","         )","         .get(JButton)"]},

        {"kind":"then","text":"The style config has the expected string representation.","code":["ComponentExtension.from(button).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[\" +","            \"radius=\" + scaledToString(40) + \", \" +","            \"width=?, \" +","            \"margin=Outline[top=?, right=?, bottom=?, left=?], \" +","            \"padding=Outline[top=?, right=?, bottom=?, left=?], \" +","            \"color=?\" +","        \"], \" +","        \"BaseConf[\" +","            \"icon=?, \" +","            \"fitComponent=NO, \" +","            \"backgroundColor=rgba(0,0,0,255), \" +","            \"foundationColor=?, \" +","            \"foregroundColor=rgba(255,255,255,255), \" +","            \"cursor=?, \" +","            \"orientation=UNKNOWN\" +","        \"], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[\" +","            \"minWidth=?, \" +","            \"minHeight=?, \" +","            \"maxWidth=?, \" +","            \"maxHeight=?, \" +","            \"preferredWidth=?, \" +","            \"preferredHeight=?, \" +","            \"width=\" + roundScaledToString(120) + \", \" +","            \"height=\" + roundScaledToString(80) +","        \"], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","1.5f","2.0f","2.25f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The border style will be simplified if margin and widths are all 0. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Simplifying a style configuration means that if the properties of a style\n            a configured in such a way that they are effectively the same as the default\n            in terms of how they will be rendered, then the style configuration will be\n            simplified to the default style.\n\n            This optimization is important to improve cache hit rates, as the immutable\n            style configuration objects are used as cache keys.\n            Simplifying the style configurations will ensure that style configurations\n            which effectively render the same thing will also share the same cache buffer\n            for rendering.\n\n            It is also memory efficient, as the default style objects are global null objects.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing { it.uiScaleFactor(uiScale) }"]},

        {"kind":"and","text":"We create a highly simplifiable style through the style API.","code":["var panel =","            UI.panel().withStyle(conf -> conf","                .borderColor(Color.GREEN)","                .borderWidths(0,0,0,0)","                .margin(0,0,0,0)","                .borderRadiusAt(UI.Corner.TOP_LEFT, 0, 20)","                .borderRadiusAt(UI.Corner.BOTTOM_LEFT, 10, 0)","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"\n            The style config has the expected string representation,\n            despite the fact that a visible border color was specified.\n            This is because the border width is 0, so the border is invisible\n            and the border color is irrelevant.\n        ","code":["ComponentExtension.from(panel).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[NONE], \" +","        \"BaseConf[NONE], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"when","text":"\n            We now define the exact same style, but with a visible border width\n            of 1 px at the right edge.\n        ","code":["panel = UI.panel().withStyle(conf -> conf","            .borderColor(Color.GREEN)","            .borderWidths(0,0,0,1)","            .padding(0,0,0,0)","            .borderRadiusAt(UI.Corner.TOP_LEFT, 0, 20)","            .borderRadiusAt(UI.Corner.BOTTOM_LEFT, 10, 0)","        )","        .get(JPanel)"]},

        {"kind":"then","text":"\n            The style config has the expected string representation,\n            despite the fact that a visible border color was specified.\n            This is because the border width is 0, so the border is invisible\n            and the border color is irrelevant.\n\n            Also note that if the uiScale is not whole, then the left border width\n            is also not whole which then leads to there being a margin on the left side.\n            This margin is a correction for the size of a component being integer based.\n            So in order to make the transition between styles look smooth, we need the margin\n            to buffer the fractional part of the border width.\n        ","code":["ComponentExtension.from(panel).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[\" +","            \"radius=?, \" +","            \"topWidth=?, \" +","            \"rightWidth=?, \" +","            \"bottomWidth=?, \" +","            \"leftWidth=\" + String.valueOf(uiScale).replace(\".0\", \"\") + \", \" +","            \"margin=Outline[top=?, right=?, bottom=?, left=${( uiScale % 1 == 0 ? \"?\" : 1 - uiScale % 1 )}], \" +","            \"padding=Outline[top=0, right=0, bottom=0, left=0], \" +","            \"color=rgba(0,255,0,255)\" +","        \"], \" +","        \"BaseConf[\" +","            (","                uiScale % 1 == 0 ?","                    \"NONE\" :","                    \"icon=?, \" +","                    \"fitComponent=NO, \" +","                    \"backgroundColor=rgba(238,238,238,255), \" +","                    \"foundationColor=?, \" +","                    \"foregroundColor=?, \" +","                    \"cursor=?, \" +","                    \"orientation=UNKNOWN\"","            ) +","        \"], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","1.5f","2.0f","2.25f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The border style will be simplified if margin and widths are all 0. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Simplifying a style configuration means that if the properties of a style\n            a configured in such a way that they are effectively the same as the default\n            in terms of how they will be rendered, then the style configuration will be\n            simplified to the default style.\n\n            This optimization is important to improve cache hit rates, as the immutable\n            style configuration objects are used as cache keys.\n            Simplifying the style configurations will ensure that style configurations\n            which effectively render the same thing will also share the same cache buffer\n            for rendering.\n\n            It is also memory efficient, as the default style objects are global null objects.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing { it.uiScaleFactor(uiScale) }"]},

        {"kind":"and","text":"We create a highly simplifiable style through the style API.","code":["var panel =","            UI.panel().withStyle(conf -> conf","                .borderColor(Color.GREEN)","                .borderWidths(0,0,0,0)","                .margin(0,0,0,0)","                .borderRadiusAt(UI.Corner.TOP_LEFT, 0, 20)","                .borderRadiusAt(UI.Corner.BOTTOM_LEFT, 10, 0)","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"\n            The style config has the expected string representation,\n            despite the fact that a visible border color was specified.\n            This is because the border width is 0, so the border is invisible\n            and the border color is irrelevant.\n        ","code":["ComponentExtension.from(panel).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[NONE], \" +","        \"BaseConf[NONE], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"when","text":"\n            We now define the exact same style, but with a visible border width\n            of 1 px at the right edge.\n        ","code":["panel = UI.panel().withStyle(conf -> conf","            .borderColor(Color.GREEN)","            .borderWidths(0,0,0,1)","            .padding(0,0,0,0)","            .borderRadiusAt(UI.Corner.TOP_LEFT, 0, 20)","            .borderRadiusAt(UI.Corner.BOTTOM_LEFT, 10, 0)","        )","        .get(JPanel)"]},

        {"kind":"then","text":"\n            The style config has the expected string representation,\n            despite the fact that a visible border color was specified.\n            This is because the border width is 0, so the border is invisible\n            and the border color is irrelevant.\n\n            Also note that if the uiScale is not whole, then the left border width\n            is also not whole which then leads to there being a margin on the left side.\n            This margin is a correction for the size of a component being integer based.\n            So in order to make the transition between styles look smooth, we need the margin\n            to buffer the fractional part of the border width.\n        ","code":["ComponentExtension.from(panel).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[\" +","            \"radius=?, \" +","            \"topWidth=?, \" +","            \"rightWidth=?, \" +","            \"bottomWidth=?, \" +","            \"leftWidth=\" + String.valueOf(uiScale).replace(\".0\", \"\") + \", \" +","            \"margin=Outline[top=?, right=?, bottom=?, left=${( uiScale % 1 == 0 ? \"?\" : 1 - uiScale % 1 )}], \" +","            \"padding=Outline[top=0, right=0, bottom=0, left=0], \" +","            \"color=rgba(0,255,0,255)\" +","        \"], \" +","        \"BaseConf[\" +","            (","                uiScale % 1 == 0 ?","                    \"NONE\" :","                    \"icon=?, \" +","                    \"fitComponent=NO, \" +","                    \"backgroundColor=rgba(238,238,238,255), \" +","                    \"foundationColor=?, \" +","                    \"foregroundColor=?, \" +","                    \"cursor=?, \" +","                    \"orientation=UNKNOWN\"","            ) +","        \"], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","1.5f","2.0f","2.25f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The border style will be simplified if margin and widths are all 0. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Simplifying a style configuration means that if the properties of a style\n            a configured in such a way that they are effectively the same as the default\n            in terms of how they will be rendered, then the style configuration will be\n            simplified to the default style.\n\n            This optimization is important to improve cache hit rates, as the immutable\n            style configuration objects are used as cache keys.\n            Simplifying the style configurations will ensure that style configurations\n            which effectively render the same thing will also share the same cache buffer\n            for rendering.\n\n            It is also memory efficient, as the default style objects are global null objects.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing { it.uiScaleFactor(uiScale) }"]},

        {"kind":"and","text":"We create a highly simplifiable style through the style API.","code":["var panel =","            UI.panel().withStyle(conf -> conf","                .borderColor(Color.GREEN)","                .borderWidths(0,0,0,0)","                .margin(0,0,0,0)","                .borderRadiusAt(UI.Corner.TOP_LEFT, 0, 20)","                .borderRadiusAt(UI.Corner.BOTTOM_LEFT, 10, 0)","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"\n            The style config has the expected string representation,\n            despite the fact that a visible border color was specified.\n            This is because the border width is 0, so the border is invisible\n            and the border color is irrelevant.\n        ","code":["ComponentExtension.from(panel).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[NONE], \" +","        \"BaseConf[NONE], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"when","text":"\n            We now define the exact same style, but with a visible border width\n            of 1 px at the right edge.\n        ","code":["panel = UI.panel().withStyle(conf -> conf","            .borderColor(Color.GREEN)","            .borderWidths(0,0,0,1)","            .padding(0,0,0,0)","            .borderRadiusAt(UI.Corner.TOP_LEFT, 0, 20)","            .borderRadiusAt(UI.Corner.BOTTOM_LEFT, 10, 0)","        )","        .get(JPanel)"]},

        {"kind":"then","text":"\n            The style config has the expected string representation,\n            despite the fact that a visible border color was specified.\n            This is because the border width is 0, so the border is invisible\n            and the border color is irrelevant.\n\n            Also note that if the uiScale is not whole, then the left border width\n            is also not whole which then leads to there being a margin on the left side.\n            This margin is a correction for the size of a component being integer based.\n            So in order to make the transition between styles look smooth, we need the margin\n            to buffer the fractional part of the border width.\n        ","code":["ComponentExtension.from(panel).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[\" +","            \"radius=?, \" +","            \"topWidth=?, \" +","            \"rightWidth=?, \" +","            \"bottomWidth=?, \" +","            \"leftWidth=\" + String.valueOf(uiScale).replace(\".0\", \"\") + \", \" +","            \"margin=Outline[top=?, right=?, bottom=?, left=${( uiScale % 1 == 0 ? \"?\" : 1 - uiScale % 1 )}], \" +","            \"padding=Outline[top=0, right=0, bottom=0, left=0], \" +","            \"color=rgba(0,255,0,255)\" +","        \"], \" +","        \"BaseConf[\" +","            (","                uiScale % 1 == 0 ?","                    \"NONE\" :","                    \"icon=?, \" +","                    \"fitComponent=NO, \" +","                    \"backgroundColor=rgba(238,238,238,255), \" +","                    \"foundationColor=?, \" +","                    \"foregroundColor=?, \" +","                    \"cursor=?, \" +","                    \"orientation=UNKNOWN\"","            ) +","        \"], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","1.5f","2.0f","2.25f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The border style will be simplified if margin and widths are all 0. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Simplifying a style configuration means that if the properties of a style\n            a configured in such a way that they are effectively the same as the default\n            in terms of how they will be rendered, then the style configuration will be\n            simplified to the default style.\n\n            This optimization is important to improve cache hit rates, as the immutable\n            style configuration objects are used as cache keys.\n            Simplifying the style configurations will ensure that style configurations\n            which effectively render the same thing will also share the same cache buffer\n            for rendering.\n\n            It is also memory efficient, as the default style objects are global null objects.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing { it.uiScaleFactor(uiScale) }"]},

        {"kind":"and","text":"We create a highly simplifiable style through the style API.","code":["var panel =","            UI.panel().withStyle(conf -> conf","                .borderColor(Color.GREEN)","                .borderWidths(0,0,0,0)","                .margin(0,0,0,0)","                .borderRadiusAt(UI.Corner.TOP_LEFT, 0, 20)","                .borderRadiusAt(UI.Corner.BOTTOM_LEFT, 10, 0)","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"\n            The style config has the expected string representation,\n            despite the fact that a visible border color was specified.\n            This is because the border width is 0, so the border is invisible\n            and the border color is irrelevant.\n        ","code":["ComponentExtension.from(panel).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[NONE], \" +","        \"BaseConf[NONE], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"when","text":"\n            We now define the exact same style, but with a visible border width\n            of 1 px at the right edge.\n        ","code":["panel = UI.panel().withStyle(conf -> conf","            .borderColor(Color.GREEN)","            .borderWidths(0,0,0,1)","            .padding(0,0,0,0)","            .borderRadiusAt(UI.Corner.TOP_LEFT, 0, 20)","            .borderRadiusAt(UI.Corner.BOTTOM_LEFT, 10, 0)","        )","        .get(JPanel)"]},

        {"kind":"then","text":"\n            The style config has the expected string representation,\n            despite the fact that a visible border color was specified.\n            This is because the border width is 0, so the border is invisible\n            and the border color is irrelevant.\n\n            Also note that if the uiScale is not whole, then the left border width\n            is also not whole which then leads to there being a margin on the left side.\n            This margin is a correction for the size of a component being integer based.\n            So in order to make the transition between styles look smooth, we need the margin\n            to buffer the fractional part of the border width.\n        ","code":["ComponentExtension.from(panel).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[\" +","            \"radius=?, \" +","            \"topWidth=?, \" +","            \"rightWidth=?, \" +","            \"bottomWidth=?, \" +","            \"leftWidth=\" + String.valueOf(uiScale).replace(\".0\", \"\") + \", \" +","            \"margin=Outline[top=?, right=?, bottom=?, left=${( uiScale % 1 == 0 ? \"?\" : 1 - uiScale % 1 )}], \" +","            \"padding=Outline[top=0, right=0, bottom=0, left=0], \" +","            \"color=rgba(0,255,0,255)\" +","        \"], \" +","        \"BaseConf[\" +","            (","                uiScale % 1 == 0 ?","                    \"NONE\" :","                    \"icon=?, \" +","                    \"fitComponent=NO, \" +","                    \"backgroundColor=rgba(238,238,238,255), \" +","                    \"foundationColor=?, \" +","                    \"foregroundColor=?, \" +","                    \"cursor=?, \" +","                    \"orientation=UNKNOWN\"","            ) +","        \"], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","1.5f","2.0f","2.25f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The border style will be simplified if margin and widths are all 0. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Simplifying a style configuration means that if the properties of a style\n            a configured in such a way that they are effectively the same as the default\n            in terms of how they will be rendered, then the style configuration will be\n            simplified to the default style.\n\n            This optimization is important to improve cache hit rates, as the immutable\n            style configuration objects are used as cache keys.\n            Simplifying the style configurations will ensure that style configurations\n            which effectively render the same thing will also share the same cache buffer\n            for rendering.\n\n            It is also memory efficient, as the default style objects are global null objects.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing { it.uiScaleFactor(uiScale) }"]},

        {"kind":"and","text":"We create a highly simplifiable style through the style API.","code":["var panel =","            UI.panel().withStyle(conf -> conf","                .borderColor(Color.GREEN)","                .borderWidths(0,0,0,0)","                .margin(0,0,0,0)","                .borderRadiusAt(UI.Corner.TOP_LEFT, 0, 20)","                .borderRadiusAt(UI.Corner.BOTTOM_LEFT, 10, 0)","            )","            .get(JPanel)"]},

        {"kind":"expect","text":"\n            The style config has the expected string representation,\n            despite the fact that a visible border color was specified.\n            This is because the border width is 0, so the border is invisible\n            and the border color is irrelevant.\n        ","code":["ComponentExtension.from(panel).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[NONE], \" +","        \"BaseConf[NONE], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"when","text":"\n            We now define the exact same style, but with a visible border width\n            of 1 px at the right edge.\n        ","code":["panel = UI.panel().withStyle(conf -> conf","            .borderColor(Color.GREEN)","            .borderWidths(0,0,0,1)","            .padding(0,0,0,0)","            .borderRadiusAt(UI.Corner.TOP_LEFT, 0, 20)","            .borderRadiusAt(UI.Corner.BOTTOM_LEFT, 10, 0)","        )","        .get(JPanel)"]},

        {"kind":"then","text":"\n            The style config has the expected string representation,\n            despite the fact that a visible border color was specified.\n            This is because the border width is 0, so the border is invisible\n            and the border color is irrelevant.\n\n            Also note that if the uiScale is not whole, then the left border width\n            is also not whole which then leads to there being a margin on the left side.\n            This margin is a correction for the size of a component being integer based.\n            So in order to make the transition between styles look smooth, we need the margin\n            to buffer the fractional part of the border width.\n        ","code":["ComponentExtension.from(panel).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[\" +","            \"radius=?, \" +","            \"topWidth=?, \" +","            \"rightWidth=?, \" +","            \"bottomWidth=?, \" +","            \"leftWidth=\" + String.valueOf(uiScale).replace(\".0\", \"\") + \", \" +","            \"margin=Outline[top=?, right=?, bottom=?, left=${( uiScale % 1 == 0 ? \"?\" : 1 - uiScale % 1 )}], \" +","            \"padding=Outline[top=0, right=0, bottom=0, left=0], \" +","            \"color=rgba(0,255,0,255)\" +","        \"], \" +","        \"BaseConf[\" +","            (","                uiScale % 1 == 0 ?","                    \"NONE\" :","                    \"icon=?, \" +","                    \"fitComponent=NO, \" +","                    \"backgroundColor=rgba(238,238,238,255), \" +","                    \"foundationColor=?, \" +","                    \"foregroundColor=?, \" +","                    \"cursor=?, \" +","                    \"orientation=UNKNOWN\"","            ) +","        \"], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","1.5f","2.0f","2.25f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `UI.Color.UNDEFINED` constant can be used as a safe shorthand for null for the background and foreground properties of the style API",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `UI.Color.UNDEFINED` constant is a java.awt.Color object with all of its rgba values set to 0.\n            Its identity is used to represent the absence of a color being specified, \n            and is used as a safe replacement for null, meaning that when the style engine of a \n            component encounters it, it will pass it onto\n            the `Component::setBackground` and `Component::setForeground` methods as null.\n            Passing null to these methods means that the look and feel determines the coloring.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We have a new Swing component with a custom foreground and background color.","code":["var aToggleButton = new JToggleButton(\"Hello World\")","aToggleButton.setBackground(Color.ORANGE)","aToggleButton.setForeground(Color.DARK_GRAY)"]},

        {"kind":"when","text":"\n            We send the component through the SwingTree builder API and apply a style to it... \n        ","code":["aToggleButton = UI.of(aToggleButton).withStyle(conf -> conf","                    .backgroundColor(UI.Color.UNDEFINED)","                    .foregroundColor(UI.Color.UNDEFINED)","                    .foundationColor(UI.Color.UNDEFINED)","                )","                .get(JToggleButton)"]},

        {"kind":"then","text":"\n            The component will have its background and foreground color set to null,\n            which will cause it to use the default colors of the Look and Feel.\n        ","code":["aToggleButton.getBackground() == null","aToggleButton.getForeground() == null"]},

        {"kind":"and","text":"\n            The style config has the expected string representation!\n            Note that only the background and foreground colors are now set to \"DEFAULT\",\n            whereas the foundation color is represented by a question mark.\n            This is because the foundation color is not something that is used by the look and feel,\n            which means there is no default value for it.\n            The foundation color is used by the SwingTree style engine only, which does not impose\n            any default value for it (defaults may come from `StyleSheet` objects, but that is a different story).\n        ","code":["ComponentExtension.from(aToggleButton).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[NONE], \" +","        \"BaseConf[\" +","            \"icon=?, \" +","            \"fitComponent=NO, \" +","            \"backgroundColor=DEFAULT, \" +","            \"foundationColor=?, \" +","            \"foregroundColor=DEFAULT, \" +","            \"cursor=?, \" +","            \"orientation=UNKNOWN\" +","        \"], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `UI.Color.UNDEFINED` constant can be used as a safe shorthand for null for various properties in the style API",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `UI.Color.UNDEFINED` constant is a java.awt.Color object with all of its rgba values set to 0.\n            Its identity is used to represent the absence of a color, and is used as a safe shorthand for null,\n            meaning that when the style engine of a component encounters it, it will treat it as if no\n            color was specified for the property.\n            This is true for the shadow color, gradient colors, image primer color, and font colors...\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We have a simple Swing component.\n            Which we wrap in the SwingTree builder API and apply a style to it... \n        ","code":["var aComboBox =","            UI.of(new JComboBox<String>()).withStyle( conf -> conf","                .shadowColor(UI.Color.UNDEFINED)","                .gradient(UI.Layer.BACKGROUND, g -> g","                    .colors(UI.Color.UNDEFINED, UI.Color.UNDEFINED, UI.Color.UNDEFINED)","                )","                .image(UI.Layer.FOREGROUND, i -> i","                    .primer(UI.Color.UNDEFINED)","                )","                .fontColor(UI.Color.UNDEFINED)","                .fontSelectionColor(UI.Color.UNDEFINED)","                .fontBackgroundColor(UI.Color.UNDEFINED)","            )","            .get(JComboBox)"]},

        {"kind":"expect","text":"\n            The style configuration of the component will be simplified heavily, to\n            the point where it is effectively considered to have no style at all.\n        ","code":["ComponentExtension.from(aComboBox).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[NONE], \" +","        \"BaseConf[NONE], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `UI.Font.UNDEFINED` constant can be used as a safe shorthand for null for the font property of the style API",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `UI.Font.UNDEFINED` constant is a java.awt.Font object with its family set to \"\" and its size set to -1.\n            Its identity is used to represent the absence of a font family, and is used as a safe shorthand for null,\n            meaning that when the style engine of a component encounters it, it will treat it as if no\n            font family was specified for the property.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We create a simple Swing JComboBox component,\n            which we send through the SwingTree builder API and apply a style to it... \n        ","code":["var aComboBox =","            UI.of(new JComboBox<String>()).withStyle( conf -> conf","                .font(UI.Font.UNDEFINED)","            )","            .get(JComboBox)"]},

        {"kind":"expect","text":"\n            The style configuration of the component will be simplified heavily, to\n            the point where it is effectively considered to have no style at all.\n        ","code":["ComponentExtension.from(aComboBox).getStyle().toString() == \"StyleConf[\" +","        \"LayoutConf[NONE], \" +","        \"BorderConf[NONE], \" +","        \"BaseConf[NONE], \" +","        \"FontConf[NONE], \" +","        \"DimensionalityConf[NONE], \" +","        \"StyleConfLayers[\" +","            \"filter=FilterConf[NONE], \" +","            \"background=StyleConfLayer[EMPTY], \" +","            \"content=StyleConfLayer[EMPTY], \" +","            \"border=StyleConfLayer[EMPTY], \" +","            \"foreground=StyleConfLayer[EMPTY]\" +","        \"], \" +","        \"properties=[]\" +","    \"]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The style API allows you to configure a custom paint for a component font. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Usually the font of a component is a solid color which simply fills\n            out the characters of the text. But the `java.awt.Font` class also\n            allows for a custom paint to be used to fill out the characters.\n\n            SwingTree allows you to configure this font paint\n            through the style API.\n\n            In this example we will configure a linear gradient as\n            the paint for the font of a `JLabel` component.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"A UI declaration consisting of a `JLabel` with a custom gradient paint for the font:","code":["var ui =","            UI.label(\"I am a Gradient\")","            .withStyle( it -> it","                .size(200, 50)","                .padding(3).borderRadius(12)","                .componentFont(f->f","                    .size(18)","                    .family(\"Ubuntu\")","                    .gradient(grad -> grad","                        .colors(Color.RED, Color.GREEN, Color.BLUE)","                        .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                        .span(UI.Span.TOP_TO_BOTTOM)","                        .type(UI.GradientType.LINEAR)","                    )","                    .backgroundGradient( grad -> grad","                        .colors(Color.CYAN, Color.MAGENTA)","                        .span(UI.Span.RIGHT_TO_LEFT)","                        .type(UI.GradientType.LINEAR)","                        .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                        .offset(-6, -6)","                    )","                )","                .fontAlignment(UI.HorizontalAlignment.CENTER)","            )"]},

        {"kind":"when","text":"We create the declared `JLabel` component using the `get` method...","code":["var label = ui.get(JLabel)"]},

        {"kind":"then","text":"The label will have a font with the expected size and family.","code":["label.getFont().getSize() == (int)(18 * uiScale)","label.getFont().getFamily() == \"Ubuntu\""]},

        {"kind":"when","text":"We extract the foreground and background paint of the font...","code":["var paint           = label.getFont().getAttributes().get(TextAttribute.FOREGROUND)","var backgroundPaint = label.getFont().getAttributes().get(TextAttribute.BACKGROUND)"]},

        {"kind":"then","text":"\n            We find that both paint objects are font paints.\n        ","code":["paint instanceof swingtree.style.FontPaint","backgroundPaint instanceof swingtree.style.FontPaint"]},

        {"kind":"when","text":"We unpack their delegated paint...","code":["paint           = paint.getDelegatedPaint()","backgroundPaint = backgroundPaint.getDelegatedPaint()"]},

        {"kind":"then","text":"\n            We find tha both paint objects are gradient paints.\n            But one is a linear gradient and the other is a simple 2 color based gradient.\n        ","code":["paint instanceof LinearGradientPaint","backgroundPaint instanceof GradientPaint"]},

        {"kind":"when","text":"We cast them to their respective types...","code":["var grad1 = paint as LinearGradientPaint","var grad2 = backgroundPaint as GradientPaint"]},

        {"kind":"then","text":"They have the expected start and end points:","code":["grad1.getStartPoint() == new Point2D.Float((float)(3*uiScale), (float)(3*uiScale))","grad1.getEndPoint() == new Point2D.Float((float)(3*uiScale), (float)(47*uiScale))","grad2.getPoint1() == new Point2D.Float((float)(100*uiScale+94.0-100), (float)(25*uiScale-6))","grad2.getPoint2() == new Point2D.Float((float)(3*uiScale-6), (float)(25*uiScale-6))"]},

        {"kind":"and","text":"They also both have the expected colors:","code":["grad1.getColors() == [ Color.RED, Color.GREEN, Color.BLUE ] as Color[]","grad2.getColor1() == Color.CYAN","grad2.getColor2() == Color.MAGENTA"]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","2.0f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The style API allows you to configure a custom paint for a component font. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Usually the font of a component is a solid color which simply fills\n            out the characters of the text. But the `java.awt.Font` class also\n            allows for a custom paint to be used to fill out the characters.\n\n            SwingTree allows you to configure this font paint\n            through the style API.\n\n            In this example we will configure a linear gradient as\n            the paint for the font of a `JLabel` component.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"A UI declaration consisting of a `JLabel` with a custom gradient paint for the font:","code":["var ui =","            UI.label(\"I am a Gradient\")","            .withStyle( it -> it","                .size(200, 50)","                .padding(3).borderRadius(12)","                .componentFont(f->f","                    .size(18)","                    .family(\"Ubuntu\")","                    .gradient(grad -> grad","                        .colors(Color.RED, Color.GREEN, Color.BLUE)","                        .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                        .span(UI.Span.TOP_TO_BOTTOM)","                        .type(UI.GradientType.LINEAR)","                    )","                    .backgroundGradient( grad -> grad","                        .colors(Color.CYAN, Color.MAGENTA)","                        .span(UI.Span.RIGHT_TO_LEFT)","                        .type(UI.GradientType.LINEAR)","                        .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                        .offset(-6, -6)","                    )","                )","                .fontAlignment(UI.HorizontalAlignment.CENTER)","            )"]},

        {"kind":"when","text":"We create the declared `JLabel` component using the `get` method...","code":["var label = ui.get(JLabel)"]},

        {"kind":"then","text":"The label will have a font with the expected size and family.","code":["label.getFont().getSize() == (int)(18 * uiScale)","label.getFont().getFamily() == \"Ubuntu\""]},

        {"kind":"when","text":"We extract the foreground and background paint of the font...","code":["var paint           = label.getFont().getAttributes().get(TextAttribute.FOREGROUND)","var backgroundPaint = label.getFont().getAttributes().get(TextAttribute.BACKGROUND)"]},

        {"kind":"then","text":"\n            We find that both paint objects are font paints.\n        ","code":["paint instanceof swingtree.style.FontPaint","backgroundPaint instanceof swingtree.style.FontPaint"]},

        {"kind":"when","text":"We unpack their delegated paint...","code":["paint           = paint.getDelegatedPaint()","backgroundPaint = backgroundPaint.getDelegatedPaint()"]},

        {"kind":"then","text":"\n            We find tha both paint objects are gradient paints.\n            But one is a linear gradient and the other is a simple 2 color based gradient.\n        ","code":["paint instanceof LinearGradientPaint","backgroundPaint instanceof GradientPaint"]},

        {"kind":"when","text":"We cast them to their respective types...","code":["var grad1 = paint as LinearGradientPaint","var grad2 = backgroundPaint as GradientPaint"]},

        {"kind":"then","text":"They have the expected start and end points:","code":["grad1.getStartPoint() == new Point2D.Float((float)(3*uiScale), (float)(3*uiScale))","grad1.getEndPoint() == new Point2D.Float((float)(3*uiScale), (float)(47*uiScale))","grad2.getPoint1() == new Point2D.Float((float)(100*uiScale+94.0-100), (float)(25*uiScale-6))","grad2.getPoint2() == new Point2D.Float((float)(3*uiScale-6), (float)(25*uiScale-6))"]},

        {"kind":"and","text":"They also both have the expected colors:","code":["grad1.getColors() == [ Color.RED, Color.GREEN, Color.BLUE ] as Color[]","grad2.getColor1() == Color.CYAN","grad2.getColor2() == Color.MAGENTA"]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","2.0f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The style API allows you to configure a custom paint for a component font. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Usually the font of a component is a solid color which simply fills\n            out the characters of the text. But the `java.awt.Font` class also\n            allows for a custom paint to be used to fill out the characters.\n\n            SwingTree allows you to configure this font paint\n            through the style API.\n\n            In this example we will configure a linear gradient as\n            the paint for the font of a `JLabel` component.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"A UI declaration consisting of a `JLabel` with a custom gradient paint for the font:","code":["var ui =","            UI.label(\"I am a Gradient\")","            .withStyle( it -> it","                .size(200, 50)","                .padding(3).borderRadius(12)","                .componentFont(f->f","                    .size(18)","                    .family(\"Ubuntu\")","                    .gradient(grad -> grad","                        .colors(Color.RED, Color.GREEN, Color.BLUE)","                        .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                        .span(UI.Span.TOP_TO_BOTTOM)","                        .type(UI.GradientType.LINEAR)","                    )","                    .backgroundGradient( grad -> grad","                        .colors(Color.CYAN, Color.MAGENTA)","                        .span(UI.Span.RIGHT_TO_LEFT)","                        .type(UI.GradientType.LINEAR)","                        .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                        .offset(-6, -6)","                    )","                )","                .fontAlignment(UI.HorizontalAlignment.CENTER)","            )"]},

        {"kind":"when","text":"We create the declared `JLabel` component using the `get` method...","code":["var label = ui.get(JLabel)"]},

        {"kind":"then","text":"The label will have a font with the expected size and family.","code":["label.getFont().getSize() == (int)(18 * uiScale)","label.getFont().getFamily() == \"Ubuntu\""]},

        {"kind":"when","text":"We extract the foreground and background paint of the font...","code":["var paint           = label.getFont().getAttributes().get(TextAttribute.FOREGROUND)","var backgroundPaint = label.getFont().getAttributes().get(TextAttribute.BACKGROUND)"]},

        {"kind":"then","text":"\n            We find that both paint objects are font paints.\n        ","code":["paint instanceof swingtree.style.FontPaint","backgroundPaint instanceof swingtree.style.FontPaint"]},

        {"kind":"when","text":"We unpack their delegated paint...","code":["paint           = paint.getDelegatedPaint()","backgroundPaint = backgroundPaint.getDelegatedPaint()"]},

        {"kind":"then","text":"\n            We find tha both paint objects are gradient paints.\n            But one is a linear gradient and the other is a simple 2 color based gradient.\n        ","code":["paint instanceof LinearGradientPaint","backgroundPaint instanceof GradientPaint"]},

        {"kind":"when","text":"We cast them to their respective types...","code":["var grad1 = paint as LinearGradientPaint","var grad2 = backgroundPaint as GradientPaint"]},

        {"kind":"then","text":"They have the expected start and end points:","code":["grad1.getStartPoint() == new Point2D.Float((float)(3*uiScale), (float)(3*uiScale))","grad1.getEndPoint() == new Point2D.Float((float)(3*uiScale), (float)(47*uiScale))","grad2.getPoint1() == new Point2D.Float((float)(100*uiScale+94.0-100), (float)(25*uiScale-6))","grad2.getPoint2() == new Point2D.Float((float)(3*uiScale-6), (float)(25*uiScale-6))"]},

        {"kind":"and","text":"They also both have the expected colors:","code":["grad1.getColors() == [ Color.RED, Color.GREEN, Color.BLUE ] as Color[]","grad2.getColor1() == Color.CYAN","grad2.getColor2() == Color.MAGENTA"]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","2.0f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The style API allows you to configure a custom noise paint for a component font. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Usually the font of a component is a solid color which simply fills\n            out the characters of the text. But the `java.awt.Font` class also\n            allows for a custom paint to be used to fill out the characters.\n\n            SwingTree allows you to configure this font paint\n            through the style API.\n\n            In this example we will configure a noise gradient as\n            the paint for the font of a `JLabel` component.\n            The noise gradient is a custom paint that uses a noise function\n            to generate values used for interpolation between colors.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"A UI declaration consisting of a `JLabel` with a custom noise paint for the font:","code":["var ui =","            UI.label(\"I am a Gradient\")","            .withStyle( it -> it","                .size(200, 50)","                .padding(3).borderRadius(12)","                .componentFont(f->f","                    .size(18)","                    .family(\"Ubuntu\")","                    .noise(grad -> grad","                        .colors(Color.RED, Color.GREEN, Color.BLUE)","                        .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                        .function(UI.NoiseType.RETRO)","                    )","                    .backgroundNoise( grad -> grad","                        .colors(Color.CYAN, Color.MAGENTA)","                        .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                        .offset(-6, -6)","                        .function(UI.NoiseType.MANDELBROT)","                        .scale(3, 4)","                    )","                )","                .fontAlignment(UI.HorizontalAlignment.CENTER)","            )"]},

        {"kind":"when","text":"We create the declared `JLabel` component using the `get` method...","code":["var label = ui.get(JLabel)"]},

        {"kind":"then","text":"The label will have a font with the expected size and family.","code":["label.getFont().getSize() == 18 * uiScale","label.getFont().getFamily() == \"Ubuntu\""]},

        {"kind":"when","text":"We extract the foreground and background paint of the font...","code":["var paint           = label.getFont().getAttributes().get(TextAttribute.FOREGROUND)","var backgroundPaint = label.getFont().getAttributes().get(TextAttribute.BACKGROUND)"]},

        {"kind":"then","text":"\n            We find that both paint objects are font paints.\n        ","code":["paint instanceof swingtree.style.FontPaint","backgroundPaint instanceof swingtree.style.FontPaint"]},

        {"kind":"when","text":"We unpack their delegated paint...","code":["paint           = paint.getDelegatedPaint()","backgroundPaint = backgroundPaint.getDelegatedPaint()"]},

        {"kind":"then","text":"\n            We find that both paint objects are noise paints.\n        ","code":["paint instanceof swingtree.style.NoiseGradientPaint","backgroundPaint instanceof swingtree.style.NoiseGradientPaint"]},

        {"kind":"and","text":"They have the expected colors and noise functions:","code":["paint.getColors() == [ Color.RED, Color.GREEN, Color.BLUE ]","paint.getNoiseFunction() == UI.NoiseType.RETRO","backgroundPaint.getColors() == [ Color.CYAN, Color.MAGENTA ]","backgroundPaint.getNoiseFunction() == UI.NoiseType.MANDELBROT"]},

        {"kind":"and","text":"They also both have the expected scale:","code":["paint.getScale() == new Point2D.Float(1, 1)","backgroundPaint.getScale() == new Point2D.Float(3, 4)"]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","2.0f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The style API allows you to configure a custom noise paint for a component font. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Usually the font of a component is a solid color which simply fills\n            out the characters of the text. But the `java.awt.Font` class also\n            allows for a custom paint to be used to fill out the characters.\n\n            SwingTree allows you to configure this font paint\n            through the style API.\n\n            In this example we will configure a noise gradient as\n            the paint for the font of a `JLabel` component.\n            The noise gradient is a custom paint that uses a noise function\n            to generate values used for interpolation between colors.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"A UI declaration consisting of a `JLabel` with a custom noise paint for the font:","code":["var ui =","            UI.label(\"I am a Gradient\")","            .withStyle( it -> it","                .size(200, 50)","                .padding(3).borderRadius(12)","                .componentFont(f->f","                    .size(18)","                    .family(\"Ubuntu\")","                    .noise(grad -> grad","                        .colors(Color.RED, Color.GREEN, Color.BLUE)","                        .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                        .function(UI.NoiseType.RETRO)","                    )","                    .backgroundNoise( grad -> grad","                        .colors(Color.CYAN, Color.MAGENTA)","                        .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                        .offset(-6, -6)","                        .function(UI.NoiseType.MANDELBROT)","                        .scale(3, 4)","                    )","                )","                .fontAlignment(UI.HorizontalAlignment.CENTER)","            )"]},

        {"kind":"when","text":"We create the declared `JLabel` component using the `get` method...","code":["var label = ui.get(JLabel)"]},

        {"kind":"then","text":"The label will have a font with the expected size and family.","code":["label.getFont().getSize() == 18 * uiScale","label.getFont().getFamily() == \"Ubuntu\""]},

        {"kind":"when","text":"We extract the foreground and background paint of the font...","code":["var paint           = label.getFont().getAttributes().get(TextAttribute.FOREGROUND)","var backgroundPaint = label.getFont().getAttributes().get(TextAttribute.BACKGROUND)"]},

        {"kind":"then","text":"\n            We find that both paint objects are font paints.\n        ","code":["paint instanceof swingtree.style.FontPaint","backgroundPaint instanceof swingtree.style.FontPaint"]},

        {"kind":"when","text":"We unpack their delegated paint...","code":["paint           = paint.getDelegatedPaint()","backgroundPaint = backgroundPaint.getDelegatedPaint()"]},

        {"kind":"then","text":"\n            We find that both paint objects are noise paints.\n        ","code":["paint instanceof swingtree.style.NoiseGradientPaint","backgroundPaint instanceof swingtree.style.NoiseGradientPaint"]},

        {"kind":"and","text":"They have the expected colors and noise functions:","code":["paint.getColors() == [ Color.RED, Color.GREEN, Color.BLUE ]","paint.getNoiseFunction() == UI.NoiseType.RETRO","backgroundPaint.getColors() == [ Color.CYAN, Color.MAGENTA ]","backgroundPaint.getNoiseFunction() == UI.NoiseType.MANDELBROT"]},

        {"kind":"and","text":"They also both have the expected scale:","code":["paint.getScale() == new Point2D.Float(1, 1)","backgroundPaint.getScale() == new Point2D.Float(3, 4)"]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","2.0f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The style API allows you to configure a custom noise paint for a component font. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Usually the font of a component is a solid color which simply fills\n            out the characters of the text. But the `java.awt.Font` class also\n            allows for a custom paint to be used to fill out the characters.\n\n            SwingTree allows you to configure this font paint\n            through the style API.\n\n            In this example we will configure a noise gradient as\n            the paint for the font of a `JLabel` component.\n            The noise gradient is a custom paint that uses a noise function\n            to generate values used for interpolation between colors.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first set a scaling factor to simulate a platform with higher DPI.\n            So when your screen has a higher pixel density then this factor\n            is used by SwingTree to ensure that the UI is upscaled accordingly! \n            Please note that the line below only exists for testing purposes, \n            SwingTree will determine a suitable \n            scaling factor for the current system automatically for you,\n            so you do not have to specify this factor manually. \n        ","code":["SwingTree.get().setUiScaleFactor(uiScale)"]},

        {"kind":"and","text":"A UI declaration consisting of a `JLabel` with a custom noise paint for the font:","code":["var ui =","            UI.label(\"I am a Gradient\")","            .withStyle( it -> it","                .size(200, 50)","                .padding(3).borderRadius(12)","                .componentFont(f->f","                    .size(18)","                    .family(\"Ubuntu\")","                    .noise(grad -> grad","                        .colors(Color.RED, Color.GREEN, Color.BLUE)","                        .boundary(UI.ComponentBoundary.INTERIOR_TO_CONTENT)","                        .function(UI.NoiseType.RETRO)","                    )","                    .backgroundNoise( grad -> grad","                        .colors(Color.CYAN, Color.MAGENTA)","                        .boundary(UI.ComponentBoundary.CENTER_TO_CONTENT)","                        .offset(-6, -6)","                        .function(UI.NoiseType.MANDELBROT)","                        .scale(3, 4)","                    )","                )","                .fontAlignment(UI.HorizontalAlignment.CENTER)","            )"]},

        {"kind":"when","text":"We create the declared `JLabel` component using the `get` method...","code":["var label = ui.get(JLabel)"]},

        {"kind":"then","text":"The label will have a font with the expected size and family.","code":["label.getFont().getSize() == 18 * uiScale","label.getFont().getFamily() == \"Ubuntu\""]},

        {"kind":"when","text":"We extract the foreground and background paint of the font...","code":["var paint           = label.getFont().getAttributes().get(TextAttribute.FOREGROUND)","var backgroundPaint = label.getFont().getAttributes().get(TextAttribute.BACKGROUND)"]},

        {"kind":"then","text":"\n            We find that both paint objects are font paints.\n        ","code":["paint instanceof swingtree.style.FontPaint","backgroundPaint instanceof swingtree.style.FontPaint"]},

        {"kind":"when","text":"We unpack their delegated paint...","code":["paint           = paint.getDelegatedPaint()","backgroundPaint = backgroundPaint.getDelegatedPaint()"]},

        {"kind":"then","text":"\n            We find that both paint objects are noise paints.\n        ","code":["paint instanceof swingtree.style.NoiseGradientPaint","backgroundPaint instanceof swingtree.style.NoiseGradientPaint"]},

        {"kind":"and","text":"They have the expected colors and noise functions:","code":["paint.getColors() == [ Color.RED, Color.GREEN, Color.BLUE ]","paint.getNoiseFunction() == UI.NoiseType.RETRO","backgroundPaint.getColors() == [ Color.CYAN, Color.MAGENTA ]","backgroundPaint.getNoiseFunction() == UI.NoiseType.MANDELBROT"]},

        {"kind":"and","text":"They also both have the expected scale:","code":["paint.getScale() == new Point2D.Float(1, 1)","backgroundPaint.getScale() == new Point2D.Float(3, 4)"]},

        {"kind":"where","text":"","code":{"uiScale":["1.0f","2.0f","3.0f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Compared to other colors with an alpha of 0, using `UI.Color.TRANSPARENT` in a gradient style avoids color leakage.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            When using a color with an alpha value of 0 in the color list of a gradient,\n            then during the transition to a neighbouring color with an alpha of 255, the \n            \"true color\" of the transparent color will leak through.\n\n            So lets say we have two neighbouring colors (255, 0, 0, 0) and (0,0,0,255).\n            When transitioning from the first to the second color, the red color will leak through.\n            So an interpolated color might be (128, 0, 0, 128) instead of (0, 0, 0, 255).\n\n            You might want this lind of effect to happen, but if you don't then you can always\n            use the `UI.Color.TRANSPARENT` constant, which is a color that the style engine\n            will turn into a color that is also transparent, but otherwise an interpolation\n            between the two neighbouring colors. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We first create a simple text pane with a gradient style that transitions\n            through various colors, including some transparent colors.\n        ","code":["var ui = UI.textPane()","            .withStyle( it -> it","                .gradient(UI.Layer.BACKGROUND, g -> g","                    .colors(","                        Color.RED,","                        UI.Color.TRANSPARENT,","                        Color.BLUE,","                        new java.awt.Color(0, 255, 0, 0), // transparent green","                        Color.WHITE","                    )","                    .span(UI.Span.TOP_TO_BOTTOM)","                    .type(UI.GradientType.LINEAR)","                )","            )"]},

        {"kind":"and","text":"We build the text pane component...","code":["var textPane = ui.get(JTextPane)"]},

        {"kind":"and","text":"Finally we access the underlying style configuration of the text pane...","code":["var style = ComponentExtension.from(textPane).getStyle()"]},

        {"kind":"expect","text":"\n            Now we look at the gradient colors an verify that their are all\n            the same as the ones we specified in the style configuration, but with the\n            difference that the `UI.Color.TRANSPARENT` constant has been replaced\n            with a color that is also fully transparent, but otherwise an interpolation\n            between the two neighbouring colors.\n        ","code":["style.layers().get(UI.Layer.BACKGROUND).gradients().get(\"default\").colors() == [","    Color.RED,","    new Color(127, 0, 127, 0), // Interpolated","    Color.BLUE,","    new Color(0, 255, 0, 0),","    Color.WHITE","]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
