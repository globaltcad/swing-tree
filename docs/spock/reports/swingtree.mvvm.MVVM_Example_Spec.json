{
  "className":"swingtree.mvvm.MVVM_Example_Spec",
  "title":"MVVM Introduction",
  "narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n\n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model.",
  "subjects":[],
  "statistics":{
    "runs":"23",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.429 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"We can create a property based view model and build a view for it.",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Note that we use a pre-made example view model here.\n            Feel free to look at the source code of the view model\n            to see what it is doing.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We instantiate the view model.","code":["var vm = new LoginViewModel()"]},

        {"kind":"when","text":"We create a view for our view model...","code":["var ui =","    UI.panel(\"fill, wrap 2\")","    .add( UI.label( \"Username:\" ) )","    .add( \"grow\", UI.textField(vm.username()))","    .add( UI.label( \"Password:\" ) )","    .add( \"grow\", UI.passwordField(vm.password()))","    .add( \"span\",","        UI.label(vm.feedback())","    )","    .add( \"span\",","        UI.button( \"Login\" )","        .isEnabledIf(vm.buttonEnabled())","        .onClick( it -> vm.login() )","    )"]},

        {"kind":"then","text":"The view was successfully created.","code":["ui != null"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can bind a boolean property to a button, and when the user presses it, we notice it.",
      "result":"PASS",
      "duration":"0.074 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We instantiate the \"view model\" in the form of a single property.","code":["var pressedStates = []","Var<Boolean> buttonPressed = Var.of(false).onAct({pressedStates.add(it.current().get()) })"]},

        {"kind":"when","text":"We create a view for our view model...","code":["var ui = UI.button(\"Press me!\").isPressedIf(buttonPressed)"]},

        {"kind":"then","text":"The view was successfully created.","code":["ui != null"]},

        {"kind":"when","text":"We press the button.","code":["ui.component.doClick()"]},

        {"kind":"then","text":"\n                The property was updated 2 times, because the pressed state switches \n                from false to true and then false again.\n            ","code":["pressedStates == [true, false]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Binding to the selection state of a button does nothing, because a JButton can only be pressed.",
      "result":"PASS",
      "duration":"0.069 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We instantiate the \"view model\" in the form of a single property.","code":["boolean actionPerformed = false","Var<Boolean> buttonPressed = Var.of(false).onAct({actionPerformed = true})"]},

        {"kind":"when","text":"We create a view for our view model...","code":["var ui = UI.button(\"Press me!\").isSelectedIf(buttonPressed)"]},

        {"kind":"then","text":"The view was successfully created.","code":["ui != null"]},

        {"kind":"when","text":"We press the button.","code":["ui.component.doClick()"]},

        {"kind":"then","text":"The property was not updated because a JButton can only be pressed.","code":["actionPerformed == false"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can bind a boolean property to a checkbox, and when the user presses it, we notice it.",
      "result":"PASS",
      "duration":"0.068 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We instantiate the \"view model\" in the form of a single property.","code":["Var<Boolean> checkBoxSelected = Var.of(false)"]},

        {"kind":"when","text":"We create a view for our view model...","code":["var ui = UI.checkBox(\"Press me!\").isSelectedIf(checkBoxSelected)"]},

        {"kind":"then","text":"The view was successfully created.","code":["ui != null"]},

        {"kind":"when","text":"We press the button.","code":["ui.component.doClick()"]},

        {"kind":"then","text":"The property was updated.","code":["checkBoxSelected.orElseNull() == true"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can bind a boolean property to a radio button, and when the user presses it, we notice it.",
      "result":"PASS",
      "duration":"0.068 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We instantiate the \"view model\" in the form of a single property.","code":["Var<Boolean> radioButton = Var.of(false)"]},

        {"kind":"when","text":"We create a view for our view model...","code":["var ui = UI.radioButton(\"Press me!\").isSelectedIf(radioButton)"]},

        {"kind":"then","text":"The view was successfully created.","code":["ui != null"]},

        {"kind":"when","text":"We press the radio button.","code":["ui.component.doClick()"]},

        {"kind":"then","text":"The property was updated.","code":["radioButton.orElseNull() == true"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can bind a boolean property to a toggle button, and when the user presses it, we notice it.",
      "result":"PASS",
      "duration":"0.070 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We instantiate the \"view model\" in the form of a single property.","code":["Var<Boolean> isToggled = Var.of(false)"]},

        {"kind":"when","text":"We create a view for our view model...","code":["var ui = UI.toggleButton(\"Toggle me!\").isSelectedIf(isToggled)"]},

        {"kind":"then","text":"The view was successfully created.","code":["ui != null"]},

        {"kind":"when","text":"We press the toggle button.","code":["ui.component.doClick()"]},

        {"kind":"then","text":"The property was updated.","code":["isToggled.orElseNull() == true"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can bind a enum property to a combo box and when the user selects an item, we notice it.",
      "result":"PASS",
      "duration":"0.026 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can conveniently bind a combo box to any type of property, \n            but there are 2 types of properties which should be used preferably:\n            Enums and Strings. \n            And among these 2 you should always prefer enums over strings, because \n            they have a more manageable room of possible states...\n            Only if the possible states are too many\n            and not predictable during compile time, should you use strings.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We instantiate the \"view model\" in the form of a single property holding an example enum.","code":["boolean actionPerformed = false","Var<Size> selected = Var.of(Size.SMALL).onAct({actionPerformed = true})"]},

        {"kind":"expect","text":"The enum we use for demonstration has the following values.","code":["Size.values() == [Size.SMALL, Size.MEDIUM, Size.LARGE]"]},

        {"kind":"when","text":"We create a view for our view model...","code":["var ui = UI.comboBox(Size.values()).withSelectedItem(selected)"]},

        {"kind":"then","text":"The view was successfully created.","code":["ui != null"]},

        {"kind":"when","text":"We select an item in the combo box.","code":["ui.component.setSelectedIndex(1)"]},

        {"kind":"then","text":"The property was updated.","code":["selected.orElseNull() == Size.MEDIUM"]},

        {"kind":"and","text":"The action was triggered.","code":["actionPerformed == true"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"An enum based combo box can infer its possible states directly from the binding property.",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can conveniently bind a combo box to any type of property, \n            but there are 2 types of properties which should be used preferably:\n            Enums and Strings. \n            And among these 2 you should always prefer enums over strings, because \n            they have a more manageable room of possible states...\n            Only if the possible states are too many\n            and not predictable during compile time, should you use strings.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We instantiate the \"view model\" in the form of a single property holding an example enum.","code":["boolean actionPerformed = false","Var<Option> selected = Var.of(Option.YES).onAct({actionPerformed = true})"]},

        {"kind":"expect","text":"The enum we use for demonstration has the following values.","code":["Option.values() == [Option.YES, Option.NO, Option.MAYBE]"]},

        {"kind":"when","text":"We create a view for our view model...","code":["var ui = UI.comboBox(selected)"]},

        {"kind":"then","text":"The view was successfully created.","code":["ui != null"]},

        {"kind":"when","text":"We select an item in the combo box.","code":["ui.component.setSelectedItem(Option.MAYBE)"]},

        {"kind":"then","text":"The property was updated.","code":["selected.orElseNull() == Option.MAYBE"]},

        {"kind":"and","text":"The action was triggered.","code":["actionPerformed == true"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A string property can be bound to a combo box holding string elements.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can conveniently bind a combo box to any type of property, \n            but there are 2 types of properties which should be used preferably:\n            Enums and Strings. \n            And among these 2 you should always prefer enums over strings, because \n            they have a more manageable room of possible states...\n            Only if the possible states are too many\n            and not predictable during compile time, should you use strings.\n            In the example below you can see how the usage of a string property\n            makes sense, because there might be requirements to add new food items\n            to the combo box at runtime.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We instantiate the \"view model\" in the form of a single property holding a string.","code":["boolean actionPerformed = false","Var<String> selected = Var.of(\"Tofu\").onAct({actionPerformed = true})"]},

        {"kind":"when","text":"We create a view for our view model...","code":["var ui = UI.comboBox(\"Tofu\", \"Tempeh\", \"Seitan\").withSelectedItem(selected)"]},

        {"kind":"then","text":"The view was successfully created.","code":["ui != null && !actionPerformed"]},

        {"kind":"when","text":"We select an item in the combo box.","code":["ui.component.setSelectedIndex(1)"]},

        {"kind":"then","text":"The property was updated.","code":["selected.orElseNull() == \"Tempeh\""]},

        {"kind":"and","text":"The action was triggered.","code":["actionPerformed == true"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A simple list of elements can be used as a data model for a combo box.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Always prefer Enums over Strings but if you have to model generic data\n            you can always bind a simple list of elements as a data model to a combo box.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple list, holding the data.","code":["List<String> data = [\"Tofu\", \"Tempeh\", \"Seitan\"]"]},

        {"kind":"when","text":"We create a combo box and bind it to the data.","code":["var ui = UI.comboBox(data)"]},

        {"kind":"then","text":"The combo box was successfully created.","code":["ui != null"]},

        {"kind":"and","text":"The combo box contains the data.","code":["ui.component.itemCount == data.size()","ui.component.getItemAt(0) == data.get(0)","ui.component.getItemAt(1) == data.get(1)","ui.component.getItemAt(2) == data.get(2)"]},

        {"kind":"when","text":"We modify the list...","code":["data.add(\"Soy Milk\")"]},

        {"kind":"then","text":"The combo box is updated.","code":["ui.component.itemCount == data.size()","ui.component.getItemAt(0) == data.get(0)","ui.component.getItemAt(1) == data.get(1)","ui.component.getItemAt(2) == data.get(2)","ui.component.getItemAt(3) == data.get(3)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A simple array of elements can be used as a data model for a combo box.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Always prefer Enums over Strings but if you have to model generic data\n            you can always bind a simple array of elements as a data model to a combo box.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple array, holding the data.","code":["String[] data = [\"Tofu\", \"Tempeh\", \"Seitan\"]"]},

        {"kind":"when","text":"We create a combo box and bind it to the data.","code":["var ui = UI.comboBox(data)"]},

        {"kind":"then","text":"The combo box was successfully created.","code":["ui != null"]},

        {"kind":"and","text":"The combo box contains the data.","code":["ui.component.itemCount == data.size()","ui.component.getItemAt(0) == data[0]","ui.component.getItemAt(1) == data[1]","ui.component.getItemAt(2) == data[2]"]},

        {"kind":"when","text":"We modify the array...","code":["data[1] = \"Soy Milk\""]},

        {"kind":"then","text":"The combo box is updated.","code":["ui.component.itemCount == data.size()","ui.component.getItemAt(0) == data[0]","ui.component.getItemAt(1) == data[1]","ui.component.getItemAt(2) == data[2]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can bind a property as the current selection as well as list of elements as options to a combo box.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple list, holding the data.","code":["List<String> data = [\"Tofu\", \"Tempeh\", \"Seitan\"]"]},

        {"kind":"and","text":"We create a property holding the current selection.","code":["Var<String> selected = Var.of(\"Tofu\")"]},

        {"kind":"when","text":"We create a combo box and bind it to the data.","code":["var ui = UI.comboBox(selected, data)"]},

        {"kind":"then","text":"The combo box was successfully created.","code":["ui != null"]},

        {"kind":"and","text":"The combo box contains the data.","code":["ui.component.itemCount == data.size()","ui.component.getItemAt(0) == data.get(0)","ui.component.getItemAt(1) == data.get(1)","ui.component.getItemAt(2) == data.get(2)"]},

        {"kind":"and","text":"The combo box has the correct selection.","code":["ui.component.selectedItem == selected.orElseNull()"]},

        {"kind":"when","text":"We modify the list...","code":["data.add(\"Soy Milk\")"]},

        {"kind":"then","text":"The combo box is updated.","code":["ui.component.itemCount == data.size()","ui.component.getItemAt(0) == data.get(0)","ui.component.getItemAt(1) == data.get(1)","ui.component.getItemAt(2) == data.get(2)","ui.component.getItemAt(3) == data.get(3)"]},

        {"kind":"and","text":"The combo box has the correct selection.","code":["ui.component.selectedItem == selected.orElseNull()"]},

        {"kind":"when","text":"We modify the selection...","code":["selected.set(\"Seitan\")"]},

        {"kind":"then","text":"The combo box has the correct selection.","code":["ui.component.selectedItem == selected.orElseNull()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"View Models can be represented by properties.",
      "result":"PASS",
      "duration":"0.006 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            In larger GUIs usually consist views which themselves consist of multiple\n            sub views. This is also true for their view models which are usually\n            structured in the same tree like fashion. \n            Often times however, your views are highly dynamic and you want to\n            be able to swap out sub views at runtime. In this case it is useful\n            to represent your view models as properties. \n            Simply implement the 'Viewable' interface in your view model and\n            you can bind it to a view.\n            When the property changes, the view will be updated automatically.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a view model.","code":["Var<String> name = Var.of(\"Tofu\")","Var<Integer> population = Var.of(4)","var vm1 = (Viewable){","                return UI.panel().id(\"sub-1\")","                        .add(UI.label(\"Name:\"))","                        .add(UI.textField(name))","                        .add(UI.button(\"Update\").onClick { name.set(\"Tempeh\") })","                        .component","            }","var vm2 = (Viewable) {","                return UI.panel().id(\"sub-2\")","                        .add(UI.label(\"Population:\"))","                        .add(UI.slider(UI.Align.HORIZONTAL).withValue(population))","                        .add(UI.button(\"Update\").onClick { population.set(5) })","                        .component","            }"]},

        {"kind":"and","text":"A property storing the first view model.","code":["Var<Viewable> vm = Var.of(vm1)"]},

        {"kind":"and","text":"Finally a view which binds to the view model property.","code":["var ui = UI.panel()","        .add(UI.label(\"Dynamic Super View:\"))","        .add(UI.panel().id(\"super\").add(vm))"]},

        {"kind":"expect","text":"We query the UI for the views and verify that the \"super\" and \"sub-1\" views are present.","code":["new Utility.Query(ui).find(JPanel, \"super\").isPresent()","new Utility.Query(ui).find(JPanel, \"sub-1\").isPresent()","!new Utility.Query(ui).find(JPanel, \"sub-2\").isPresent()"]},

        {"kind":"when","text":"We update the view model property.","code":["vm.set(vm2)","UI.sync()"]},

        {"kind":"then","text":"The \"sub-1\" view is removed and the \"sub-2\" view is added.","code":["!new Utility.Query(ui).find(JPanel, \"sub-1\").isPresent()","new Utility.Query(ui).find(JPanel, \"sub-2\").isPresent()"]},

        {"kind":"and","text":"The \"super\" view is still present.","code":["new Utility.Query(ui).find(JPanel, \"super\").isPresent()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"View Models can be represented by properties lists.",
      "result":"PASS",
      "duration":"0.011 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            In larger GUIs usually consist views which themselves consist of multiple\n            sub views. This is also true for their view models which are usually\n            structured in the same tree like fashion. \n            Often times however, your views are highly dynamic and you want to\n            be able to swap out sub views at runtime. In this case it is useful\n            to represent your view models as property lists, especially if \n            one view consists of multiple sub views.\n            Simply implement the 'Viewable' interface in your view model and\n            you can bind it to a view using the \"Vars\" class wrapping your viewables.\n            When the property list changes, the view will be updated automatically.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a view model.","code":["Var<String> address = Var.of(\"123 Main Street\")","Var<String> title = Var.of(\"Mr.\")","Var<Double> price = Var.of(1000000.0d)","Var<Option> option = Var.of(Option.YES)"]},

        {"kind":"and","text":"We create 4 view models with 4 locally created views:","code":["var vm1 = (Viewable) {","                return UI.panel().id(\"sub-1\")","                        .add(UI.label(\"Address:\"))","                        .add(UI.textField(address))","                        .add(UI.button(\"Update\").onClick { address.set(\"456 Main Street\") })","                        .component","            }","var vm2 = (Viewable) {","                return UI.panel().id(\"sub-2\")","                        .add(UI.label(\"Title:\"))","                        .add(UI.textField(title))","                        .add(UI.button(\"Update\").onClick { title.set(\"Mrs.\") })","                        .component","            }","var vm3 = (Viewable){","                return UI.panel().id(\"sub-3\")","                        .add(UI.label(\"Price:\"))","                        .add(UI.slider(UI.Align.HORIZONTAL).withValue(price))","                        .add(UI.button(\"Update\").onClick { price.set(2000000.0) })","                        .component","            }","var vm4 = (Viewable){","                    return UI.panel().id(\"sub-4\")","                        .add(UI.label(\"Option:\"))","                        .add(UI.comboBox(option, Option.values()))","                        .add(UI.button(\"Update\").onClick { option.set(Option.NO) })","                        .component","                }"]},

        {"kind":"and","text":"A property list storing the view models.","code":["var vms = Vars.of(vm1, vm2, vm3, vm4)"]},

        {"kind":"and","text":"Finally a view which binds to the view model property list.","code":["var ui = UI.panel()","        .add(UI.label(\"Dynamic Super View:\"))","        .add(UI.panel().id(\"super\").add(vms))"]},

        {"kind":"expect","text":"We query the UI for the views and verify that the \"super\" and \"sub-1\" views are present.","code":["new Utility.Query(ui).find(JPanel, \"super\").isPresent()","new Utility.Query(ui).find(JPanel, \"sub-1\").isPresent()","new Utility.Query(ui).find(JPanel, \"sub-2\").isPresent()","new Utility.Query(ui).find(JPanel, \"sub-3\").isPresent()","new Utility.Query(ui).find(JPanel, \"sub-4\").isPresent()"]},

        {"kind":"when","text":"We remove something from the view model property list.","code":["vms.remove(vm2)","UI.sync()"]},

        {"kind":"then","text":"We expect all views to be present except for the \"sub-2\" view.","code":["new Utility.Query(ui).find(JPanel, \"super\").isPresent()","new Utility.Query(ui).find(JPanel, \"sub-1\").isPresent()","!new Utility.Query(ui).find(JPanel, \"sub-2\").isPresent()","new Utility.Query(ui).find(JPanel, \"sub-3\").isPresent()","new Utility.Query(ui).find(JPanel, \"sub-4\").isPresent()"]},

        {"kind":"and","text":"We remove something else from the view model property list but this time, for a change, use the index.","code":["vms.removeAt(2) // vm4","UI.sync()"]},

        {"kind":"then","text":"We expect all views to be present except for the \"sub-2\" and \"sub-4\" views.","code":["new Utility.Query(ui).find(JPanel, \"super\").isPresent()","new Utility.Query(ui).find(JPanel, \"sub-1\").isPresent()","!new Utility.Query(ui).find(JPanel, \"sub-2\").isPresent()","new Utility.Query(ui).find(JPanel, \"sub-3\").isPresent()","!new Utility.Query(ui).find(JPanel, \"sub-4\").isPresent()"]},

        {"kind":"when","text":"We reintroduce \"vm2\"...","code":["vms.add(vm2)","UI.sync()"]},

        {"kind":"then","text":"We expect all views to be present except for the \"sub-4\" view.","code":["new Utility.Query(ui).find(JPanel, \"super\").isPresent()","new Utility.Query(ui).find(JPanel, \"sub-1\").isPresent()","new Utility.Query(ui).find(JPanel, \"sub-2\").isPresent()","new Utility.Query(ui).find(JPanel, \"sub-3\").isPresent()","!new Utility.Query(ui).find(JPanel, \"sub-4\").isPresent()"]},

        {"kind":"when","text":"We clear the view model property list.","code":["vms.clear()","UI.sync()"]},

        {"kind":"then","text":"We expect all views to be removed. (except for the \"super\" view)","code":["!new Utility.Query(ui).find(JPanel, \"sub-1\").isPresent()","!new Utility.Query(ui).find(JPanel, \"sub-2\").isPresent()","!new Utility.Query(ui).find(JPanel, \"sub-3\").isPresent()","!new Utility.Query(ui).find(JPanel, \"sub-4\").isPresent()","new Utility.Query(ui).find(JPanel, \"super\").isPresent()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A boolean property can be used to switch between 2 foreground colors.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Using the 'withForegroundIf(Val<Boolean>, Color, Color)' method,\n            you can switch between 2 foreground colors of a Swing component set dynamically\n            if the boolean property is true or false.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a property modelling the color switch.","code":["Var<Boolean> isRed = Var.of(true)"]},

        {"kind":"and","text":"We create a 2 colors.","code":["Color red = Color.RED","Color green = Color.GREEN"]},

        {"kind":"and","text":"We create a label with a red foreground color.","code":["var ui = UI.label(\"Hello World!\").withForegroundIf(isRed, red, green)"]},

        {"kind":"expect","text":"The label should have a red foreground color.","code":["ui.component.foreground == red"]},

        {"kind":"when","text":"We change the boolean property to false.","code":["isRed.set(false)","UI.sync()"]},

        {"kind":"then","text":"The label should have a green foreground color.","code":["ui.component.foreground == green"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A boolean property can be used to switch between 2 background colors.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Using the 'withBackgroundIf(Val<Boolean>, Color, Color)' method,\n            you can switch between 2 background colors of a Swing component set dynamically\n            if the boolean property is true or false.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a property modelling the color switch.","code":["Var<Boolean> isRed = Var.of(true)"]},

        {"kind":"and","text":"We create a 2 colors.","code":["Color red   = Color.RED","Color green = Color.GREEN"]},

        {"kind":"and","text":"We create a label with a red background color.","code":["var ui = UI.label(\"Hello World!\").withBackgroundIf(isRed, red, green)"]},

        {"kind":"expect","text":"The label should have a red background color.","code":["ui.component.background == red"]},

        {"kind":"when","text":"We change the boolean property to false.","code":["isRed.set(false)","UI.sync()"]},

        {"kind":"then","text":"The label should have a green background color.","code":["ui.component.background == green"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A boolean property can be used to set or reset a foreground color.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Using the 'withForegroundIf(Val<Boolean>, Color)' method,\n            you can set or reset the foreground color of a Swing component dynamically\n            if the boolean property is true or false.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a property modelling the color switch.","code":["Var<Boolean> isRed = Var.of(false)"]},

        {"kind":"and","text":"We create a label with a yellow background color.","code":["var ui = UI.label(\"Hello World!\").withForegroundIf(isRed, Color.YELLOW)"]},

        {"kind":"and","text":"We remember the original foreground color.","code":["Color originalColor = ui.component.foreground"]},

        {"kind":"expect","text":"The label should have the original foreground color.","code":["ui.component.foreground == originalColor"]},

        {"kind":"when","text":"We change the boolean property to true.","code":["isRed.set(true)","UI.sync()"]},

        {"kind":"then","text":"The label should have a yellow foreground color because the boolean property is true.","code":["ui.component.foreground == Color.YELLOW"]},

        {"kind":"when","text":"We change the boolean property to false.","code":["isRed.set(false)","UI.sync()"]},

        {"kind":"then","text":"Again, the label should have the original foreground color.","code":["ui.component.foreground == originalColor"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A boolean property can be used to set or reset a background color.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Using the 'withBackgroundIf(Val<Boolean>, Color)' method,\n            you can set or reset the background color of a Swing component dynamically\n            if the boolean property is true or false.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a property modelling the color switch.","code":["Var<Boolean> isRed = Var.of(false)"]},

        {"kind":"and","text":"We create a label with a yellow background color.","code":["var ui = UI.label(\"Hello World!\").withBackgroundIf(isRed, Color.YELLOW)"]},

        {"kind":"and","text":"We remember the original background color.","code":["Color originalColor = ui.component.background"]},

        {"kind":"expect","text":"The label should have the original background color.","code":["ui.component.background == originalColor"]},

        {"kind":"when","text":"We change the boolean property to true.","code":["isRed.set(true)","UI.sync()"]},

        {"kind":"then","text":"The label should have a yellow background color because the boolean property is true.","code":["ui.component.background == Color.YELLOW"]},

        {"kind":"when","text":"We change the boolean property to false.","code":["isRed.set(false)","UI.sync()"]},

        {"kind":"then","text":"Again, the label should have the original background color.","code":["ui.component.background == originalColor"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The foreground color of a Swing component can be modelled using a boolean and a Color property.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Using the 'withForegroundIf(Val<Boolean>, Val<Color>)' method,\n            the foreground color of a Swing component is set dynamically\n            if the boolean property is true.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A boolean property.","code":["var displayColor = Var.of(false)"]},

        {"kind":"and","text":"A color property.","code":["var color = Var.of(Color.RED)"]},

        {"kind":"and","text":"A Swing UI with a simple label bound to the properties:","code":["var ui = UI.panel()","        .add(","            UI.label(\"Hi!\").id(\"XYZ\")","            .withForeground(Color.GREEN) // default color","            .withForegroundIf(displayColor, color)","        )"]},

        {"kind":"expect","text":"The label should have the default foreground color.","code":["new Utility.Query(ui).find(JLabel, \"XYZ\").get().getForeground() == Color.GREEN"]},

        {"kind":"when","text":"We set the boolean property to true.","code":["displayColor.set(true)","UI.sync()"]},

        {"kind":"then","text":"The label should have a foreground color.","code":["new Utility.Query(ui).find(JLabel, \"XYZ\").get().getForeground() == Color.RED"]},

        {"kind":"when","text":"We set the color property to blue.","code":["color.set(Color.BLUE)","UI.sync()"]},

        {"kind":"then","text":"The label should have a foreground color of blue.","code":["new Utility.Query(ui).find(JLabel, \"XYZ\").get().getForeground() == Color.BLUE"]},

        {"kind":"when","text":"We set the boolean property to false.","code":["displayColor.set(false)","UI.sync()"]},

        {"kind":"then","text":"The label should have the default foreground color, green.","code":["new Utility.Query(ui).find(JLabel, \"XYZ\").get().getForeground() == Color.GREEN"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The background color of a Swing component can be modelled using a boolean and a Color property.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Using the 'withBackgroundIf(Val<Boolean>, Val<Color>)' method,\n            the background color of a Swing component is set dynamically\n            if the boolean property is true.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A boolean property.","code":["var displayColor = Var.of(false)"]},

        {"kind":"and","text":"A color property.","code":["var color = Var.of(Color.RED)"]},

        {"kind":"and","text":"A Swing UI with a simple label bound to the properties:","code":["var ui = UI.panel()","        .add(","            UI.label(\"Hi!\").id(\"XYZ\")","            .withBackground(Color.GREEN) // default color","            .withBackgroundIf(displayColor, color)","        )"]},

        {"kind":"expect","text":"The label should have the default background color.","code":["new Utility.Query(ui).find(JLabel, \"XYZ\").get().getBackground() == Color.GREEN"]},

        {"kind":"when","text":"We set the boolean property to true.","code":["displayColor.set(true)","UI.sync()"]},

        {"kind":"then","text":"The label should have a background color.","code":["new Utility.Query(ui).find(JLabel, \"XYZ\").get().getBackground() == Color.RED"]},

        {"kind":"when","text":"We set the color property to blue.","code":["color.set(Color.BLUE)","UI.sync()"]},

        {"kind":"then","text":"The label should have a background color of blue.","code":["new Utility.Query(ui).find(JLabel, \"XYZ\").get().getBackground() == Color.BLUE"]},

        {"kind":"when","text":"We set the boolean property to false.","code":["displayColor.set(false)","UI.sync()"]},

        {"kind":"then","text":"The label should have the default background color, green.","code":["new Utility.Query(ui).find(JLabel, \"XYZ\").get().getBackground() == Color.GREEN"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The tooltip of a component can be modelled using a String property.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Using the 'withTooltip(Val<String>)' method,\n            the tooltip of a Swing component is set dynamically\n            if the String property changes.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A String property.","code":["var tooltip = Var.of(\"Hello World!\")"]},

        {"kind":"and","text":"A Swing UI with a simple label bound to the property:","code":["var ui = UI.panel()","        .add(","            UI.label(\"Hi!\").id(\"XYZ\")","            .withTooltip(tooltip)","        )"]},

        {"kind":"expect","text":"The label should have the default tooltip.","code":["new Utility.Query(ui).find(JLabel, \"XYZ\").get().getToolTipText() == \"Hello World!\""]},

        {"kind":"when","text":"We set the String property to \"Hello Universe!\".","code":["tooltip.set(\"Hello Universe!\")","UI.sync()"]},

        {"kind":"then","text":"The label should have a tooltip.","code":["new Utility.Query(ui).find(JLabel, \"XYZ\").get().getToolTipText() == \"Hello Universe!\""]},

        {"kind":"when","text":"We set the String property to an empty String.","code":["tooltip.set(\"\")","UI.sync()"]},

        {"kind":"then","text":"The label should have no tooltip.","code":["new Utility.Query(ui).find(JLabel, \"XYZ\").get().getToolTipText() == null"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A border title can be modelled using properties.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Using the 'withBorderTitle(Val<String>)' method,\n            the title of a Swing component's border is set dynamically\n            if the String property changes.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A String property.","code":["var title = Var.of(\"Hello World!\")"]},

        {"kind":"and","text":"A Swing UI with a simple label bound to the property:","code":["var ui = UI.panel().id(\"My-Panel\")","        .withBorderTitled(title)","        .add(","            UI.label(\"Hi!\")","            //... some other stuff","        )"]},

        {"kind":"expect","text":"The panel should have the expected default border title.","code":["((TitledBorder)new Utility.Query(ui).find(JPanel, \"My-Panel\").get().border).getTitle() == \"Hello World!\""]},

        {"kind":"when","text":"We set the String property to \"Hello Universe!\".","code":["title.set(\"Hello Universe!\")","UI.sync()"]},

        {"kind":"then","text":"The panel should have a border title.","code":["((TitledBorder)new Utility.Query(ui).find(JPanel, \"My-Panel\").get().border).getTitle() == \"Hello Universe!\""]},

        {"kind":"when","text":"We set the String property to an empty String.","code":["title.set(\"\")","UI.sync()"]},

        {"kind":"then","text":"The panel should have no border title.","code":["((TitledBorder)new Utility.Query(ui).find(JPanel, \"My-Panel\").get().border).getTitle() == \"\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The type of cursor displayed over a component can be modelled using properties.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Using the 'withCursor(Val<Cursor>)' method,\n            the cursor displayed over a Swing component is set dynamically\n            if the Cursor property changes.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A Cursor property.","code":["var cursor = Var.of(UI.Cursor.DEFAULT)"]},

        {"kind":"and","text":"A Swing UI with a simple label bound to the property:","code":["var ui = UI.panel()","        .add(","            UI.label(\"Hi!\").id(\"XYZ\")","            .withCursor(cursor)","        )"]},

        {"kind":"expect","text":"The label should have the default cursor.","code":["new Utility.Query(ui).find(JLabel, \"XYZ\").get().cursor.type == UI.Cursor.DEFAULT.type"]},

        {"kind":"when","text":"We set the Cursor property to a crosshair cursor.","code":["cursor.set(UI.Cursor.CROSS)","UI.sync()"]},

        {"kind":"then","text":"The label should have a crosshair cursor.","code":["new Utility.Query(ui).find(JLabel, \"XYZ\").get().cursor.type == UI.Cursor.CROSS.type"]},

        {"kind":"when","text":"We set the Cursor property to a hand cursor.","code":["cursor.set(UI.Cursor.HAND)","UI.sync()"]},

        {"kind":"then","text":"The label should have a hand cursor.","code":["new Utility.Query(ui).find(JLabel, \"XYZ\").get().cursor.type == UI.Cursor.HAND.type"]},

        {"kind":"when","text":"We set the Cursor property to a text cursor.","code":["cursor.set(UI.Cursor.TEXT)","UI.sync()"]},

        {"kind":"then","text":"The label should have a text cursor.","code":["new Utility.Query(ui).find(JLabel, \"XYZ\").get().cursor.type == UI.Cursor.TEXT.type"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}