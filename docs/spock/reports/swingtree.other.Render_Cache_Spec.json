{
  "className":"swingtree.other.Render_Cache_Spec",
  "title":"Internal Render Caching",
  "narrative":"**This specification covers the behaviour of an internal class!\n    Which means that the contents of this may not be relevant to.\n    Keep reading however if you are interested in some of the obscure details\n    of the SwingTree library internals.**\n\n    SwingTree offers advanced styling options as part of **the style API**,\n    which is most commonly used using the `withStyle(Styler)` method\n    on any builder node.\n    The rendering of these styles can get rather compute intensive,\n    especially in cases where repaints are called frequently.\n    This is not really a problem for modern CPUs/GPUs, which can handle the\n    rendering of UI effortlessly, but nonetheless, we do not want to waste\n    precious clock cycles and energy on meaningfully repaints of things that were already\n    painted many many times before.\n    This is especially important for mobile devices, which should not burn through\n    your battery just because of a few shaded buttons...\n\n    ---\n\n    **So how does SwingTree solve this issue?**\n\n    The answer is caching based rendering where the cache keys are the\n    immutable style configurations. And whenever the style configuration\n    object changes a different cache area is being hit.\n\n    The extensive usage of immutable data inside the SwingTree style engine\n    allows us to do caching for a wide wide variety of things besides rendering,\n    like the caching of complex shapes (needed for clipping and painting).\n\n    But I digress... Let's ensure that the caching works as expected:",
  "subjects":[],
  "statistics":{
    "runs":"1",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"The cache can be created and used for painting.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Note that the caching class itself does not know how to paint anything itself.\n            It receives a lambda which does the actual painting and whenever something was \n            found in the cache, then the lambda is simply ignored. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We have a cache for the background layer of a component:","code":["var cache = new swingtree.style.LayerCache(UI.Layer.BACKGROUND)"]},

        {"kind":"and","text":"And a basic style configuration object:","code":["var key0 = swingtree.style.ComponentConf.none()"]},

        {"kind":"and","text":"Finally, a mocked graphics object we can use to check if the cache was hit or not:","code":["var g = Mock(Graphics2D)"]},

        {"kind":"when","text":"We try to do an initial paint into the cache...","code":["cache.validate(key0, key0)","cache.paint(key0, g,  (conf, g2) -> {g2.fillRect(0,0,10,10) })"]},

        {"kind":"then","text":"We did not render into the cache, instead we just painted eagerly!","code":["1 * g.fillRect(0,0,10,10)"]},

        {"kind":"and","text":"","code":["!cache.hasBufferedImage()"]},

        {"kind":"when","text":"We try to do it a second time...","code":["cache.validate(key0, key0)","cache.paint(key0, g,  (conf, g2) -> {g2.fillRect(0,0,10,10) })"]},

        {"kind":"then","text":"Still, we just painted eagerly!","code":["1 * g.fillRect(0,0,10,10)"]},

        {"kind":"and","text":"","code":["!cache.hasBufferedImage()"]},

        {"kind":"when","text":"We change the style configuration object to something that can be painted...","code":["var key = ComponentExtension.from(","            UI.button(\"Hello World\").withStyle(conf -> conf","                .backgroundColor(Color.BLACK)","                .foregroundColor(Color.WHITE)","                .size(120, 80)","                .borderRadius(40)","            )","            .getComponent()","        )","        .getConf();"]},

        {"kind":"and","text":"Then we do another round of validation and painting...","code":["cache.validate(key0, key)","var didRendering = false","cache.paint(key, g,  (conf, g2) -> {","    g2.fillRect(0,0,10,10);","    didRendering = true;","})"]},

        {"kind":"then","text":"We did not paint into the cache!","code":["didRendering","1 * g.fillRect(0,0,10,10)","0 * g.drawImage({it instanceof BufferedImage},0,0,null)"]},

        {"kind":"and","text":"","code":["cache.hasBufferedImage()"]},

        {"kind":"when","text":"We do it again...","code":["cache.validate(key, key)","didRendering = false","cache.paint(key, g,  (conf, g2) -> {","    g2.fillRect(0,0,10,10);","    didRendering = true;","})"]},

        {"kind":"then","text":"Instead of the painter lambda being called, the buffer was used!","code":["didRendering","0 * g.fillRect(0,0,10,10)","1 * g.drawImage({it instanceof BufferedImage},0,0,null)"]},

        {"kind":"when","text":"We repeat this process then the buffer will be used every time!","code":["didRendering = false","cache.validate(key, key)","cache.paint(key, g,  (conf, g2) -> {","    g2.fillRect(0,0,10,10);","    didRendering = true;","})","cache.validate(key, key)","cache.paint(key, g,  (conf, g2) -> {","    g2.fillRect(0,0,10,10);","    didRendering = true;","})","cache.validate(key, key)","cache.paint(key, g,  (conf, g2) -> {","    g2.fillRect(0,0,10,10);","    didRendering = true;","})"]},

        {"kind":"then","text":"Instead of the painter lambda being called, the buffer was used!","code":["!didRendering","0 * g.fillRect(0,0,10,10)","3 * g.drawImage({it instanceof BufferedImage},0,0,null)"]},

        {"kind":"when","text":"However, we create a successor configuration object...","code":["var key2 = ComponentExtension.from(","            UI.button(\"Hello World\").withStyle(conf -> conf","                .backgroundColor(Color.BLACK)","                .foregroundColor(Color.WHITE)","                .size(120, 80)","                .borderRadius(40)","                .foundationColor(Color.GREEN)","            )","            .getComponent()","        )","        .getConf();"]},

        {"kind":"and","text":"And we revalidate the cache...","code":["cache.validate(key, key2)","didRendering = false","cache.paint(key2, g,  (conf, g2) -> {","    g2.fillRect(0,0,10,10);","    didRendering = true;","})"]},

        {"kind":"then","text":"The painting lambda was used to rerender the cache!","code":["didRendering","1 * g.fillRect(0,0,10,10)","0 * g.drawImage({it instanceof BufferedImage},0,0,null)"]},

        {"kind":"and","text":"And the buffer is still there!","code":["cache.hasBufferedImage()"]},

        {"kind":"when","text":"We now repeat the process using the successor config...","code":["cache.validate(key2, key2)","cache.paint(key2, g,  (conf, g2) -> {g2.fillRect(0,0,10,10) })","cache.validate(key2, key2)","cache.paint(key2, g,  (conf, g2) -> {g2.fillRect(0,0,10,10) })","cache.validate(key2, key2)","cache.paint(key2, g,  (conf, g2) -> {g2.fillRect(0,0,10,10) })"]},

        {"kind":"then","text":"Instead of the painter lambda being called, the buffer was used again!","code":["0 * g.fillRect(0,0,10,10)","3 * g.drawImage({it instanceof BufferedImage},0,0,null)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
