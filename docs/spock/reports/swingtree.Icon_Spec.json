{
  "className":"swingtree.Icon_Spec",
  "title":"Displaying Icons",
  "narrative":"For displaying icons in you UI declarations,\n    SwingTree offers a dedicated component called ´JIcon´,\n    an alternative to the standard `JLabel` component,\n    commonly used for displaying icons.\n\n    The `JIcon` component extends `JLabel` and\n    is more deliberate in its handling of icons.\n\n    In this specification, we will explore how\n    you can create declarative UIs\n    with the `JIcon` component.",
  "subjects":["swingtree.components.JIcon","swingtree.UIForIcon","swingtree.UI"],
  "statistics":{
    "runs":"16",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Create a icon UI declaration from a path not leading to an existing image.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            An important requirement of GUI code is to\n            not cause exceptions when the image file is not found.\n            This is important to avoid the rest of the GUI from breaking\n            and not being responsive to the user or even showing up.\n\n            So here we check if we can create a UI declaration\n            for the `JIcon` component with an image path that does \n            not lead to an existing image file.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a UI declaration for an icon at a given path.","code":["var ui = UI.icon(\"path/to/my/icon.png\")"]},

        {"kind":"when","text":"We create a UI component from the declaration.","code":["var component = ui.get(JIcon)"]},

        {"kind":"then","text":"The component should be an instance of JIcon.","code":["component instanceof JIcon"]},

        {"kind":"and","text":"The icon should be empty.","code":["component.icon.getIconWidth() == -1","component.icon.getIconHeight() == -1"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Create a icon UI declaration from a non existing image path with a size.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            An important requirement of GUI code is to\n            not cause exceptions when the image file is not found.\n            This is important to avoid the rest of the GUI from breaking\n            and not being responsive to the user or even showing up.\n\n            So here we check if we can create a UI declaration\n            for the `JIcon` component with an image path that does \n            not lead to an existing image file.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a UI declaration for an icon at a given path with a size.","code":["var ui = UI.icon(Size.of(32, 32), \"path/to/my/icon.png\")"]},

        {"kind":"when","text":"We create a UI component from the declaration.","code":["var component = ui.get(JIcon)"]},

        {"kind":"then","text":"The component should be an instance of JIcon.","code":["component instanceof JIcon"]},

        {"kind":"and","text":"The icon should be empty.","code":["component.icon.getIconWidth() == -1","component.icon.getIconHeight() == -1"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Create a icon UI declaration from an existing image source.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a UI declaration for an icon at a given path.","code":["var ui = UI.icon(\"img/swing.png\")"]},

        {"kind":"when","text":"We create a UI component from the declaration.","code":["var component = ui.get(JIcon)"]},

        {"kind":"then","text":"The component should be an instance of JIcon.","code":["component instanceof JIcon"]},

        {"kind":"and","text":"The icon should be loaded.","code":["component.icon.getIconWidth() > 0","component.icon.getIconHeight() > 0"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Create a icon UI declaration from an existing image path with a size. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(uiScale) )"]},

        {"kind":"and","text":"We create a UI declaration for an icon at a given path with a size.","code":["var ui = UI.icon(Size.of(32, 32), \"img/swing.png\")"]},

        {"kind":"when","text":"We create a UI component from the declaration.","code":["var component = ui.get(JIcon)"]},

        {"kind":"then","text":"The component should be an instance of JIcon.","code":["component instanceof JIcon"]},

        {"kind":"and","text":"The icon should be loaded.","code":["component.icon.getIconWidth() == (int) Math.round(32 * uiScale)","component.icon.getIconHeight() == (int) Math.round(32 * uiScale)"]},

        {"kind":"where","text":"","code":{"uiScale":["1f","1.5f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Create a icon UI declaration from an existing image path with a size. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(uiScale) )"]},

        {"kind":"and","text":"We create a UI declaration for an icon at a given path with a size.","code":["var ui = UI.icon(Size.of(32, 32), \"img/swing.png\")"]},

        {"kind":"when","text":"We create a UI component from the declaration.","code":["var component = ui.get(JIcon)"]},

        {"kind":"then","text":"The component should be an instance of JIcon.","code":["component instanceof JIcon"]},

        {"kind":"and","text":"The icon should be loaded.","code":["component.icon.getIconWidth() == (int) Math.round(32 * uiScale)","component.icon.getIconHeight() == (int) Math.round(32 * uiScale)"]},

        {"kind":"where","text":"","code":{"uiScale":["1f","1.5f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Create a icon UI declaration from an existing image path with a size. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(uiScale) )"]},

        {"kind":"and","text":"We create a UI declaration for an icon at a given path with a size.","code":["var ui = UI.icon(Size.of(32, 32), \"img/swing.png\")"]},

        {"kind":"when","text":"We create a UI component from the declaration.","code":["var component = ui.get(JIcon)"]},

        {"kind":"then","text":"The component should be an instance of JIcon.","code":["component instanceof JIcon"]},

        {"kind":"and","text":"The icon should be loaded.","code":["component.icon.getIconWidth() == (int) Math.round(32 * uiScale)","component.icon.getIconHeight() == (int) Math.round(32 * uiScale)"]},

        {"kind":"where","text":"","code":{"uiScale":["1f","1.5f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Build an icon UI declaration from the `IconDeclaration` type. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            the `IconDeclaration` type is a value oriented interface\n            which is designed to be used to implement constants \n            pointing to icon resources.\n\n            This allows you to specify icons with custom sizes\n            in your UI and business logic, without having to\n            deal with IO loading complexities.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(uiScale) )"]},

        {"kind":"and","text":"","code":["var icon = IconDeclaration.of(Size.of(32, 42), \"img/swing.png\")"]},

        {"kind":"when","text":"We create a UI declaration from the icon declaration.","code":["var ui = UI.icon(icon)"]},

        {"kind":"then","text":"The UI declaration should be created.","code":["ui != null"]},

        {"kind":"and","text":"The icon should be loaded.","code":["var component = ui.get(JIcon)","component.icon.getIconWidth() == (int) Math.round(32 * uiScale)","component.icon.getIconHeight() == (int) Math.round(42 * uiScale)"]},

        {"kind":"where","text":"","code":{"uiScale":["1f","1.5f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Build an icon UI declaration from the `IconDeclaration` type. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            the `IconDeclaration` type is a value oriented interface\n            which is designed to be used to implement constants \n            pointing to icon resources.\n\n            This allows you to specify icons with custom sizes\n            in your UI and business logic, without having to\n            deal with IO loading complexities.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(uiScale) )"]},

        {"kind":"and","text":"","code":["var icon = IconDeclaration.of(Size.of(32, 42), \"img/swing.png\")"]},

        {"kind":"when","text":"We create a UI declaration from the icon declaration.","code":["var ui = UI.icon(icon)"]},

        {"kind":"then","text":"The UI declaration should be created.","code":["ui != null"]},

        {"kind":"and","text":"The icon should be loaded.","code":["var component = ui.get(JIcon)","component.icon.getIconWidth() == (int) Math.round(32 * uiScale)","component.icon.getIconHeight() == (int) Math.round(42 * uiScale)"]},

        {"kind":"where","text":"","code":{"uiScale":["1f","1.5f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Build an icon UI declaration from the `IconDeclaration` type. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            the `IconDeclaration` type is a value oriented interface\n            which is designed to be used to implement constants \n            pointing to icon resources.\n\n            This allows you to specify icons with custom sizes\n            in your UI and business logic, without having to\n            deal with IO loading complexities.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(uiScale) )"]},

        {"kind":"and","text":"","code":["var icon = IconDeclaration.of(Size.of(32, 42), \"img/swing.png\")"]},

        {"kind":"when","text":"We create a UI declaration from the icon declaration.","code":["var ui = UI.icon(icon)"]},

        {"kind":"then","text":"The UI declaration should be created.","code":["ui != null"]},

        {"kind":"and","text":"The icon should be loaded.","code":["var component = ui.get(JIcon)","component.icon.getIconWidth() == (int) Math.round(32 * uiScale)","component.icon.getIconHeight() == (int) Math.round(42 * uiScale)"]},

        {"kind":"where","text":"","code":{"uiScale":["1f","1.5f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Create a `JIcon` dynamically bound to a `Var<IconDeclaration> property. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `Var` type is a reactive type that allows you to\n            bind UI components to a value that can change over time.\n\n            This is useful for creating dynamic UIs that respond to\n            changes in the application state and are also decoupled\n            from the business logic.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(uiScale) )"]},

        {"kind":"and","text":"We create a `Var` property with an icon declaration.","code":["var icon = Var.of(IconDeclaration.of(Size.of(16, 16), \"img/swing.png\"))"]},

        {"kind":"and","text":"We create a UI declaration for the icon property.","code":["var ui = UI.icon(icon)"]},

        {"kind":"when","text":"We create a UI component from the declaration.","code":["var component = ui.get(JIcon)"]},

        {"kind":"then","text":"The component should be an instance of JIcon.","code":["component instanceof JIcon"]},

        {"kind":"and","text":"The icon should be loaded.","code":["component.icon.getIconWidth() == (int) Math.round(16 * uiScale)","component.icon.getIconHeight() == (int) Math.round(16 * uiScale)"]},

        {"kind":"when","text":"We update the icon property.","code":["icon.set(IconDeclaration.of(Size.of(28, 32), \"img/swing.png\"))"]},

        {"kind":"then","text":"The icon should be updated.","code":["component.icon.getIconWidth() == (int) Math.round(28 * uiScale)","component.icon.getIconHeight() == (int) Math.round(32 * uiScale)"]},

        {"kind":"where","text":"","code":{"uiScale":["1f","1.5f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Create a `JIcon` dynamically bound to a `Var<IconDeclaration> property. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `Var` type is a reactive type that allows you to\n            bind UI components to a value that can change over time.\n\n            This is useful for creating dynamic UIs that respond to\n            changes in the application state and are also decoupled\n            from the business logic.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(uiScale) )"]},

        {"kind":"and","text":"We create a `Var` property with an icon declaration.","code":["var icon = Var.of(IconDeclaration.of(Size.of(16, 16), \"img/swing.png\"))"]},

        {"kind":"and","text":"We create a UI declaration for the icon property.","code":["var ui = UI.icon(icon)"]},

        {"kind":"when","text":"We create a UI component from the declaration.","code":["var component = ui.get(JIcon)"]},

        {"kind":"then","text":"The component should be an instance of JIcon.","code":["component instanceof JIcon"]},

        {"kind":"and","text":"The icon should be loaded.","code":["component.icon.getIconWidth() == (int) Math.round(16 * uiScale)","component.icon.getIconHeight() == (int) Math.round(16 * uiScale)"]},

        {"kind":"when","text":"We update the icon property.","code":["icon.set(IconDeclaration.of(Size.of(28, 32), \"img/swing.png\"))"]},

        {"kind":"then","text":"The icon should be updated.","code":["component.icon.getIconWidth() == (int) Math.round(28 * uiScale)","component.icon.getIconHeight() == (int) Math.round(32 * uiScale)"]},

        {"kind":"where","text":"","code":{"uiScale":["1f","1.5f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Create a `JIcon` dynamically bound to a `Var<IconDeclaration> property. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `Var` type is a reactive type that allows you to\n            bind UI components to a value that can change over time.\n\n            This is useful for creating dynamic UIs that respond to\n            changes in the application state and are also decoupled\n            from the business logic.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(uiScale) )"]},

        {"kind":"and","text":"We create a `Var` property with an icon declaration.","code":["var icon = Var.of(IconDeclaration.of(Size.of(16, 16), \"img/swing.png\"))"]},

        {"kind":"and","text":"We create a UI declaration for the icon property.","code":["var ui = UI.icon(icon)"]},

        {"kind":"when","text":"We create a UI component from the declaration.","code":["var component = ui.get(JIcon)"]},

        {"kind":"then","text":"The component should be an instance of JIcon.","code":["component instanceof JIcon"]},

        {"kind":"and","text":"The icon should be loaded.","code":["component.icon.getIconWidth() == (int) Math.round(16 * uiScale)","component.icon.getIconHeight() == (int) Math.round(16 * uiScale)"]},

        {"kind":"when","text":"We update the icon property.","code":["icon.set(IconDeclaration.of(Size.of(28, 32), \"img/swing.png\"))"]},

        {"kind":"then","text":"The icon should be updated.","code":["component.icon.getIconWidth() == (int) Math.round(28 * uiScale)","component.icon.getIconHeight() == (int) Math.round(32 * uiScale)"]},

        {"kind":"where","text":"","code":{"uiScale":["1f","1.5f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `UI.findIcon(IconDeclaration)` method will load an icon with the correct size and scale. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `UI.findIcon(IconDeclaration)` method is a utility method\n            that allows you to load an icon with the correct size and scale\n            from an `IconDeclaration` constant.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(uiScale) )"]},

        {"kind":"and","text":"Five different kinds of icon declarations.","code":["var iconDeclaration1 = IconDeclaration.of(\"img/trees.png\")","var iconDeclaration2 = IconDeclaration.of(Size.unknown(), \"img/trees.png\")","var iconDeclaration3 = IconDeclaration.of(Size.of(-1, 12), \"img/trees.png\")","var iconDeclaration4 = IconDeclaration.of(Size.of(16, -1), \"img/trees.png\")","var iconDeclaration5 = IconDeclaration.of(Size.of(16, 12), \"img/trees.png\")"]},

        {"kind":"when","text":"We try to find the icons.","code":["var icon1 = UI.findIcon(iconDeclaration1)","var icon2 = UI.findIcon(iconDeclaration2)","var icon3 = UI.findIcon(iconDeclaration3)","var icon4 = UI.findIcon(iconDeclaration4)","var icon5 = UI.findIcon(iconDeclaration5)"]},

        {"kind":"then","text":"They are all present:","code":["icon1.isPresent() && icon2.isPresent() && icon3.isPresent() && icon4.isPresent() && icon5.isPresent()"]},

        {"kind":"and","text":"\n            The first icon should have the size from the image file scaled by the UI scale factor.\n            The second icon should be the exact same, it should also have the size from the image \n            file scaled by the UI scale factor. \n        ","code":["icon1.get() === icon2.get()","icon1.get().getIconWidth() == (int) Math.round(512 * uiScale)","icon1.get().getIconHeight() == (int) Math.round(512 * uiScale)"]},

        {"kind":"and","text":"    \n            The third icon should have the width scaled by the UI scale factor and the height \n            calculated from the aspect ratio of the image.\n            And the same goes for the fourth icon, but with the width calculated from the aspect ratio.\n\n            Note that the aspect ratio is 1:1 for this image.\n        ","code":["icon3.get().getIconWidth() == (int) Math.round(12 * uiScale)","icon3.get().getIconHeight() == (int) Math.round(12 * uiScale)","icon4.get().getIconWidth() == (int) Math.round(16 * uiScale)","icon4.get().getIconHeight() == (int) Math.round(16 * uiScale)"]},

        {"kind":"and","text":"       \n            Finally, the fifth icon should have the specified size scaled by the UI scale factor.\n            The actual size of the icon should be ignored.\n        ","code":["icon5.get().getIconWidth() == (int) Math.round(16 * uiScale)","icon5.get().getIconHeight() == (int) Math.round(12 * uiScale)"]},

        {"kind":"where","text":"","code":{"uiScale":["1f","1.5f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `UI.findIcon(IconDeclaration)` method will load an icon with the correct size and scale. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `UI.findIcon(IconDeclaration)` method is a utility method\n            that allows you to load an icon with the correct size and scale\n            from an `IconDeclaration` constant.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(uiScale) )"]},

        {"kind":"and","text":"Five different kinds of icon declarations.","code":["var iconDeclaration1 = IconDeclaration.of(\"img/trees.png\")","var iconDeclaration2 = IconDeclaration.of(Size.unknown(), \"img/trees.png\")","var iconDeclaration3 = IconDeclaration.of(Size.of(-1, 12), \"img/trees.png\")","var iconDeclaration4 = IconDeclaration.of(Size.of(16, -1), \"img/trees.png\")","var iconDeclaration5 = IconDeclaration.of(Size.of(16, 12), \"img/trees.png\")"]},

        {"kind":"when","text":"We try to find the icons.","code":["var icon1 = UI.findIcon(iconDeclaration1)","var icon2 = UI.findIcon(iconDeclaration2)","var icon3 = UI.findIcon(iconDeclaration3)","var icon4 = UI.findIcon(iconDeclaration4)","var icon5 = UI.findIcon(iconDeclaration5)"]},

        {"kind":"then","text":"They are all present:","code":["icon1.isPresent() && icon2.isPresent() && icon3.isPresent() && icon4.isPresent() && icon5.isPresent()"]},

        {"kind":"and","text":"\n            The first icon should have the size from the image file scaled by the UI scale factor.\n            The second icon should be the exact same, it should also have the size from the image \n            file scaled by the UI scale factor. \n        ","code":["icon1.get() === icon2.get()","icon1.get().getIconWidth() == (int) Math.round(512 * uiScale)","icon1.get().getIconHeight() == (int) Math.round(512 * uiScale)"]},

        {"kind":"and","text":"    \n            The third icon should have the width scaled by the UI scale factor and the height \n            calculated from the aspect ratio of the image.\n            And the same goes for the fourth icon, but with the width calculated from the aspect ratio.\n\n            Note that the aspect ratio is 1:1 for this image.\n        ","code":["icon3.get().getIconWidth() == (int) Math.round(12 * uiScale)","icon3.get().getIconHeight() == (int) Math.round(12 * uiScale)","icon4.get().getIconWidth() == (int) Math.round(16 * uiScale)","icon4.get().getIconHeight() == (int) Math.round(16 * uiScale)"]},

        {"kind":"and","text":"       \n            Finally, the fifth icon should have the specified size scaled by the UI scale factor.\n            The actual size of the icon should be ignored.\n        ","code":["icon5.get().getIconWidth() == (int) Math.round(16 * uiScale)","icon5.get().getIconHeight() == (int) Math.round(12 * uiScale)"]},

        {"kind":"where","text":"","code":{"uiScale":["1f","1.5f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `UI.findIcon(IconDeclaration)` method will load an icon with the correct size and scale. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `UI.findIcon(IconDeclaration)` method is a utility method\n            that allows you to load an icon with the correct size and scale\n            from an `IconDeclaration` constant.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(uiScale) )"]},

        {"kind":"and","text":"Five different kinds of icon declarations.","code":["var iconDeclaration1 = IconDeclaration.of(\"img/trees.png\")","var iconDeclaration2 = IconDeclaration.of(Size.unknown(), \"img/trees.png\")","var iconDeclaration3 = IconDeclaration.of(Size.of(-1, 12), \"img/trees.png\")","var iconDeclaration4 = IconDeclaration.of(Size.of(16, -1), \"img/trees.png\")","var iconDeclaration5 = IconDeclaration.of(Size.of(16, 12), \"img/trees.png\")"]},

        {"kind":"when","text":"We try to find the icons.","code":["var icon1 = UI.findIcon(iconDeclaration1)","var icon2 = UI.findIcon(iconDeclaration2)","var icon3 = UI.findIcon(iconDeclaration3)","var icon4 = UI.findIcon(iconDeclaration4)","var icon5 = UI.findIcon(iconDeclaration5)"]},

        {"kind":"then","text":"They are all present:","code":["icon1.isPresent() && icon2.isPresent() && icon3.isPresent() && icon4.isPresent() && icon5.isPresent()"]},

        {"kind":"and","text":"\n            The first icon should have the size from the image file scaled by the UI scale factor.\n            The second icon should be the exact same, it should also have the size from the image \n            file scaled by the UI scale factor. \n        ","code":["icon1.get() === icon2.get()","icon1.get().getIconWidth() == (int) Math.round(512 * uiScale)","icon1.get().getIconHeight() == (int) Math.round(512 * uiScale)"]},

        {"kind":"and","text":"    \n            The third icon should have the width scaled by the UI scale factor and the height \n            calculated from the aspect ratio of the image.\n            And the same goes for the fourth icon, but with the width calculated from the aspect ratio.\n\n            Note that the aspect ratio is 1:1 for this image.\n        ","code":["icon3.get().getIconWidth() == (int) Math.round(12 * uiScale)","icon3.get().getIconHeight() == (int) Math.round(12 * uiScale)","icon4.get().getIconWidth() == (int) Math.round(16 * uiScale)","icon4.get().getIconHeight() == (int) Math.round(16 * uiScale)"]},

        {"kind":"and","text":"       \n            Finally, the fifth icon should have the specified size scaled by the UI scale factor.\n            The actual size of the icon should be ignored.\n        ","code":["icon5.get().getIconWidth() == (int) Math.round(16 * uiScale)","icon5.get().getIconHeight() == (int) Math.round(12 * uiScale)"]},

        {"kind":"where","text":"","code":{"uiScale":["1f","1.5f","2f"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"An already loaded icon will dynamically scale to mach the current DPI scale factor.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            When an icon is loaded, it is loaded at the current DPI scale factor.\n            If the DPI scale factor changes after it was already loaded, \n            then the icon will internally reload itself to match the new DPI scale factor.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We start with an initial scale of 1.","code":["SwingTree.initialiseUsing(it -> it.uiScaleFactor(1f) )"]},

        {"kind":"and","text":"We load two different types of images, an SVG and a PNG image.","code":["var icon1 = UI.findIcon(IconDeclaration.of(\"img/trees.png\").withSize(128, 512))","var icon2 = UI.findIcon(IconDeclaration.of(\"img/dandelion.svg\").withSize(128, 512))"]},

        {"kind":"expect","text":"The icons should have been loaded.","code":["icon1.isPresent() && icon2.isPresent()"]},

        {"kind":"and","text":"The icons should have the correct size.","code":["icon1.get().getIconWidth() == 128","icon1.get().getIconHeight() == 512","icon2.get().getIconWidth() == 128","icon2.get().getIconHeight() == 512"]},

        {"kind":"when","text":"We change the scale to 2.","code":["SwingTree.get().setUiScaleFactor(2f)"]},

        {"kind":"then","text":"The icons should have been reloaded.","code":["icon1.get().getIconWidth() == 256","icon1.get().getIconHeight() == 1024","icon2.get().getIconWidth() == 256","icon2.get().getIconHeight() == 1024"]},

        {"kind":"when","text":"We change the scale to 1.5.","code":["SwingTree.get().setUiScaleFactor(1.5f)"]},

        {"kind":"then","text":"The icons should have been reloaded.","code":["icon1.get().getIconWidth() == 192","icon1.get().getIconHeight() == 768","icon2.get().getIconWidth() == 192","icon2.get().getIconHeight() == 768"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
