{
  "className":"swingtree.JButton_Example_Spec",
  "title":"Using JButton in SwingTree",
  "narrative":"This specification demonstrates how the SwingTree API\n    can be used to create `JButton`s and how to register event handlers\n    on them while still being able to integrate them\n    in a declarative UI.",
  "subjects":["swingtree.UIForButton"],
  "statistics":{
    "runs":"3",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"We can easily create a button with an associated action:",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            This is he most basic example of defining a button.\n            It has some text displayed on top of it and a simple click action.\n            Take a look:\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a basic button which will a simple \"onClick\".","code":["var ui =","    UI.button(\"I am displayed on the button!\")","    .onClick( it -> it.component.setEnabled(false) )"]},

        {"kind":"and","text":"We actually build the component:","code":["var button = ui.get(JButton)"]},

        {"kind":"expect","text":"The component wrapped by the UI builder is in fact a simple button:","code":["button instanceof JButton"]},

        {"kind":"and","text":"The button is enabled by default!","code":["button.isEnabled()"]},

        {"kind":"when","text":"We simulate a user click...","code":["UI.runNow( ()-> button.doClick() )"]},

        {"kind":"then","text":"The button will be disabled because of the click action we specified!","code":["!button.isEnabled()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A button will delegate its siblings within actions:",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The event handlers you register on a component receive a useful context \n            which offers all kinds of relevant information to your event action.\n            This is also true for a click action handler registered on a \n            button, which can access the neighbouring sibling components. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a panel with a label and a button!","code":["var ui =","    UI.panel()","        .add(UI.label(\"Button:\"))","        .add(","            UI.button(\"Click me!\")","            .onClick( it -> it.siblings.each {s -> s.setEnabled(false)} )","        )"]},

        {"kind":"and","text":"We actually build the component:","code":["var panel = ui.get(JPanel)"]},

        {"kind":"expect","text":"The components wrapped by the UI builder are as expected:","code":["panel.getComponent(0) instanceof JLabel","panel.getComponent(1) instanceof JButton"]},

        {"kind":"and","text":"They are enabled by default!","code":["panel.getComponent(0).isEnabled()","panel.getComponent(1).isEnabled()"]},

        {"kind":"when","text":"We simulate a user click...","code":["UI.runNow( () -> panel.getComponent(1).doClick() )"]},

        {"kind":"then","text":"They are enabled by default!","code":["!panel.getComponent(0).isEnabled()","panel.getComponent(1).isEnabled()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"In a button event we can go through the entire siblinghood, including the current button!",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The event handlers you register on a component receive a useful context \n            which offers all kinds of relevant information to your event action.\n            This is also true for a click action handler registered on a \n            button, which can access the \"siblinghood\", which is all siblings\n            including itself. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a panel with some random components and a fancy click action","code":["var ui =","    UI.panel()","    .add(UI.textField(\"text field\"))","    .add(UI.label(\"innocent label\"))","    .add(","        UI.button(\"Click me!\")","        .onClick(it ->","            it.siblinghood.each {s -> { if ( s instanceof JLabel ) s.setText(\"I got hacked!\") }}","        )","    )","    .add(UI.spinner())"]},

        {"kind":"and","text":"We actually build the component:","code":["var panel = ui.get(JPanel)"]},

        {"kind":"when","text":"We simulate a user click...","code":["UI.runNow( () -> panel.getComponent(2).doClick() )"]},

        {"kind":"then","text":"The label text changed!","code":["panel.getComponent(1).getText() == \"I got hacked!\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
