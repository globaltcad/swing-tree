{
  "project": "Swing-Tree",
  "version": "0.2.0",
  "created": "Tue Nov 15 22:45:13 CET 2022",
  "statistics":{
    "runs":"13",
    "passed":"13",
    "failed":"0",
    "featureFailures":"0",
    "successRate":"1.0",
    "duration":"4084.0"
  },
  "specifications": [{
      "className":"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec",
      "title":"Swing tree makes UI building fun again!",
      "narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree.",
      "featureCount":"11",
      "failures":"0",
      "errors":"0",
      "skipped":"1" ,
      "successRate":"1.0",
      "duration":"249",
      "executedFeatures":[{"id":"A tabbed pane can be created and populated in a declarative way.","extraInfo":[]},{"id":"Swing tree nests components (trough builder nodes).","extraInfo":[]},{"id":"Tab header components can be passed to the \"tab\" factory method instead of the title.","extraInfo":[]},{"id":"The tab buttons of a tabbed pane can have custom components.","extraInfo":[]},{"id":"We can add a list of components to the swing tree API and get a builder node in return.","extraInfo":[]},{"id":"We can easily define the cursor on a wrapped UI component","extraInfo":[]},{"id":"We can register list selection events on a JList based swing tree node.","extraInfo":[]},{"id":"We can register various UI focus events in swing tree nodes.","extraInfo":[]},{"id":"We can register various keyboard events in swing tree nodes.","extraInfo":[]},{"id":"We can use the swing tree to build a valid Swing GUI tree.","extraInfo":[]}],
      "ignoredFeatures":[{"id":"Swing tree makes us a viewable window!","extraInfo":[]}]
    },{
      "className":"com.globaltcad.swingtree.examples.Examples_Spec",
      "title":"Execution and Validation of Example Code",
      "narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states.",
      "featureCount":"5",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"1080",
      "executedFeatures":[{"id":"The advanced UI define in the examples has the expected state.","extraInfo":[]},{"id":"The calculator UI defined in the examples has the expected state.","extraInfo":[]},{"id":"The form UI define in the examples has the expected state.","extraInfo":[]},{"id":"The simple Table-UI example has the expected state.","extraInfo":[]},{"id":"The todo app UI defined in the examples has the expected state.","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec",
      "title":"",
      "narrative":"",
      "featureCount":"1",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"212",
      "executedFeatures":[{"id":"The given factory methods do not accept null arguments.","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"com.globaltcad.swingtree.common.UI_Query_Spec",
      "title":"",
      "narrative":"",
      "featureCount":"1",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"162",
      "executedFeatures":[{"id":"We can query the swing tree within an action lambda.","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"com.globaltcad.swingtree.common.UI_Updates_Spec",
      "title":"",
      "narrative":"",
      "featureCount":"1",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"225",
      "executedFeatures":[{"id":"We can register periodically called UI updates!","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"com.globaltcad.swingtree.button.JButton_Example_Spec",
      "title":"",
      "narrative":"",
      "featureCount":"3",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"890",
      "executedFeatures":[{"id":"A button will delegate its siblings within actions:","extraInfo":[]},{"id":"We can easily create a button with an associated action:","extraInfo":[]},{"id":"We can go through the entire siblinghood, including the current button!","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"com.globaltcad.swingtree.renderer.Table_Renderer_Spec",
      "title":"",
      "narrative":"",
      "featureCount":"4",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"120",
      "executedFeatures":[{"id":"A map can be used as a data source for tables.","extraInfo":[]},{"id":"We can attach a simple table cell renderer to a JTable in just a few lines of code.","extraInfo":[]},{"id":"We can create a simple column major table cell renderer through a UI factory method.","extraInfo":[]},{"id":"We can create a simple table cell renderer through a UI factory method.","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec",
      "title":"A Button of Buttons",
      "narrative":"",
      "featureCount":"7",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"1067",
      "executedFeatures":[{"id":"A button item can undo any multi-selection.","extraInfo":[]},{"id":"It is possible to select more than 1 item.","extraInfo":[]},{"id":"The most simple kind of split button can be built like so:","extraInfo":[]},{"id":"We can easily build a split button where only one item text will have its text displayed:","extraInfo":[]},{"id":"We can easily build a split button whose text becomes the current user selection:","extraInfo":[]},{"id":"We can register button click events for button items as well as the split button as a whole.","extraInfo":[]},{"id":"We can specify which item should be initially selected.","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec",
      "title":"",
      "narrative":"",
      "featureCount":"3",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"9",
      "executedFeatures":[{"id":"A JSplitButton does not accept null actions.","extraInfo":[]},{"id":"Split button items do not take null as an answer.","extraInfo":[]},{"id":"Split buttons do not take null as an answer.","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec",
      "title":"",
      "narrative":"",
      "featureCount":"1",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"9",
      "executedFeatures":[{"id":"We can build a JSplitButton.","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"com.globaltcad.swingtree.mvvm.Label_Binding_Spec",
      "title":"Label Binding",
      "narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive.",
      "featureCount":"5",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"17",
      "executedFeatures":[{"id":"It is possible to bind to the minimum, maximum and preferred size of a label","extraInfo":[]},{"id":"We can bind to the foreground and background color of a UI node.","extraInfo":[]},{"id":"We can bind to the text of a label.","extraInfo":[]},{"id":"You can bind a variable to the \"enable\" flag of a label.","extraInfo":[]},{"id":"You can bind a variable to the \"visible\" flag of a label.","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"com.globaltcad.swingtree.mvvm.Button_Binding_Spec",
      "title":"Button Binding",
      "narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive.",
      "featureCount":"3",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"37",
      "executedFeatures":[{"id":"We can bind to the text of a button.","extraInfo":[]},{"id":"You can bind to the enabled state of a button.","extraInfo":[]},{"id":"You can bind to the selection state of a button.","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"com.globaltcad.swingtree.mvvm.Properties_Spec",
      "title":"Properties",
      "narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components.",
      "featureCount":"4",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"7",
      "executedFeatures":[{"id":"Properties are simple wrappers around a value","extraInfo":[]},{"id":"Properties can be bound by subscribing to them using the \"onView(..)\" method.","extraInfo":[]},{"id":"Properties not only have a value but also a type and id!","extraInfo":[]},{"id":"There are 2 types of properties, an immutable property, and its mutable sub-type.","extraInfo":[]}],
      "ignoredFeatures":[]
    }
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}