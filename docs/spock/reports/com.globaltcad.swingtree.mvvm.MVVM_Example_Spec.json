{
  "className":"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec",
  "title":"MVVM Introduction",
  "narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n\n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you\n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model.",
  "subjects":[],
  "statistics":{
    "runs":"5",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.288 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"We can create a property based view model and build a view for it.",
      "result":"PASS",
      "duration":"0.005 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Note that we use a pre-made example view model here.\n            Feel free to look at the source code of the view model\n            to see what it is doing.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We instantiate the view model.","code":["var vm = new FormViewModel()"]},

        {"kind":"when","text":"We create a view for our view model...","code":["var node =","    UI.panel(\"fill, wrap 2\")","    .add( UI.label( \"Username:\" ) )","    .add( \"grow\", UI.textField(vm.username()))","    .add( UI.label( \"Password:\" ) )","    .add( \"grow\", UI.passwordField(vm.password()))","    .add( \"span\",","        UI.label(vm.validity())","    )","    .add( \"span\",","        UI.button( \"Login\" )","        .isEnabledIf(vm.loginEnabled())","        .onClick( it -> vm.login() )","    )"]},

        {"kind":"then","text":"The view was successfully created.","code":["node != null"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can bind a boolean property to a button, and when the user presses it, we notice it.",
      "result":"PASS",
      "duration":"0.070 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We instantiate the \"view model\" in the form of a single property.","code":["boolean actionPerformed = false","Var<Boolean> buttonPressed = Var.of(false).withAction({actionPerformed = true})"]},

        {"kind":"when","text":"We create a view for our view model...","code":["var node =","    UI.button(\"Press me!\").isSelectedIf(buttonPressed)"]},

        {"kind":"then","text":"The view was successfully created.","code":["node != null"]},

        {"kind":"when","text":"We press the button.","code":["node.component.doClick()"]},

        {"kind":"then","text":"The property was updated.","code":["actionPerformed == true"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can bind a boolean property to a checkbox, and when the user presses it, we notice it.",
      "result":"PASS",
      "duration":"0.068 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We instantiate the \"view model\" in the form of a single property.","code":["Var<Boolean> checkBoxSelected = Var.of(false)"]},

        {"kind":"when","text":"We create a view for our view model...","code":["var node =","    UI.checkBox(\"Press me!\").isSelectedIf(checkBoxSelected)"]},

        {"kind":"then","text":"The view was successfully created.","code":["node != null"]},

        {"kind":"when","text":"We press the button.","code":["node.component.doClick()"]},

        {"kind":"then","text":"The property was updated.","code":["checkBoxSelected.get() == true"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can bind a boolean property to a radio button, and when the user presses it, we notice it.",
      "result":"PASS",
      "duration":"0.068 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We instantiate the \"view model\" in the form of a single property.","code":["Var<Boolean> radioButton = Var.of(false)"]},

        {"kind":"when","text":"We create a view for our view model...","code":["var node =","    UI.radioButton(\"Press me!\").isSelectedIf(radioButton)"]},

        {"kind":"then","text":"The view was successfully created.","code":["node != null"]},

        {"kind":"when","text":"We press the radio button.","code":["node.component.doClick()"]},

        {"kind":"then","text":"The property was updated.","code":["radioButton.get() == true"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can bind a boolean property to a toggle button, and when the user presses it, we notice it.",
      "result":"PASS",
      "duration":"0.071 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We instantiate the \"view model\" in the form of a single property.","code":["Var<Boolean> isToggled = Var.of(false)"]},

        {"kind":"when","text":"We create a view for our view model...","code":["var node =","    UI.toggleButton(\"Toggle me!\").isSelectedIf(isToggled)"]},

        {"kind":"then","text":"The view was successfully created.","code":["node != null"]},

        {"kind":"when","text":"We press the toggle button.","code":["node.component.doClick()"]},

        {"kind":"then","text":"The property was updated.","code":["isToggled.get() == true"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}