{"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":7,"totalFeatures":8,"passed":7,"successRate":1.0,"time":262},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":659},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":83},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":205},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":33},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1046},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":917},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":7,"totalFeatures":8,"passed":6,"successRate":0.8571428571428571,"time":89},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":215},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":30},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1060},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":673},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":82},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":216},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":35},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1055},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":890},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":7,"totalFeatures":8,"passed":6,"successRate":0.8571428571428571,"time":75},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":29},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1060},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":7,"totalFeatures":8,"passed":7,"successRate":1.0,"time":258},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":667},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":75},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":82},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":215},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":32},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1054},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":926},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":7,"totalFeatures":8,"passed":6,"successRate":0.8571428571428571,"time":76},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":28},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1056},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":7,"totalFeatures":8,"passed":7,"successRate":1.0,"time":260},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":694},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":99},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":29},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1052},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":959},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":7,"totalFeatures":8,"passed":6,"successRate":0.8571428571428571,"time":82},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":213},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":35},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1051},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":1,"successRate":1.0,"time":741},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":824},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":7,"totalFeatures":8,"passed":7,"successRate":1.0,"time":259},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":392},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":250},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":219},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1546},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":111},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1169},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":12},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":10},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":1,"totalFeatures":9,"passed":1,"successRate":1.0,"time":176},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":1,"totalFeatures":9,"passed":0,"successRate":0.0,"time":224},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":1,"skipped":1,"totalRuns":1,"totalFeatures":10,"passed":0,"successRate":0.0,"time":170},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":1,"totalFeatures":10,"passed":1,"successRate":1.0,"time":208},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":1,"skipped":1,"totalRuns":1,"totalFeatures":11,"passed":0,"successRate":0.0,"time":171},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":1,"skipped":1,"totalRuns":1,"totalFeatures":11,"passed":0,"successRate":0.0,"time":165},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":1,"totalFeatures":11,"passed":0,"successRate":0.0,"time":214},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":1,"totalFeatures":11,"passed":1,"successRate":1.0,"time":184},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":848},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":90},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":104},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":80},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":215},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":30},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1054},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":300},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":621},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":98},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":219},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":38},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1058},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":943},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":2,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":8,"successRate":0.8,"time":108},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":85},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":215},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":30},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1055},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":312},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":701},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":86},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":83},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":210},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":219},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":66},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1052},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1008},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":99},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":106},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":83},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":205},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":215},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":32},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1056},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":350},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":718},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":83},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":83},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":215},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":62},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1065},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":1,"successRate":1.0,"time":195},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":1,"successRate":1.0,"time":185},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":170},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":167},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":1,"successRate":1.0,"time":157},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":0,"successRate":0.0,"time":154},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":1,"successRate":1.0,"time":171},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":160},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":322},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":433},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":63},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":82},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":69},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1046},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":215},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":48},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":255},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":434},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":79},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":55},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1044},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":730},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":225},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":243},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":131},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":893},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":74},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1093},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":9},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":7},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1021},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":94},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":94},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":37},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1053},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":283},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":691},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":80},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":213},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":58},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1054},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":929},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":96},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":75},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":84},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":205},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":213},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":51},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1055},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":297},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":672},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":82},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":72},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1052},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["We can bind to the text of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":0,"successRate":0.0,"time":25},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["We can bind to the text of a label."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":0,"successRate":0.0,"time":192},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["We can bind to the text of a label."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":0,"successRate":0.0,"time":191},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["We can bind to the text of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":184},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["We can bind to the foreground color of a UI node.","We can bind to the text of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":185},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["We can bind to the foreground and background color of a UI node.","We can bind to the text of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":195},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":1,"successRate":1.0,"time":196},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":1,"successRate":1.0,"time":230},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":1,"successRate":1.0,"time":188},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":205},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":190},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":906},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":90},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":79},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":82},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":213},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":12},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":38},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1054},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":289},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":646},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":72},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":31},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":37},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1055},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""}}