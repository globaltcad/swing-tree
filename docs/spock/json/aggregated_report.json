{"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":7,"totalFeatures":8,"passed":7,"successRate":1.0,"time":262},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":659},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":83},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":205},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":33},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1046},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":917},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":7,"totalFeatures":8,"passed":6,"successRate":0.8571428571428571,"time":89},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":215},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":30},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1060},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":673},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":82},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":216},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":35},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1055},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":890},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":7,"totalFeatures":8,"passed":6,"successRate":0.8571428571428571,"time":75},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":29},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1060},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":7,"totalFeatures":8,"passed":7,"successRate":1.0,"time":258},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":667},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":75},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":82},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":215},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":32},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1054},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":926},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":7,"totalFeatures":8,"passed":6,"successRate":0.8571428571428571,"time":76},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":28},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1056},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":7,"totalFeatures":8,"passed":7,"successRate":1.0,"time":260},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":694},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":99},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":29},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1052},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":959},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":7,"totalFeatures":8,"passed":6,"successRate":0.8571428571428571,"time":82},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":213},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":35},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1051},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":1,"successRate":1.0,"time":741},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":824},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":7,"totalFeatures":8,"passed":7,"successRate":1.0,"time":259},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":392},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":250},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":219},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI define in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1546},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":111},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1169},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":12},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":10},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":1,"totalFeatures":9,"passed":1,"successRate":1.0,"time":176},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":1,"totalFeatures":9,"passed":0,"successRate":0.0,"time":224},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":1,"skipped":1,"totalRuns":1,"totalFeatures":10,"passed":0,"successRate":0.0,"time":170},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":1,"totalFeatures":10,"passed":1,"successRate":1.0,"time":208},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":1,"skipped":1,"totalRuns":1,"totalFeatures":11,"passed":0,"successRate":0.0,"time":171},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":1,"skipped":1,"totalRuns":1,"totalFeatures":11,"passed":0,"successRate":0.0,"time":165},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":1,"totalFeatures":11,"passed":0,"successRate":0.0,"time":214},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":1,"totalFeatures":11,"passed":1,"successRate":1.0,"time":184},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":848},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":90},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":104},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":80},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":215},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":30},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1054},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":300},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":621},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":98},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":219},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":38},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1058},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":943},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":2,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":8,"successRate":0.8,"time":108},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":85},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":215},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":30},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1055},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":312},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":701},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":86},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":83},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":210},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":219},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":66},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1052},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1008},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":99},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":106},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":83},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":205},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":215},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":32},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1056},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":350},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":718},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":83},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":83},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":215},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":62},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1065},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":1,"successRate":1.0,"time":195},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":1,"successRate":1.0,"time":185},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":170},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":167},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":1,"successRate":1.0,"time":157},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":0,"successRate":0.0,"time":154},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":1,"successRate":1.0,"time":171},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":160},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":322},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":433},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":63},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":82},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":69},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1046},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":215},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":48},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":255},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":434},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":79},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":55},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1044},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":730},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":225},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":243},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":131},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":893},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":74},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1093},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":9},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":7},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1021},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":94},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":94},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":37},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1053},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":283},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":691},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":80},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":213},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":58},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1054},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":929},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":96},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":75},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":84},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":205},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":213},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":51},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1055},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":297},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":672},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":82},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":72},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1052},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["We can bind to the text of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":0,"successRate":0.0,"time":25},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["We can bind to the text of a label."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":0,"successRate":0.0,"time":192},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["We can bind to the text of a label."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":0,"successRate":0.0,"time":191},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["We can bind to the text of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":184},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["We can bind to the foreground color of a UI node.","We can bind to the text of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":185},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["We can bind to the foreground and background color of a UI node.","We can bind to the text of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":195},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":1,"successRate":1.0,"time":196},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":1,"successRate":1.0,"time":230},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":1,"successRate":1.0,"time":188},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":205},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":190},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":906},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":90},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":79},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":82},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":213},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":12},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":38},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1054},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":289},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":646},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":72},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":31},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":37},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1055},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["Properties are simple wrappers around a value","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":102},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":105},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":88},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":165},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":142},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":1,"successRate":1.0,"time":94},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":890},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":249},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":212},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":162},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":225},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1080},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":37},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":17},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":7},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":120},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1067},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":9},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":9},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":661},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":597},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":597},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":1,"successRate":1.0,"time":630},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":703},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":238},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":212},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":142},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1061},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":22},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":16},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":34},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":90},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1101},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":18},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":9},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":1,"successRate":1.0,"time":20},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":174},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":292},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":462},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":9},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":16},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":56},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":62},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":7},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1039},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"withID(..)\" method produces a new property with all bindings inherited.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":6,"passed":1,"successRate":1.0,"time":33},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"withID(..)\" method produces a new property with all bindings inherited.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":7,"passed":0,"successRate":0.0,"time":52},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"withID(..)\" method produces a new property with all bindings inherited.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":7,"passed":1,"successRate":1.0,"time":25},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"withID(..)\" method produces a new property with all bindings inherited.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":8,"passed":1,"successRate":1.0,"time":26},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":157},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":285},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":411},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"withID(..)\" method produces a new property with all bindings inherited.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":6,"successRate":0.75,"time":20},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":15},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":47},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":66},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1047},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"withID(..)\" method produces a new property with all bindings inherited.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":49},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":201},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":42},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":249},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":416},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":75},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":56},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1046},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"withID(..)\" method produces a new property with all bindings inherited.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":9,"passed":1,"successRate":1.0,"time":25},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":10,"passed":1,"successRate":1.0,"time":23},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":165},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":277},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":506},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":10,"passed":10,"successRate":1.0,"time":14},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":14},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":51},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":61},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1042},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":261},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":55},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":269},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":417},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":10,"passed":10,"successRate":1.0,"time":20},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":58},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1047},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":153},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":276},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":437},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":10,"passed":10,"successRate":1.0,"time":13},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":15},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":51},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":61},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1045},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":233},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":48},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":265},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":399},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":10,"passed":10,"successRate":1.0,"time":14},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":12},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":57},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1046},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":161},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":278},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":412},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":10,"passed":10,"successRate":1.0,"time":17},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":14},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":53},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":55},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1038},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":234},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":42},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":247},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":381},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":10,"passed":10,"successRate":1.0,"time":12},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":12},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":56},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":202},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1050},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":11,"passed":0,"successRate":0.0,"time":128},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":11,"passed":0,"successRate":0.0,"time":98},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":11,"passed":1,"successRate":1.0,"time":55},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":11,"passed":0,"successRate":0.0,"time":94},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":11,"passed":0,"successRate":0.0,"time":99},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":11,"passed":0,"successRate":0.0,"time":92},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":11,"passed":1,"successRate":1.0,"time":62},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":747},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":213},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":216},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":130},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":215},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":942},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":21},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":20},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":33},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":22},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1073},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":10},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":17},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":593},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":814},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":266},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":0,"successRate":0.0,"time":293},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":148},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":219},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1343},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":23},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":18},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":14},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":32},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":29},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":106},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1107},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":12},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":9},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":636},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":358},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":197},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":144},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":213},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1401},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":21},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":21},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":13},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":29},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":26},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":91},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1116},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":9},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":8},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":716},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":236},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":216},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":144},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":227},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1096},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":23},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":18},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":15},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":39},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":23},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":94},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1083},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":10},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":9},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":965},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":1,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":8,"successRate":0.8,"time":112},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":75},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":0,"successRate":0.0,"time":78},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":3,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":0,"successRate":0.0,"time":215},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":0,"successRate":0.0,"time":21},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":5,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":0,"successRate":0.0,"time":24},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":7},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":14},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":5,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":0,"successRate":0.0,"time":28},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":41},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":6,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":1,"successRate":0.14285714285714285,"time":436},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":1,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":14625},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":0,"successRate":0.0,"time":155},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":3,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":0,"successRate":0.0,"time":244},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":0,"successRate":0.0,"time":39},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":5,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":0,"successRate":0.0,"time":42},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":5,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":0,"successRate":0.0,"time":49},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":6,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":1,"successRate":0.14285714285714285,"time":458},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":623},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":83},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":9},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":19},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":52},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":8},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":1,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":365},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":0,"successRate":0.0,"time":152},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":3,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":0,"successRate":0.0,"time":238},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":0,"successRate":0.0,"time":38},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":5,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":0,"successRate":0.0,"time":34},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":5,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":0,"successRate":0.0,"time":41},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":6,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":1,"successRate":0.14285714285714285,"time":456},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":607},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":85},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":7},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":11},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":46},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":876},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":100},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":90},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":83},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":9},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":7},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":14},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":13},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":37},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1049},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":314},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":638},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":215},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":9},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":7},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":37},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1051},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":890},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":93},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":0,"successRate":0.0,"time":80},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":0,"successRate":0.0,"time":215},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":0,"successRate":0.0,"time":12},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":2,"successRate":0.4,"time":11},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":6},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":5,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":0,"successRate":0.0,"time":24},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":35},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":6,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":1,"successRate":0.14285714285714285,"time":646},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":303},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":142},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":230},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":9},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":20},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1064},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":535},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":74},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":7},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onView(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":13},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":39},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":938},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":104},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":84},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":9},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":8},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":12},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":13},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":36},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1052},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":318},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":647},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":79},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":83},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":9},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":7},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":12},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":13},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":37},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1051},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":872},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":92},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":73},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":82},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":205},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":212},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":8},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":6},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":35},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1051},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":310},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":703},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":74},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":9},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":6},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":12},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":13},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":37},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1051},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":0,"successRate":0.0,"time":653},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":1,"successRate":1.0,"time":379},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":460},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":1,"successRate":1.0,"time":403},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":1,"successRate":1.0,"time":629},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":869},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":970},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":948},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":237},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":266},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":185},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":212},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1331},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":21},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":18},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":305},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":36},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":27},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":103},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1104},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":10},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":9},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":254},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":212},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":209},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":152},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":151},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":307},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":442},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":292},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":54},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":61},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1046},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":221},"title":"Swing tree makes UI building fun again!","narrative":"The swing tree library is in essence a more dynamic type of HTML for swing,\n    which allows for very readable UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":54},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":145},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":252},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":400},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":291},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":57},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1041},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":174},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":153},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":2,"successRate":0.6666666666666666,"time":271},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":435},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":296},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":14},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":56},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":64},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":8},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1048},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":392},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":75},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":43},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":144},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":401},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":291},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":75},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":59},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":9},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1044},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":171},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":151},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":273},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":447},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":298},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":12},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":54},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":75},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":65},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1040},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":220},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":48},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":142},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":246},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":389},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":289},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":56},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":202},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1039},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":223},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":233},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":210},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":223},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":218},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":225},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":218},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":228},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":26117},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":244},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":238},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":463},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":455},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":1,"successRate":1.0,"time":580},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":158},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":581},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":267},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":425},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":294},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":57},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":53},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":7},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1042},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":219},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":46},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":575},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":246},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":386},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":288},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":75},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":51},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":7},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1045},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":173},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":825},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":270},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":475},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":293},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":57},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":59},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":7},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1049},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":255},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":47},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":935},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":248},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":406},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":293},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":11},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":6},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":63},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1054},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":169},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":948},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":274},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":435},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":293},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":13},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":59},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":56},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1044},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":253},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":43},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":937},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":251},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":405},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":288},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":53},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1048},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":160},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":3,"successRate":0.75,"time":887},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":270},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":426},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":294},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":11},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":51},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":56},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1047},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":1061},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":93},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":45},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":256},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":433},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":290},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":12},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":58},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1044},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":169},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":956},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":268},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":433},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":293},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":52},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":63},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":7},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1046},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":223},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":53},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":927},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":254},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":403},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":290},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":6},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":59},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1042},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":163},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":3,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":1,"successRate":0.25,"time":107},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":279},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":417},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":293},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":30},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":64},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":49},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1040},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":2,"successRate":0.5,"time":741},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":92},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":41},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":249},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":369},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":287},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":51},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1040},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":0,"successRate":0.0,"time":525},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":0,"successRate":0.0,"time":528},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":0,"successRate":0.0,"time":503},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":0,"successRate":0.0,"time":523},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":1,"successRate":1.0,"time":857},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":150},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":950},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":262},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":399},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":288},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":51},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":75},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":49},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":202},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1049},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":203},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":40},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":938},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":243},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":381},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":286},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":6},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":9},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":75},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":56},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1049},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":159},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":945},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":264},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":433},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":291},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":60},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":68},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":202},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1045},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":223},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library is like a more dynamic type of HTML for swing,\n    which allows for very readable declarative UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":44},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":937},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":247},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":395},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":287},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":9},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":75},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":53},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":202},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1052},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":0,"successRate":0.0,"time":141},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":1,"successRate":1.0,"time":125},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":1,"successRate":1.0,"time":143},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)m\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    This allows SwingTree applications to perform long running tasks\n    in the background without blocking the UI."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":155},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":984},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":254},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":409},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":288},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":12},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":52},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":75},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":49},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1050},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":227},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":43},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":942},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":246},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":375},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":288},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":55},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1050},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":158},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":978},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":255},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":415},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":290},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":54},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":59},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":2,"errors":1,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":4,"successRate":0.5714285714285714,"time":912},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":214},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":5,"successRate":0.7142857142857143,"time":1009},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":48},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":936},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":244},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":380},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":286},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":49},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":3},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":6,"successRate":0.8571428571428571,"time":1182},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":56},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":971},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":251},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":393},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":290},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":47},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":56},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":3},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":201},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1075},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":42},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":939},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":243},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":369},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":287},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":6},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":51},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":202},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":3},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":153},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":973},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":253},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":419},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":290},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":51},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":51},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1049},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":220},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":45},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":935},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":249},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":429},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":291},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":57},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1056},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":1,"totalFeatures":7,"passed":0,"successRate":0.0,"time":121},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":7,"passed":1,"successRate":1.0,"time":549},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":7,"passed":1,"successRate":1.0,"time":566},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":154},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":973},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":255},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":401},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":290},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":54},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":50},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":6,"successRate":0.8571428571428571,"time":1054},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":200},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1073},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":40},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":933},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":243},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":366},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":287},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":53},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":202},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":3},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":167},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":4,"successRate":0.8,"time":716},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":254},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":411},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":293},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":9},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":41},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":65},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1049},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1090},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":77},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":45},"title":"","narrative":""},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":244},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":383},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":286},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":6},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":9},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":61},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1051},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":139},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":978},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":260},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":404},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":291},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":10},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":50},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":55},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1055},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":198},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":41},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":937},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":243},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":382},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":287},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":6},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":75},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":57},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1053},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":153},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":974},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":267},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":424},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":291},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":55},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":75},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":56},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton and add components to it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":8},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1051},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":207},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":39},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":934},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":246},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":385},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":288},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if their are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":9},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to use model UI state \n    and business logic with properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":6},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":64},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton and add components to it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1055},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to the different kind of factory methods."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":12,"passed":1,"successRate":1.0,"time":146},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":12,"passed":1,"successRate":1.0,"time":205},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":173},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":975},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":258},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":433},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":291},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":79},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":13},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":55},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":62},"title":"","narrative":""},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton and add components to it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1047},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":235},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":44},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":948},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":251},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":453},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":287},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":79},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":57},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton and add components to it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":10},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1049},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":159},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1005},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":274},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":505},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":295},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":83},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":12},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":67},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":61},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton and add components to it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1059},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":351},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":67},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":946},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":258},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":431},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":294},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":82},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":14},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":73},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton and add components to it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":7},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1062},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":164},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":994},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":269},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":425},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":300},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":81},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":58},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":55},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton and add components to it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":7},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1052},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":219},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":49},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":939},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":249},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":396},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":289},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":78},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":12},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":76},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":56},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":202},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton and add components to it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1043},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":168},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":973},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":296},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":441},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":292},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":81},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":53},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":58},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton and add components to it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1056},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":234},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":47},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":939},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":247},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":435},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":291},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":79},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":6},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":75},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":58},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton and add components to it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1050},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":162},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":969},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":259},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":425},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":295},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":81},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":55},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":0,"successRate":0.0,"time":77},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":66},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton and add components to it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1047},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":301},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":152},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":970},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":249},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":403},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":289},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":79},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":1,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":9,"successRate":0.9,"time":52},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":56},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton and add components to it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":7},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1048},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":10,"totalFeatures":11,"passed":10,"successRate":1.0,"time":204},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs declaratively, which you can think of\n    as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    and allows for very readable declarative builder pattern based UI design.\n    In this specification we cover the utter most basic properties of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":47},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":932},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":245},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":393},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":288},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":79},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":82},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":55},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Spec":{"executedFeatures":["We can build a JSplitButton and add components to it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1053},"title":"A Button of Buttons","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":1,"totalFeatures":12,"passed":1,"successRate":1.0,"time":144},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes.","We can use the swing tree to build a valid Swing GUI tree."],"ignoredFeatures":["Swing tree makes us a viewable window!"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":1,"totalFeatures":12,"passed":1,"successRate":1.0,"time":130},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":157},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":968},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":261},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":457},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":291},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":80},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can a border layout based Swing tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":10,"successRate":0.9090909090909091,"time":58},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":58},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1057},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","We can a border layout based Swing tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register list selection events on a JList based swing tree node.","We can register various UI focus events in swing tree nodes.","We can register various keyboard events in swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":222},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":59},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":938},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":249},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":393},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":288},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":82},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":90},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":55},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1053},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":12,"passed":0,"successRate":0.0,"time":150},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":12,"passed":1,"successRate":1.0,"time":140},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":149},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":987},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":252},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":434},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":289},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":80},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":11,"successRate":0.9166666666666666,"time":54},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":57},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":202},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1052},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":234},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":51},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":939},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":251},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":378},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":286},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseThrow\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":79},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":6},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":9},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":58},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1056},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":163},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":978},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":253},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":417},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":292},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":10,"successRate":0.8333333333333334,"time":82},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":8},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":11,"successRate":0.9166666666666666,"time":49},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":79},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":56},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1062},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"get\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":10,"successRate":0.8333333333333334,"time":220},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":99},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":48},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":933},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":248},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":419},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":282},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":12},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":57},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":202},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1053},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":204},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":52},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":962},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":254},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":418},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":287},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":11,"successRate":0.9166666666666666,"time":51},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":54},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1054},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":229},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":47},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":931},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":246},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":399},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":287},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":79},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":6},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":9},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":52},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":202},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1051},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\".","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":13,"passed":1,"successRate":1.0,"time":29},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":204},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":996},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":302},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":410},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":291},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":81},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":12},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":11,"successRate":0.9166666666666666,"time":59},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":56},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":8},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1059},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":223},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":42},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":941},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":249},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":403},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":288},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":79},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":60},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":202},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1060},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":6,"passed":1,"successRate":1.0,"time":183},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":6,"passed":1,"successRate":1.0,"time":177},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":7,"passed":1,"successRate":1.0,"time":176},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":163},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":977},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":256},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":408},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":314},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":79},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":11,"successRate":0.9166666666666666,"time":58},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":42},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1061},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":8,"passed":1,"successRate":1.0,"time":182},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":160},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":967},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":250},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":410},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":315},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":79},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":7},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":9},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":11,"successRate":0.9166666666666666,"time":51},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":44},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1055},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":246},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":42},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":935},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":246},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":381},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":326},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":78},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":6},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":80},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":44},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1058},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":8,"passed":1,"successRate":1.0,"time":194},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":144},"title":"","narrative":""},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":6,"passed":1,"successRate":1.0,"time":132},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":7,"passed":1,"successRate":1.0,"time":137},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":8,"passed":1,"successRate":1.0,"time":154},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":1,"totalFeatures":9,"passed":0,"successRate":0.0,"time":72},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":1,"totalFeatures":9,"passed":0,"successRate":0.0,"time":71},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":9,"passed":1,"successRate":1.0,"time":181},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":9,"passed":1,"successRate":1.0,"time":176},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":163},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":986},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":254},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":423},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":9},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":316},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":79},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":13},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":11,"successRate":0.9166666666666666,"time":52},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":41},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1051},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":223},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":40},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":943},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":247},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":387},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":8},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":315},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":79},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":13},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":13},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":79},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":43},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1058},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":159},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":979},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":255},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":412},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":9},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":312},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":81},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":14},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":9},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":11,"successRate":0.9166666666666666,"time":52},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":44},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1054},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":238},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":41},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":937},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":248},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":394},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":9},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":314},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":80},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":14},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":43},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1051},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":714},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":300},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":297},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":196},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":228},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1069},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":30},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":46},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":5,"successRate":0.625,"time":399},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":115},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":23},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":16},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":91},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1131},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":11},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1012},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":8,"passed":0,"successRate":0.0,"time":636},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":8,"passed":0,"successRate":0.0,"time":647},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1003},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":327},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":229},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":227},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":176},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":216},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The simple Table-UI example has the expected state.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":974},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":11},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":38},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":103},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":22},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":13},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":93},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1162},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":10},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":983},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1996},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":2044},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":2136},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":756},"title":"","narrative":""},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":256},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":213},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":170},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":210},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1036},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":18},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":45},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":343},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":99},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":29},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":14},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":109},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1207},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":12},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1010},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":8,"passed":1,"successRate":1.0,"time":241},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a selection history in their model actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":14,"passed":1,"successRate":1.0,"time":34},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their model actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":14,"passed":0,"successRate":0.0,"time":56},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their model actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":14,"passed":0,"successRate":0.0,"time":53},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their model actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":14,"passed":1,"successRate":1.0,"time":29},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":15,"passed":1,"successRate":1.0,"time":28},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":16,"passed":0,"successRate":0.0,"time":49},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":16,"passed":0,"successRate":0.0,"time":48},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":16,"passed":1,"successRate":1.0,"time":27},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":16,"passed":0,"successRate":0.0,"time":52},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":16,"passed":1,"successRate":1.0,"time":26},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":16,"passed":1,"successRate":1.0,"time":29},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":16,"passed":0,"successRate":0.0,"time":58},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":16,"passed":0,"successRate":0.0,"time":52},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":13,"successRate":0.8125,"time":278},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":15,"successRate":0.9375,"time":239},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":15,"successRate":0.9375,"time":243},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":245},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":166},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":977},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":255},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":463},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":7},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":316},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":81},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":13},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":9},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":11,"successRate":0.9166666666666666,"time":48},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":44},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1057},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":12,"successRate":1.0,"time":234},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":40},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":933},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":251},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":422},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":9},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":303},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":84},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":13},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":43},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1053},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":13,"passed":0,"successRate":0.0,"time":165},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":13,"passed":1,"successRate":1.0,"time":191},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":157},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":965},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":256},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":457},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":8},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":314},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":82},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":14},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":12,"successRate":0.9230769230769231,"time":67},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":50},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1053},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":285},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":44},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":933},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":223},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":396},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":5},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":301},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":83},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":11},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":2},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":9},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":77},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":44},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1047},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":144},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":969},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":251},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":422},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":7},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":311},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":82},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":13},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":9},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":12,"successRate":0.9230769230769231,"time":64},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":52},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1049},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":262},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":43},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":938},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":225},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":393},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":6},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":297},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":82},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":12},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":41},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1045},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":157},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":980},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":288},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":456},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":9},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":316},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":15,"successRate":0.9375,"time":20},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":4,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":5,"successRate":0.5555555555555556,"time":18},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":0,"successRate":0.0,"time":6},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":2,"successRate":0.4,"time":21},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":11,"successRate":0.8461538461538461,"time":48},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":79},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":42},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1060},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":9,"passed":0,"successRate":0.0,"time":159},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":176},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":53},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":966},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":267},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":401},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":7},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":314},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":83},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":12},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":12,"successRate":0.9230769230769231,"time":68},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":79},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":55},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1052},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":310},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":42},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":938},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":227},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":402},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":6},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":299},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":83},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":12},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":13},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":47},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1050},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":157},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":975},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":255},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":447},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":8},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":314},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":83},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":15},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":12,"successRate":0.9230769230769231,"time":66},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":79},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":45},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1053},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":342},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":52},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":946},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":229},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":435},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":13},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":305},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":84},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":18},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":14},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":79},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":53},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1057},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":184},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":981},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":262},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":470},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":9},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":320},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":83},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":16},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":13},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":12,"successRate":0.9230769230769231,"time":86},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":80},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":62},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":7},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1064},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":270},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":43},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":937},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":223},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":395},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":6},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":297},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":81},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":13},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":3},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":9},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":48},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1053},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":166},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":958},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":256},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":445},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":8},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":314},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":86},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":14},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":11},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":12,"successRate":0.9230769230769231,"time":67},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":80},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":45},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1057},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":311},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":40},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":931},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":225},"title":"","narrative":""},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":395},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":5},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":309},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":83},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":13},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":79},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":42},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1052},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":1208},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":11,"successRate":0.8461538461538461,"time":140},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":70},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":93},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":205},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":15},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":6,"successRate":0.75,"time":317},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":85},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":9},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":7},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":216},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":31},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1063},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":922},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":12,"successRate":0.9230769230769231,"time":577},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":6,"successRate":0.75,"time":331},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":684},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":92},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":205},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":7},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":22},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":94},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":14},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":10},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":218},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":37},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1074},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":929},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":954},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":12,"successRate":0.9230769230769231,"time":147},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":69},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":95},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":209},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":16},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":311},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":85},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":7},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":214},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":32},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1065},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":918},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":404},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":657},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":72},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":97},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":6},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":18},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":323},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":83},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":9},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":7},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":215},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":37},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1072},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":12},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":931},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A simple list of elements can be used as a data model for a combo box.","A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":9,"passed":1,"successRate":1.0,"time":226},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A simple array of elements can be used as a data model for a combo box.","A simple list of elements can be used as a data model for a combo box.","A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":10,"passed":0,"successRate":0.0,"time":262},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A simple array of elements can be used as a data model for a combo box.","A simple list of elements can be used as a data model for a combo box.","A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":10,"passed":1,"successRate":1.0,"time":218},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A simple array of elements can be used as a data model for a combo box.","A simple list of elements can be used as a data model for a combo box.","A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it.","You can bind a property as the current selection as well as list of elements as options to a combo box."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":11,"passed":0,"successRate":0.0,"time":310},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A simple array of elements can be used as a data model for a combo box.","A simple list of elements can be used as a data model for a combo box.","A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it.","You can bind a property as the current selection as well as list of elements as options to a combo box."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":11,"passed":0,"successRate":0.0,"time":305},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A simple array of elements can be used as a data model for a combo box.","A simple list of elements can be used as a data model for a combo box.","A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it.","You can bind a property as the current selection as well as list of elements as options to a combo box."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":11,"passed":0,"successRate":0.0,"time":339},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A simple array of elements can be used as a data model for a combo box.","A simple list of elements can be used as a data model for a combo box.","A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it.","You can bind a property as the current selection as well as list of elements as options to a combo box."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":11,"passed":0,"successRate":0.0,"time":337},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A simple array of elements can be used as a data model for a combo box.","A simple list of elements can be used as a data model for a combo box.","A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it.","You can bind a property as the current selection as well as list of elements as options to a combo box."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":11,"passed":1,"successRate":1.0,"time":277},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A simple array of elements can be used as a data model for a combo box.","A simple list of elements can be used as a data model for a combo box.","A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it.","You can bind a property as the current selection as well as list of elements as options to a combo box."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":11,"passed":0,"successRate":0.0,"time":258},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A simple array of elements can be used as a data model for a combo box.","A simple list of elements can be used as a data model for a combo box.","A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it.","You can bind a property as the current selection as well as list of elements as options to a combo box."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":11,"passed":1,"successRate":1.0,"time":215},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":988},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":12,"successRate":0.9230769230769231,"time":123},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":68},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":93},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":204},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":16},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A simple array of elements can be used as a data model for a combo box.","A simple list of elements can be used as a data model for a combo box.","A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it.","You can bind a property as the current selection as well as list of elements as options to a combo box."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":320},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":84},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":7},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":216},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":33},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1070},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":921},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."},"com.globaltcad.swingtree.common.Basic_UI_Builder_Examples_Spec":{"executedFeatures":["A tabbed pane can be created and populated in a declarative way.","An enum based combo box can have custom cell rendering.","Swing tree nests all kinds of components (trough builder nodes).","Tab header components can be passed to the \"tab\" factory method instead of the title.","The tab buttons of a tabbed pane can have custom components.","Use the \"peek( c -> {} )\" method to access the wrapped Swing component in your Swing-Tree.","We can add a list of components to the swing tree API and get a builder node in return.","We can create a border layout based Swing tree.","We can easily define the cursor on a wrapped UI component","We can nest JPanel UI nodes to structure UIs.","We can register different UI focus event handlers to swing tree nodes.","We can register list selection events on a JList based swing tree node.","We can register various kinds of different keyboard event handlers to swing tree nodes."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":13,"totalFeatures":13,"passed":13,"successRate":1.0,"time":389},"title":"Swing tree makes UI building fun again!","narrative":"The Swing-Tree library allows you to build UIs using declarative code, \n    which you can think of as a more dynamic type of HTML but for swing.\n    It is inspired by frameworks like Jetpack Compose, Flutter, React and SwiftUI\n    which are also based on nested builder patterns to design your UI.\n    In this specification we cover the utter most basics of swing tree."},"com.globaltcad.swingtree.examples.Examples_Spec":{"executedFeatures":["The advanced UI define in the examples has the expected state.","The calculator UI defined in the examples has the expected state.","The form UI define in the examples has the expected state.","The login example UI define in the examples can be created.","The simple Table-UI example has the expected state.","The spinners example UI define in the examples can be created.","The todo app UI defined in the examples has the expected state."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":659},"title":"Execution and Validation of Example Code","narrative":"This specification ensures that the\n    various UI examples in the test suite, \n    run successfully and also produce\n    UIs with expected states."},"com.globaltcad.swingtree.common.Basic_UI_Exception_Spec":{"executedFeatures":["The given factory methods do not accept null arguments."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":66},"title":"How Not To Use","narrative":"This specification shows you how NOT to use the Swing-Tree API."},"com.globaltcad.swingtree.common.UI_Query_Spec":{"executedFeatures":["We can query the swing tree within an action lambda."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":99},"title":"Swing Tree UI Query","narrative":"The Swing-Tree UI builder allows you to easily build UIs and query them for\n    specific components inside component event action lambdas! \n    This allows you to easily build UIs that are event driven and react to\n    user input in a very flexible way.\n    Note that this should be used with care as it can lead to very complex\n    UIs that are hard to maintain.\n    Please consider modelling your UIs logic using MVVM based on \n    property bindings (See the properties specification)."},"com.globaltcad.swingtree.common.UI_Updates_Spec":{"executedFeatures":["We can register periodically called UI updates!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":203},"title":"Dynamic UI Updates","narrative":"The Swing-Tree UI builder allows you to easily build UI with periodic updates.\n    This is useful for example when you want to build animated UIs or UIs that\n    perform some sort of refreshes periodically."},"com.globaltcad.swingtree.mvvm.Button_Binding_Spec":{"executedFeatures":["We can bind to the text of a button.","You can bind to the enabled state of a button.","You can bind to the selection state of a button."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":4},"title":"Button Binding","narrative":"As a developer, I want to bind a button to a property so \n    that is is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.Label_Binding_Spec":{"executedFeatures":["A property can define the horizontal and vertical alignment of a label.","A property can define the image relative horizontal and vertical alignment of a label.","It is possible to bind to the minimum, maximum and preferred size of a label","We can bind to the foreground and background color of a UI node.","We can bind to the text of a label.","We can store icons inside properties and then bind them to labels.","You can bind a variable to the \"enable\" flag of a label.","You can bind a variable to the \"visible\" flag of a label.","You can dynamically model the font size of your labels using an integer based property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":9,"totalFeatures":9,"passed":9,"successRate":1.0,"time":15},"title":"Label Binding","narrative":"As a developer, I want to bind a label to a property so \n    that the label is updated when the property changes.\n    Binding is a powerful feature that allows us to create\n    UIs which are not only decoupled from the business logic of\n    an application, but also make it easy to create UIs which\n    are dynamic and reactive."},"com.globaltcad.swingtree.mvvm.MVVM_Example_Spec":{"executedFeatures":["A simple array of elements can be used as a data model for a combo box.","A simple list of elements can be used as a data model for a combo box.","A string property can be bound to a combo box holding string elements.","An enum based combo box can infer its possible states directly from the binding property.","We can bind a boolean property to a button, and when the user presses it, we notice it.","We can bind a boolean property to a checkbox, and when the user presses it, we notice it.","We can bind a boolean property to a radio button, and when the user presses it, we notice it.","We can bind a boolean property to a toggle button, and when the user presses it, we notice it.","We can bind a enum property to a combo box and when the user selects an item, we notice it.","We can create a property based view model and build a view for it.","You can bind a property as the current selection as well as list of elements as options to a combo box."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":11,"successRate":1.0,"time":334},"title":"MVVM Introduction","narrative":"Swing-Tree allows you to create a Model-View-ViewModel (MVVM) architecture\n    based on 2 simple property interfaces: `Val`, and `Var`!\n    \n    `Val` is a read-only property, and `Var` is a read-write property.\n\n    The state of both properties can be observed by the view using simple listeners.\n    This happens automatically when you pass them to the Swing-Tree view.\n    If you want to trigger an action when the property changes, you \n    have to pass the `Var` property to the view and define a action\n    for it inside of your view model."},"com.globaltcad.swingtree.mvvm.Properties_Spec":{"executedFeatures":["A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onShow(..)\" method.","Properties expose a state history in their property actions.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null values.","The \"withID(..)\" method produces a new property with all bindings inherited.","The delegate of a property action exposes the current as well as the previous state of the property.","The equality and hash code of a property are based on its value, type and id!","There are 2 types of properties, an immutable property, and its mutable sub-type.","They can be bound to the UI by passing them to a builder node.","We can search for a previous state of a property in its history."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"totalFeatures":16,"passed":16,"successRate":1.0,"time":84},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"com.globaltcad.swingtree.mvvm.Property_Binding_Spec":{"executedFeatures":["We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":10},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"com.globaltcad.swingtree.mvvm.Scroll_Pane_Binding_Spec":{"executedFeatures":["A property holding a vertical scroll bar policy can be bound to the UI.","You can model the horizontal scroll bar policy us ing a view model property dynamically."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":6},"title":"Scroll Pane Binding","narrative":"Although a scroll pane does not hold information\n    that is relevant to your core business logic, it certainly has certain properties\n    relevant to the view and its usability. \n    For example, the scroll pane can be enabled or disabled, or it\n    can have certain kinds of scroll policies.\n    This specifications shows how to bind `Val` properties to scroll panes."},"com.globaltcad.swingtree.button.JButton_Example_Spec":{"executedFeatures":["A button will delegate its siblings within actions:","We can easily create a button with an associated action:","We can go through the entire siblinghood, including the current button!"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":216},"title":"","narrative":""},"com.globaltcad.swingtree.renderer.Table_Renderer_Spec":{"executedFeatures":["A map can be used as a data source for tables.","We can attach a simple table cell renderer to a JTable in just a few lines of code.","We can create a simple column major table cell renderer through a UI factory method.","We can create a simple table cell renderer through a UI factory method."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":33},"title":"Rendering Table Cells","narrative":"Swing-Tree exposes a user friendly API for rendering table cells.\n    For simple table UIs none of this is necessary, but it\n    is important when you want to populate your table with more complex data.\n    The renderer is a simple function that takes a value and returns a UI node.\n    The UI node is then rendered as a table cell."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Examples_Spec":{"executedFeatures":["A button item can undo any multi-selection.","It is possible to select more than 1 item.","The most simple kind of split button can be built like so:","We can build a JSplitButton and add components to it.","We can easily build a split button where only one item text will have its text displayed:","We can easily build a split button whose text becomes the current user selection:","We can register button click events for button items as well as the split button as a whole.","We can specify which item should be initially selected."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":1071},"title":"A Button of Buttons","narrative":"The Swing-Tree split button component allows \n    you to easily create split buttons in your UIs.\n    A split button is a button that has a drop down menu attached to it.\n    This allows you to easily add additional functionality to your buttons.\n    The split button component is a wrapper around the AlexAndria Software\n    JSplitButton component."},"com.globaltcad.swingtree.splitbutton.JSplitButton_Exception_Spec":{"executedFeatures":["A JSplitButton does not accept null actions.","Split button items do not take null as an answer.","Split buttons do not take null as an answer."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":5},"title":"","narrative":""},"com.globaltcad.swingtree.threading.Thread_Mode_Spec":{"executedFeatures":["Accessing the UI from something other than the UI thread, leads to an exception when in decoupled thread mode.","Inside an event lambda we can not access the UI from a background thread.","The application thread can safely effect the state of the UI by using the \"UI.run(()->{..})\" method.","The default \"coupled\" thread mode will use the AWT thread for event handling.","We can use the decoupled thread mode to queue backend events."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":924},"title":"Thread Modes","narrative":"Swing only knows 1 thread, the Event Dispatch Thread (EDT)\n    which performs both the UIs rendering as well as event handling.\n    This is a problem for Swing applications that need to perform\n    long running tasks in the background, as the EDT will be blocked\n    until the task is complete.\n    SwingTree provides a mechanism for creating UIs which \n    dispatch events to a custom application thread as well as ensure that all UI related \n    operations are performed on the event dispatch thread!\n    Not only does this allow your applications to perform long running tasks\n    in the background without blocking the UI, it improves\n    the performance and responsiveness of you desktop application as a whole."}}